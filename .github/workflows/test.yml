name: Build & Test
on:
  pull_request:
    paths:
      - "**.go"
      - go.mod
      - go.sum
  push:
    branches:
      - main
    paths:
      - "**.go"
      - go.mod
      - go.sum

jobs:
  cleanup-runs:
    if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/main'"
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"

  test-coverage-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v3.0.0
        with:
          go-version: 1.17

      - uses: actions/checkout@v2.4.0

      - uses: actions/cache@v3.0.2
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.mod') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: build
        run: make build

      - name: test & coverage report creation
        run: |
          make test-unit-cover

      - name: filter out DONTCOVER
        run: |
          excludelist="$(find ./ -type f -name '*.go' | xargs grep -l 'DONTCOVER')"
          excludelist+=" $(find ./ -type f -name '*.pb.go')"
          excludelist+=" $(find ./ -type f -path './tests/mocks/*.go')"
          for filename in ${excludelist}; do
            filename=$(echo $filename | sed 's/^./github.com\/cosmos\/cosmos-sdk/g')
            echo "Excluding ${filename} from coverage report..."
            sed -i.bak "/$(echo $filename | sed 's/\//\\\//g')/d" coverage.txt
          done

      - uses: codecov/codecov-action@v3.0.0
        with:
          file: ./coverage.txt # optional
          fail_ci_if_error: true

  test-e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    steps:
      - uses: actions/setup-go@v3.0.0
        with:
          go-version: 1.17

      - uses: actions/checkout@v2

      - name: Build Docker Image
        run: make docker-build-debug

      - name: Test E2E
        run: make test-e2e
