"use strict";(self.webpackChunkcosmos_hub_docs_site=self.webpackChunkcosmos_hub_docs_site||[]).push([[587],{4169:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"hub-tutorials/upgrade-node","title":"Upgrading Your Node","description":"This document describes the upgrade procedure of a gaiad full-node to a new version.","source":"@site/docs/hub-tutorials/upgrade-node.md","sourceDirName":"hub-tutorials","slug":"/hub-tutorials/upgrade-node","permalink":"/main/hub-tutorials/upgrade-node","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Upgrading Your Node","order":4},"sidebar":"tutorialSidebar","previous":{"title":"Upgrading the Chain","permalink":"/main/hub-tutorials/live-upgrade-tutorial"},"next":{"title":"Delegators","permalink":"/main/delegators/"}}');var r=s(2467),a=s(8453);const t={title:"Upgrading Your Node",order:4},i="Upgrade Your Node",d={},c=[{value:"Cosmovisor",id:"cosmovisor",level:2},{value:"Setup",id:"setup",level:3},{value:"Preparing an Upgrade",id:"preparing-an-upgrade",level:3},{value:"Manual Software Upgrade",id:"manual-software-upgrade",level:2},{value:"Upgrade Genesis File",id:"upgrade-genesis-file",level:2},{value:"Fetching from a Trusted Source",id:"fetching-from-a-trusted-source",level:3},{value:"Exporting State to a New Genesis Locally",id:"exporting-state-to-a-new-genesis-locally",level:3},{value:"Reset Data",id:"reset-data",level:2},{value:"Restart",id:"restart",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"upgrade-your-node",children:"Upgrade Your Node"})}),"\n",(0,r.jsxs)(n.p,{children:["This document describes the upgrade procedure of a ",(0,r.jsx)(n.code,{children:"gaiad"})," full-node to a new version."]}),"\n",(0,r.jsx)(n.h2,{id:"cosmovisor",children:"Cosmovisor"}),"\n",(0,r.jsxs)(n.p,{children:["The Cosmos SDK provides a convenient process manager that wraps around the ",(0,r.jsx)(n.code,{children:"gaiad"})," binary and can automatically swap in new binaries upon a successful governance upgrade proposal. Cosmovisor is entirely optional but recommended. More information can be found in ",(0,r.jsx)(n.a,{href:"https://docs.cosmos.network/v0.45/run-node/cosmovisor.html",children:"cosmos.network docs"})," and ",(0,r.jsx)(n.a,{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.47.11/tools/cosmovisor/README.md",children:"cosmos-sdk/cosmovisor/readme"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"setup",children:"Setup"}),"\n",(0,r.jsx)(n.p,{children:"To get started with Cosmovisor first download it"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor\n"})}),"\n",(0,r.jsx)(n.p,{children:"Set up the environment variables"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'echo "# Setup Cosmovisor" >> ~/.profile\necho "export DAEMON_NAME=gaiad" >> ~/.profile\necho "export DAEMON_HOME=$HOME/.gaia" >> ~/.profile\nsource ~/.profile\n'})}),"\n",(0,r.jsx)(n.p,{children:"Create the appropriate directories"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mkdir -p ~/.gaia/cosmovisor/upgrades\nmkdir -p ~/.gaia/cosmovisor/genesis/bin/\ncp $(which gaiad) ~/.gaia/cosmovisor/genesis/bin/\n\n# verify the setup. \n# It should return the same version as gaiad\ncosmovisor version\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Now ",(0,r.jsx)(n.code,{children:"gaiad"})," can start by running"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cosmovisor start\n"})}),"\n",(0,r.jsx)(n.h3,{id:"preparing-an-upgrade",children:"Preparing an Upgrade"}),"\n",(0,r.jsxs)(n.p,{children:["Cosmovisor will continually poll  the ",(0,r.jsx)(n.code,{children:"$DAEMON_HOME/data/upgrade-info.json"})," for new upgrade instructions. When an upgrade is ready, node operators can download the new binary and place it under ",(0,r.jsx)(n.code,{children:"$DAEMON_HOME/cosmovisor/upgrades/<name>/bin"})," where ",(0,r.jsx)(n.code,{children:"<name>"})," is the URI-encoded name of the upgrade as specified in the upgrade module plan."]}),"\n",(0,r.jsx)(n.p,{children:"It is possible to have Cosmovisor automatically download the new binary. To do this set the following environment variable."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"export DAEMON_ALLOW_DOWNLOAD_BINARIES=true\n"})}),"\n",(0,r.jsx)(n.h2,{id:"manual-software-upgrade",children:"Manual Software Upgrade"}),"\n",(0,r.jsxs)(n.p,{children:["First, stop your instance of ",(0,r.jsx)(n.code,{children:"gaiad"}),". Next, upgrade the software:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd gaia\ngit fetch --all && git checkout <new_version>\nmake install\n"})}),"\n",(0,r.jsx)(n.admonition,{type:"tip",children:(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"NOTE"}),": If you have issues at this step, please check that you have the latest stable version of GO installed."]})}),"\n",(0,r.jsxs)(n.p,{children:["See the ",(0,r.jsx)(n.a,{href:"https://github.com/cosmos/testnets",children:"testnet repo"})," for details on which version is needed for which public testnet, and the ",(0,r.jsx)(n.a,{href:"https://github.com/cosmos/Gaia/releases",children:"Gaia release page"})," for details on each release."]}),"\n",(0,r.jsx)(n.p,{children:"Your full node has been cleanly upgraded! If there are no breaking changes then you can simply restart the node by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gaiad start\n"})}),"\n",(0,r.jsx)(n.h2,{id:"upgrade-genesis-file",children:"Upgrade Genesis File"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If the new version you are upgrading to has breaking changes, you will have to restart your chain. If it is not breaking, you can skip to ",(0,r.jsx)(n.a,{href:"./upgrade-node#restart",children:"Restart"})]})}),"\n",(0,r.jsx)(n.p,{children:"To upgrade the genesis file, you can either fetch it from a trusted source or export it locally."}),"\n",(0,r.jsx)(n.h3,{id:"fetching-from-a-trusted-source",children:"Fetching from a Trusted Source"}),"\n",(0,r.jsxs)(n.p,{children:["If you are joining the mainnet, fetch the genesis from the ",(0,r.jsx)(n.a,{href:"https://github.com/cosmos/launch",children:"mainnet repo"}),". If you are joining a public testnet, fetch the genesis from the appropriate testnet in the ",(0,r.jsx)(n.a,{href:"https://github.com/cosmos/testnets",children:"testnet repo"}),". Otherwise, fetch it from your trusted source."]}),"\n",(0,r.jsxs)(n.p,{children:["Save the new genesis as ",(0,r.jsx)(n.code,{children:"new_genesis.json"}),". Then replace the old ",(0,r.jsx)(n.code,{children:"genesis.json"})," with ",(0,r.jsx)(n.code,{children:"new_genesis.json"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd $HOME/.gaia/config\ncp -f genesis.json new_genesis.json\nmv new_genesis.json genesis.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Then, go to the ",(0,r.jsx)(n.a,{href:"#reset-data",children:"reset data"})," section."]}),"\n",(0,r.jsx)(n.h3,{id:"exporting-state-to-a-new-genesis-locally",children:"Exporting State to a New Genesis Locally"}),"\n",(0,r.jsx)(n.p,{children:"If you were running a node in the previous version of the network and want to build your new genesis locally from a state of this previous network, use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cd $HOME/.gaia/config\ngaiad export --for-zero-height --height=<export-height> > new_genesis.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The command above take a state at a certain height ",(0,r.jsx)(n.code,{children:"<export-height>"})," and turns it into a new genesis file that can be used to start a new network."]}),"\n",(0,r.jsxs)(n.p,{children:["Then, replace the old ",(0,r.jsx)(n.code,{children:"genesis.json"})," with ",(0,r.jsx)(n.code,{children:"new_genesis.json"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"cp -f genesis.json new_genesis.json\nmv new_genesis.json genesis.json\n"})}),"\n",(0,r.jsxs)(n.p,{children:["At this point, you might want to run a script to update the exported genesis into a genesis that is compatible with your new version. For example, the attributes of the ",(0,r.jsx)(n.code,{children:"Account"})," type changed, a script should query encoded account from the account store, unmarshal them, update their type, re-marshal and re-store them. You can find an example of such script ",(0,r.jsx)(n.a,{href:"https://github.com/cosmos/cosmos-sdk/blob/02c6c9fafd58da88550ab4d7d494724a477c8a68/contrib/migrate/v0.33.x-to-v0.34.0.py",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"reset-data",children:"Reset Data"}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If the version ","<","new_version",">"," you are upgrading to is not breaking from the previous one, you should not reset the data. If it is not breaking, you can skip to ",(0,r.jsx)(n.a,{href:"#restart",children:"Restart"})]})}),"\n",(0,r.jsx)(n.admonition,{type:"warning",children:(0,r.jsxs)(n.p,{children:["If you are running a ",(0,r.jsx)(n.strong,{children:"validator node"})," on the mainnet, always be careful when doing ",(0,r.jsx)(n.code,{children:"gaiad unsafe-reset-all"}),". You should never use this command if you are not switching ",(0,r.jsx)(n.code,{children:"chain-id"}),"."]})}),"\n",(0,r.jsxs)(n.p,{children:["::: danger IMPORTANT\nMake sure that every node has a unique ",(0,r.jsx)(n.code,{children:"priv_validator.json"}),". Do not copy the ",(0,r.jsx)(n.code,{children:"priv_validator.json"})," from an old node to multiple new nodes. Running two nodes with the same ",(0,r.jsx)(n.code,{children:"priv_validator.json"})," will cause you to get slashed due to double signing!\n:::"]}),"\n",(0,r.jsxs)(n.p,{children:["First, remove the outdated files and reset the data. ",(0,r.jsx)(n.strong,{children:"If you are running a validator node, make sure you understand what you are doing before resetting"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gaiad unsafe-reset-all\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Your node is now in a pristine state while keeping the original ",(0,r.jsx)(n.code,{children:"priv_validator.json"})," and ",(0,r.jsx)(n.code,{children:"config.toml"}),". If you had any sentry nodes or full nodes setup before, your node will still try to connect to them, but may fail if they haven't also been upgraded."]}),"\n",(0,r.jsx)(n.h2,{id:"restart",children:"Restart"}),"\n",(0,r.jsx)(n.p,{children:"If there are no breaking changes then you can simply restart the node by running:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"gaiad start\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var o=s(6540);const r={},a=o.createContext(r);function t(e){const n=o.useContext(a);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(a.Provider,{value:n},e.children)}}}]);