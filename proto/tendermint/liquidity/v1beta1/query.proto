syntax = "proto3";
package tendermint.liquidity.v1beta1;

import "cosmos_proto/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "tendermint/liquidity/v1beta1/liquidity.proto";

option go_package = "github.com/cosmos/gaia/v9/x/liquidity/types";

// Query defines the gRPC query service for the liquidity module.
service Query {
  // Get existing liquidity pools.
  rpc LiquidityPools(QueryLiquidityPoolsRequest) returns (QueryLiquidityPoolsResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns a list of all liquidity pools with pagination result.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = There are no pools present.: key not found","details":[]}'
          }
        }
      }
    };
  }

  // Get specific liquidity pool.
  rpc LiquidityPool(QueryLiquidityPoolRequest) returns (QueryLiquidityPoolResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the liquidity pool that corresponds to the pool_id.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = liquidity pool 3 doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: pool_id, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get specific liquidity pool corresponding to the pool_coin_denom.
  rpc LiquidityPoolByPoolCoinDenom(QueryLiquidityPoolByPoolCoinDenomRequest) returns (QueryLiquidityPoolResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/pool_coin_denom/{pool_coin_denom}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "It returns the liquidity pool corresponding to the pool_coin_denom.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = the liquidity pool corresponding to the pool_coin_denom doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          examples: {
            key: "application/json"
            value: '{"code":5,"message":"rpc error: code = NotFound desc = liquidity pool with pool coin denom xx doesn\'t exist: key not found","details":[]}'
          }
        }
      }
    };
  }

  // Get specific liquidity pool corresponding to the reserve account.
  rpc LiquidityPoolByReserveAcc(QueryLiquidityPoolByReserveAccRequest) returns (QueryLiquidityPoolResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/reserve_acc/{reserve_acc}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "It returns the liquidity pool corresponding to the reserve account.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = the liquidity pool corresponding to the reserve account doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "404"
        value: {
          description: "Not Found"
          examples: {
            key: "application/json"
            value: '{"code":5,"message":"rpc error: code = NotFound desc = the reserve account address xx is not valid: key not found","details":[]}'
          }
        }
      }
    };
  }

  // Get the pool's current batch.
  rpc LiquidityPoolBatch(QueryLiquidityPoolBatchRequest) returns (QueryLiquidityPoolBatchResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the current batch of the pool that corresponds to the pool_id.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = liquidity pool 3 doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: pool_id, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get all swap messages in the pool's current batch.
  rpc PoolBatchSwapMsgs(QueryPoolBatchSwapMsgsRequest) returns (QueryPoolBatchSwapMsgsResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch/swaps";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns a list of all swap messages in the current batch of the pool with pagination result.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = liquidity pool 3 doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: pool_id, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get a specific swap message in the pool's current batch.
  rpc PoolBatchSwapMsg(QueryPoolBatchSwapMsgRequest) returns (QueryPoolBatchSwapMsgResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch/swaps/{msg_index}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the swap message that corresponds to the msg_index in the pool's current batch";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"root":{"code":2,"details":[],"message":"rpc error: code = NotFound desc = the msg given msg_index 1 doesn\'t exist or deleted: key not found"}}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: msg_index, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get all deposit messages in the pool's current batch.
  rpc PoolBatchDepositMsgs(QueryPoolBatchDepositMsgsRequest) returns (QueryPoolBatchDepositMsgsResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch/deposits";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns a list of all deposit messages in the current batch of the pool with pagination result.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = liquidity pool 3 doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: pool_id, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get a specific deposit message in the pool's current batch.
  rpc PoolBatchDepositMsg(QueryPoolBatchDepositMsgRequest) returns (QueryPoolBatchDepositMsgResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch/deposits/{msg_index}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the deposit message that corresponds to the msg_index in the pool's current batch.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"root":{"code":2,"details":[],"message":"rpc error: code = NotFound desc = the msg given msg_index 1 doesn\'t exist or deleted: key not found"}}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: msg_index, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get all withdraw messages in the pool's current batch.
  rpc PoolBatchWithdrawMsgs(QueryPoolBatchWithdrawMsgsRequest) returns (QueryPoolBatchWithdrawMsgsResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch/withdraws";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns a list of all withdraw messages in the current batch of the pool with pagination result.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"code":2,"message":"rpc error: code = NotFound desc = liquidity pool 3 doesn\'t exist: key not found","details":[]}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: pool_id, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get a specific withdraw message in the pool's current batch.
  rpc PoolBatchWithdrawMsg(QueryPoolBatchWithdrawMsgRequest) returns (QueryPoolBatchWithdrawMsgResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/pools/{pool_id}/batch/withdraws/{msg_index}";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns the withdraw message that corresponds to the msg_index in the pool's current batch.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/doc/client.md";
        description: "Find out more about the query and error codes";
      }
      responses: {
        key: "500"
        value: {
          description: "Internal Server Error"
          examples: {
            key: "application/json"
            value: '{"root":{"code":2,"details":[],"message":"rpc error: code = NotFound desc = the msg given msg_index 1 doesn\'t exist or deleted: key not found"}}'
          }
        }
      }
      responses: {
        key: "400"
        value: {
          description: "Bad Request"
          examples: {
            key: "application/json"
            value: '{"code":3,"message":"type mismatch, parameter: msg_index, error: strconv.ParseUint: parsing *: invalid syntax","details":[]}'
          }
        }
      }
    };
  }

  // Get all parameters of the liquidity module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/cosmos/liquidity/v1beta1/params";
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      description: "Returns all parameters of the liquidity module.";
      external_docs: {
        url: "https://github.com/tendermint/liquidity/blob/develop/x/liquidity/spec/08_params.md";
        description: "Find out more about the params";
      }
    };
  }
}

// the request type for the QueryLiquidityPool RPC method. requestable specified pool_id.
message QueryLiquidityPoolRequest {
  uint64 pool_id = 1;
}

// the response type for the QueryLiquidityPoolResponse RPC method. Returns the liquidity pool that corresponds to the requested pool_id.
message QueryLiquidityPoolResponse {
  Pool pool = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryLiquidityByPoolCoinDenomPool RPC method. Requestable specified pool_coin_denom.
message QueryLiquidityPoolByPoolCoinDenomRequest {
  string pool_coin_denom = 1;
}

// the request type for the QueryLiquidityByReserveAcc RPC method. Requestable specified reserve_acc.
message QueryLiquidityPoolByReserveAccRequest {
  string reserve_acc = 1;
}

// the request type for the QueryLiquidityPoolBatch RPC method. requestable including specified pool_id.
message QueryLiquidityPoolBatchRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
}

// the response type for the QueryLiquidityPoolBatchResponse RPC method. Returns the liquidity pool batch that corresponds to the requested pool_id.
message QueryLiquidityPoolBatchResponse {
  PoolBatch batch = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryLiquidityPools RPC method. Requestable including pagination offset, limit, key.
message QueryLiquidityPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// the response type for the QueryLiquidityPoolsResponse RPC method. This includes a list of all existing liquidity pools and paging results that contain next_key and total count.
message QueryLiquidityPoolsResponse {
  repeated Pool pools = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response. not working on this version.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryParamsRequest is request type for the QueryParams RPC method.
message QueryParamsRequest {}

// the response type for the QueryParamsResponse RPC method. This includes current parameter of the liquidity module.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryPoolBatchSwapMsgs RPC method. Requestable including specified pool_id and pagination offset, limit, key.
message QueryPoolBatchSwapMsgsRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// the request type for the QueryPoolBatchSwap RPC method. Requestable including specified pool_id and msg_index.
message QueryPoolBatchSwapMsgRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
  // target msg_index of the pool
  uint64 msg_index = 2;
}

// the response type for the QueryPoolBatchSwapMsgs RPC method. This includes list of all currently existing swap messages of the batch and paging results that contain next_key and total count.
message QueryPoolBatchSwapMsgsResponse {
  repeated SwapMsgState swaps = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response. not working on this version.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// the response type for the QueryPoolBatchSwapMsg RPC method. This includes a batch swap message of the batch.
message QueryPoolBatchSwapMsgResponse {
  SwapMsgState swap = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryPoolBatchDeposit RPC method. Requestable including specified pool_id and pagination offset, limit, key.
message QueryPoolBatchDepositMsgsRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// the request type for the QueryPoolBatchDeposit RPC method. requestable including specified pool_id and msg_index.
message QueryPoolBatchDepositMsgRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
  // target msg_index of the pool
  uint64 msg_index = 2;
}

// the response type for the QueryPoolBatchDeposit RPC method. This includes a list of all currently existing deposit messages of the batch and paging results that contain next_key and total count.
message QueryPoolBatchDepositMsgsResponse {
  repeated DepositMsgState deposits = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response. not working on this version.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// the response type for the QueryPoolBatchDepositMsg RPC method. This includes a batch swap message of the batch.
message QueryPoolBatchDepositMsgResponse {
  DepositMsgState deposit = 1 [(gogoproto.nullable) = false];
}

// the request type for the QueryPoolBatchWithdraw RPC method. Requestable including specified pool_id and pagination offset, limit, key.
message QueryPoolBatchWithdrawMsgsRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// the request type for the QueryPoolBatchWithdraw RPC method. requestable including specified pool_id and msg_index.
message QueryPoolBatchWithdrawMsgRequest {
  // id of the target pool for query
  uint64 pool_id = 1;
  // target msg_index of the pool
  uint64 msg_index = 2;
}

// the response type for the QueryPoolBatchWithdraw RPC method. This includes a list of all currently existing withdraw messages of the batch and paging results that contain next_key and total count.
message QueryPoolBatchWithdrawMsgsResponse {
  repeated WithdrawMsgState withdraws = 1 [(gogoproto.nullable) = false];
  // pagination defines the pagination in the response. Not supported on this version.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// the response type for the QueryPoolBatchWithdrawMsg RPC method. This includes a batch swap message of the batch.
message QueryPoolBatchWithdrawMsgResponse {
  WithdrawMsgState withdraw = 1 [(gogoproto.nullable) = false];
}
