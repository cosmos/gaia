{"searchDocs":[{"title":"Introduction","type":0,"sectionRef":"#","url":"/main","content":"","keywords":"","version":"Latest"},{"title":"The ATOM​","type":1,"pageTitle":"Introduction","url":"/main#the-atom","content":" Do you have ATOM tokens? With ATOM, you have the superpower to contribute to the security and governance of the Cosmos Hub. Delegate your ATOM to one or more of the validators on the Cosmos Hub blockchain to earn more ATOM through Proof-of-Stake. You can also vote with your ATOM to influence the future of the Cosmos Hub through on-chain governance proposals.  Learn more about being a delegator, learn about the security risks, and start participating with one of the following wallets.  ","version":"Latest","tagName":"h2"},{"title":"Cosmos Hub Wallets​","type":1,"pageTitle":"Introduction","url":"/main#cosmos-hub-wallets","content":" tip Do your own research and take precautions in regards to wallet security. Maintaining proper security practices is solely your responsibility when using third party wallets.  These community-maintained web and mobile wallets allow you to store &amp; transfer ATOM, delegate ATOM to validators, and vote on on-chain governance proposals. Note that we do not endorse any of the wallets, they are listed for your convenience.  Keplr - WebLedger - HardwareCosmostation - Android, iOSLeap Wallet - Android, iOS, WebAtomic Wallet - Android, Linux, macOS, WindowsCitadel.One - Android, iOSCobo - Android, iOSCrypto.com - Android, iOSHuobi Wallet - Android, iOSShapeShift - Android, iOS, WebimToken - Android, iOSMath Wallet - Android, iOS, WebRainbow Wallet - Android, iOSTrust Wallet Android, iOSKomodo Wallet  ","version":"Latest","tagName":"h2"},{"title":"Metamask Snaps​","type":1,"pageTitle":"Introduction","url":"/main#metamask-snaps","content":" Leap WalletMystic Lab  ","version":"Latest","tagName":"h2"},{"title":"Cosmos Hub Explorers​","type":1,"pageTitle":"Introduction","url":"/main#cosmos-hub-explorers","content":" These block explorers allow you to search, view and analyze Cosmos Hub data—like blocks, transactions, validators, etc.  MintscanNumiaATOMScanIOBScanPing.PubBronBroSmartStake  ","version":"Latest","tagName":"h2"},{"title":"Cosmos Hub CLI​","type":1,"pageTitle":"Introduction","url":"/main#cosmos-hub-cli","content":" gaiad is a command-line interface that lets you interact with the Cosmos Hub. gaiad is the only tool that supports 100% of the Cosmos Hub features, including accounts, transfers, delegation, and governance. Learn more about gaiad with the delegator's CLI guide.  ","version":"Latest","tagName":"h2"},{"title":"Running a full-node on the Cosmos Hub Mainnet​","type":1,"pageTitle":"Introduction","url":"/main#running-a-full-node-on-the-cosmos-hub-mainnet","content":" In order to run a full-node for the Cosmos Hub mainnet, you must first install gaiad. Then, follow the guide. If you are looking to run a validator node, follow the validator setup guide.  ","version":"Latest","tagName":"h2"},{"title":"Join the Community​","type":1,"pageTitle":"Introduction","url":"/main#join-the-community","content":" Have questions, comments, or new ideas? Participate in the Cosmos community through one of the following channels.  DiscordCosmos ForumCosmos on Reddit  To learn more about the Cosmos Hub and how it fits within the Cosmos Network, visit cosmos.network. ","version":"Latest","tagName":"h2"},{"title":"Architecture Decision Records (ADR)","type":0,"sectionRef":"#","url":"/main/architecture/adr","content":"","keywords":"","version":"Latest"},{"title":"Rationale​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#rationale","content":" ADRs are intended to be the primary mechanism for proposing new feature designs and new processes, for collecting community input on an issue, and for documenting the design decisions. An ADR should provide:  Context on the relevant goals and the current stateProposed changes to achieve the goalsSummary of pros and consDiscarded solution spaces and why they were discardedReferencesChangelog  Note the distinction between an ADR and a spec. The ADR provides the context, intuition, reasoning, and justification for a change in architecture, or for the architecture of something new. The spec is much more compressed and streamlined summary of everything as it stands today.  If recorded decisions turn out to be lacking, convene a discussion, record the new decisions here, and then modify the code to match.  ","version":"Latest","tagName":"h2"},{"title":"Creating new ADR​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#creating-new-adr","content":" Read about the PROCESS.  ","version":"Latest","tagName":"h2"},{"title":"Use RFC 2119 Keywords​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#use-rfc-2119-keywords","content":" When writing ADRs, follow the same best practices for writing RFCs. When writing RFCs, key words are used to signify the requirements in the specification. These words are often capitalized: &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL. They are to be interpreted as described in RFC 2119.  ","version":"Latest","tagName":"h3"},{"title":"ADR Table of Contents​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#adr-table-of-contents","content":" ","version":"Latest","tagName":"h2"},{"title":"Accepted​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#accepted","content":" n/a  ","version":"Latest","tagName":"h3"},{"title":"Proposed​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#proposed","content":" ADR 003: Interchain Accounts Controller Module  ","version":"Latest","tagName":"h3"},{"title":"Draft​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#draft","content":" n/a  ","version":"Latest","tagName":"h3"},{"title":"Rejected​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#rejected","content":" ADR 001: Interchain Accounts  ","version":"Latest","tagName":"h3"},{"title":"Deprecated​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture/adr#deprecated","content":" ADR 002: Globalfee Module ","version":"Latest","tagName":"h3"},{"title":"ADR 001: Interchain Accounts","type":0,"sectionRef":"#","url":"/main/architecture/adr/adr-001-interchain-accounts","content":"","keywords":"","version":"Latest"},{"title":"Changelog​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#changelog","content":" 2022-02-04: added content2022-01-19: init2023-06-28: mark as rejected  ","version":"Latest","tagName":"h2"},{"title":"Status​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#status","content":" REJECTED Not Implemented  Reason: The IBC team decided to integrate this functionality directly into their codebase and maintain it, because multiple users require it.  ","version":"Latest","tagName":"h2"},{"title":"Abstract​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#abstract","content":" This is the Core Interchain Accounts Module. It allows the Cosmos Hub to act as a host chain with interchain accounts that are controlled by external IBC connected &quot;Controller&quot; blockchains. Candidate chains include Umee, Quicksilver, Sommelier. It is also a necessary component for a Authentication Module that allows the Cosmos Hub to act as a Controller chain as well. This will be recorded in a separate ADR.  ","version":"Latest","tagName":"h2"},{"title":"Rationale​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#rationale","content":" This allows the Hub to participate in advanced cross-chain defi operations, like Liquid Staking and various protocol controlled value applications.  ","version":"Latest","tagName":"h2"},{"title":"Desired Outcome​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#desired-outcome","content":" The hub can be used trustlessly as a host chain in the configuration of Interchain Accounts.  ","version":"Latest","tagName":"h2"},{"title":"Consequences​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#consequences","content":" There has been preliminary work done to understand if this increases any security feature of the Cosmos Hub. One thought was that this capability is similar to contract to contract interactions which are possible on virtual machine blockchains like EVM chains. Those interactions introduced a new attack vector, called a re-entrancy bug, which was the culprit of &quot;The DAO hack on Ethereum&quot;. We believe there is no risk of these kinds of attacks with Interchain Accounts because they require the interactions to be atomic and Interchain Accounts are asynchronous.  Backwards Compatibility​  This is the first of its kind.  Forward Compatibility​  There are future releases of Interchain Accounts which are expected to be backwards compatible.  ","version":"Latest","tagName":"h2"},{"title":"Technical Specification​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#technical-specification","content":" ICS-27 Spec  ","version":"Latest","tagName":"h2"},{"title":"Development​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#development","content":" Integration requirements Development has occurred in IBC-go and progress tracked on the project board there. Testing (Simulations, Core Team Testing, Partner Testing) Simulations and Core Team tested this module Audits (Internal Dev review, Third-party review, Bug Bounty) An internal audit, an audit from Informal Systems, and an audit from Trail of Bits all took place with fixes made to all findings. Networks (Testnets, Productionnets, Mainnets) Testnets  ","version":"Latest","tagName":"h2"},{"title":"Governance [optional]​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#governance-optional","content":" Needs Signaling ProposalCore Community Governance N/A Steering Community N/A. Possibly Aditya Srinpal, Sean King, Bez? Timelines &amp; Roadmap Expected to be released as part of IBC 3.0 in Feb 2022 (currently in beta release)  ","version":"Latest","tagName":"h2"},{"title":"Project Integrations [optional]​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#project-integrations-optional","content":" Gaia Integrations PR Integration Partner IBC Team  Downstream User Impact Report​  (Needs to be created)  Upstream Partner Impact Report​  (Needs to be created)  Inter-module Dependence Report​  (Needs to be created)  ","version":"Latest","tagName":"h2"},{"title":"Support​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#support","content":" Documentation  ","version":"Latest","tagName":"h2"},{"title":"Additional Research & References​","type":1,"pageTitle":"ADR 001: Interchain Accounts","url":"/main/architecture/adr/adr-001-interchain-accounts#additional-research--references","content":" Why Interchain Accounts Change Everything for Cosmos InteroperabilityInterchain Account Auth Module Demo Repo ","version":"Latest","tagName":"h2"},{"title":"Architecture Decision Records (ADR)","type":0,"sectionRef":"#","url":"/main/architecture","content":"","keywords":"","version":"Latest"},{"title":"Rationale​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#rationale","content":" ADRs are intended to be the primary mechanism for proposing new feature designs and new processes, for collecting community input on an issue, and for documenting the design decisions. An ADR should provide:  Context on the relevant goals and the current stateProposed changes to achieve the goalsSummary of pros and consDiscarded solution spaces and why they were discardedReferencesChangelog  Note the distinction between an ADR and a spec. The ADR provides the context, intuition, reasoning, and justification for a change in architecture, or for the architecture of something new. The spec is much more compressed and streamlined summary of everything as it stands today.  If recorded decisions turn out to be lacking, convene a discussion, record the new decisions here, and then modify the code to match.  ","version":"Latest","tagName":"h2"},{"title":"Creating new ADR​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#creating-new-adr","content":" Read about the PROCESS.  ","version":"Latest","tagName":"h2"},{"title":"Use RFC 2119 Keywords​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#use-rfc-2119-keywords","content":" When writing ADRs, follow the same best practices for writing RFCs. When writing RFCs, key words are used to signify the requirements in the specification. These words are often capitalized: &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;, &quot;MAY&quot;, and &quot;OPTIONAL. They are to be interpreted as described in RFC 2119.  ","version":"Latest","tagName":"h3"},{"title":"ADR Table of Contents​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#adr-table-of-contents","content":" ","version":"Latest","tagName":"h2"},{"title":"Accepted​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#accepted","content":" n/a  ","version":"Latest","tagName":"h3"},{"title":"Proposed​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#proposed","content":" n/a  ","version":"Latest","tagName":"h3"},{"title":"Draft​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#draft","content":" n/a  ","version":"Latest","tagName":"h3"},{"title":"Rejected​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#rejected","content":" ADR 001: Interchain Accounts  ","version":"Latest","tagName":"h3"},{"title":"Deprecated​","type":1,"pageTitle":"Architecture Decision Records (ADR)","url":"/main/architecture#deprecated","content":" ADR 002: Globalfee Module ","version":"Latest","tagName":"h3"},{"title":"ADR 003: Interchain Accounts Controller Module","type":0,"sectionRef":"#","url":"/main/architecture/adr/adr-003-ica-controller","content":"","keywords":"","version":"Latest"},{"title":"Changelog​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#changelog","content":" 2024-03-08: Initial Draft  ","version":"Latest","tagName":"h2"},{"title":"Status​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#status","content":" Proposed  ","version":"Latest","tagName":"h2"},{"title":"Abstract​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#abstract","content":" The Interchain Accounts Controller IBC module allows users of one chain to create and control accounts on other chains. The Hub currently doesn't have ICA Controller module enabled, so it is not possible to create accounts on other chains from the Hub chain.  ","version":"Latest","tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#context","content":" Enabling the ICA Controller module on the Hub would support various use cases. One such case could be the provider-based governance that would allow the ATOM stakers to participate in a governance on consumer chains.  ","version":"Latest","tagName":"h2"},{"title":"Decision​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#decision","content":" The ICA Controller module will be included in the application, so the Hub will have both ICA Host and Controller modules. The implementation will use the Controller module's built-in authentication mechanism, since we don't have a need for custom authentication logic. According to this, users will directly use MsgRegisterInterchainAccount and MsgSendTx messages defined by the Controller module. The possibility provided by the Controller module to define underlying application to have custom processing of IBC messages exchanged by the Controller module (e.g. OnChanOpenInit, OnAcknowledgementPacket, etc.) will not be used, since there is currently no need for this.  // ICA Controller keeper appKeepers.ICAControllerKeeper = icacontrollerkeeper.NewKeeper( appCodec, appKeepers.keys[icacontrollertypes.StoreKey], appKeepers.GetSubspace(icacontrollertypes.SubModuleName), appKeepers.IBCKeeper.ChannelKeeper, // ICS4Wrapper appKeepers.IBCKeeper.ChannelKeeper, &amp;appKeepers.IBCKeeper.PortKeeper, appKeepers.ScopedICAControllerKeeper, bApp.MsgServiceRouter(), ) // Create ICA module appKeepers.ICAModule = ica.NewAppModule(&amp;appKeepers.ICAControllerKeeper, &amp;appKeepers.ICAHostKeeper) // Create Interchain Accounts Controller Stack var icaControllerStack porttypes.IBCModule = icacontroller.NewIBCMiddleware(nil, appKeepers.ICAControllerKeeper) // Add Interchain Accounts Controller IBC route ibcRouter.AddRoute(icacontrollertypes.SubModuleName, icaControllerStack)   ","version":"Latest","tagName":"h2"},{"title":"Consequences​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#consequences","content":" ","version":"Latest","tagName":"h2"},{"title":"Positive​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#positive","content":" Users of the Hub will have a possibility to create and utilize Interchain Accounts on other IBC connected chains.  ","version":"Latest","tagName":"h3"},{"title":"Negative​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#negative","content":" ","version":"Latest","tagName":"h3"},{"title":"Neutral​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#neutral","content":" Since we don't need to implement a custom authentication mechanism, we can rely on the one defined by the Controller module itself, implemented through the MsgRegisterInterchainAccount and MsgSendTx messages.  ","version":"Latest","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"ADR 003: Interchain Accounts Controller Module","url":"/main/architecture/adr/adr-003-ica-controller#references","content":" https://github.com/cosmos/gaia/issues/2869 ","version":"Latest","tagName":"h2"},{"title":"ADR Creation Process","type":0,"sectionRef":"#","url":"/main/architecture/adr/PROCESS","content":"","keywords":"","version":"Latest"},{"title":"ADR life cycle​","type":1,"pageTitle":"ADR Creation Process","url":"/main/architecture/adr/PROCESS#adr-life-cycle","content":" ADR creation is an iterative process. Instead of trying to solve all decisions in a single ADR pull request, we MUST firstly understand the problem and collect feedback through a GitHub Issue.  Every proposal SHOULD start with a new GitHub Issue or be a result of existing Issues. The Issue should contain just a brief proposal summary. Once the motivation is validated, a GitHub Pull Request (PR) is created with a new document based on the adr-template.md. An ADR doesn't have to arrive to main with an accepted status in a single PR. If the motivation is clear and the solution is sound, we SHOULD be able to merge it and keep a proposed status. It's preferable to have an iterative approach rather than long, not merged Pull Requests. If a proposed ADR is merged, then it should clearly document outstanding issues either in ADR document notes or in a GitHub Issue. The PR SHOULD always be merged. In the case of a faulty ADR, we still prefer to merge it with a rejected status. The only time the ADR SHOULD NOT be merged is if the author abandons it. Merged ADRs SHOULD NOT be deleted.  ","version":"Latest","tagName":"h2"},{"title":"ADR status​","type":1,"pageTitle":"ADR Creation Process","url":"/main/architecture/adr/PROCESS#adr-status","content":" Status has two components:  {CONSENSUS STATUS} {IMPLEMENTATION STATUS}   IMPLEMENTATION STATUS is either Implemented or Not Implemented.  Consensus Status​  flowchart TD A[DRAFT] --&gt; B[PROPOSED] B --&gt; C[LAST CALL YYYY-MM-DD] B --&gt; D[ABANDONED] C --&gt; E[ACCEPTED or REJECTED] E --&gt; F[SUPERSEDED by ADR-xxx]   DRAFT: [optional] an ADR which is work in progress, not being ready for a general review. This is to present an early work and get an early feedback in a Draft Pull Request form.PROPOSED: an ADR covering a full solution architecture and still in the review - project stakeholders haven't reached an agreement yet.LAST CALL &lt;date for the last call&gt;: [optional] clear notify that we are close to accept updates. Changing a status to LAST CALL means that social consensus (of Cosmos SDK maintainers) has been reached and we still want to give it a time to let the community react or analyze.ACCEPTED: ADR which will represent a currently implemented or to be implemented architecture design.REJECTED: ADR can go from PROPOSED or ACCEPTED to rejected if the consensus among project stakeholders will decide so.SUPERSEEDED by ADR-xxx: ADR which has been superseded by a new ADR.ABANDONED: the ADR is no longer pursued by the original authors.  ","version":"Latest","tagName":"h3"},{"title":"Language used in ADR​","type":1,"pageTitle":"ADR Creation Process","url":"/main/architecture/adr/PROCESS#language-used-in-adr","content":" The context/background should be written in the present tense.Avoid using a first, personal form. ","version":"Latest","tagName":"h2"},{"title":"ADR Creation Process","type":0,"sectionRef":"#","url":"/main/architecture/PROCESS","content":"","keywords":"","version":"Latest"},{"title":"ADR life cycle​","type":1,"pageTitle":"ADR Creation Process","url":"/main/architecture/PROCESS#adr-life-cycle","content":" ADR creation is an iterative process. Instead of trying to solve all decisions in a single ADR pull request, we MUST firstly understand the problem and collect feedback through a GitHub Issue.  Every proposal SHOULD start with a new GitHub Issue or be a result of existing Issues. The Issue should contain just a brief proposal summary. Once the motivation is validated, a GitHub Pull Request (PR) is created with a new document based on the adr-template.md. An ADR doesn't have to arrive to main with an accepted status in a single PR. If the motivation is clear and the solution is sound, we SHOULD be able to merge it and keep a proposed status. It's preferable to have an iterative approach rather than long, not merged Pull Requests. If a proposed ADR is merged, then it should clearly document outstanding issues either in ADR document notes or in a GitHub Issue. The PR SHOULD always be merged. In the case of a faulty ADR, we still prefer to merge it with a rejected status. The only time the ADR SHOULD NOT be merged is if the author abandons it. Merged ADRs SHOULD NOT be deleted.  ","version":"Latest","tagName":"h2"},{"title":"ADR status​","type":1,"pageTitle":"ADR Creation Process","url":"/main/architecture/PROCESS#adr-status","content":" Status has two components:  {CONSENSUS STATUS} {IMPLEMENTATION STATUS}   IMPLEMENTATION STATUS is either Implemented or Not Implemented.  Consensus Status​  flowchart TD A[DRAFT] --&gt; B[PROPOSED] B --&gt; C[LAST CALL YYYY-MM-DD] B --&gt; D[ABANDONED] C --&gt; E[ACCEPTED or REJECTED] E --&gt; F[SUPERSEDED by ADR-xxx]   DRAFT: [optional] an ADR which is work in progress, not being ready for a general review. This is to present an early work and get an early feedback in a Draft Pull Request form.PROPOSED: an ADR covering a full solution architecture and still in the review - project stakeholders haven't reached an agreement yet.LAST CALL &lt;date for the last call&gt;: [optional] clear notify that we are close to accept updates. Changing a status to LAST CALL means that social consensus (of Cosmos SDK maintainers) has been reached and we still want to give it a time to let the community react or analyze.ACCEPTED: ADR which will represent a currently implemented or to be implemented architecture design.REJECTED: ADR can go from PROPOSED or ACCEPTED to rejected if the consensus among project stakeholders will decide so.SUPERSEEDED by ADR-xxx: ADR which has been superseded by a new ADR.ABANDONED: the ADR is no longer pursued by the original authors.  ","version":"Latest","tagName":"h3"},{"title":"Language used in ADR​","type":1,"pageTitle":"ADR Creation Process","url":"/main/architecture/PROCESS#language-used-in-adr","content":" The context/background should be written in the present tense.Avoid using a first, personal form. ","version":"Latest","tagName":"h2"},{"title":"ADR {ADR-NUMBER}: {TITLE}","type":0,"sectionRef":"#","url":"/main/architecture/templates/adr-template","content":"","keywords":"","version":"Latest"},{"title":"Changelog​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#changelog","content":" {date}: {changelog}  ","version":"Latest","tagName":"h2"},{"title":"Status​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#status","content":" {DRAFT | PROPOSED} Not Implemented  Please have a look at the PROCESS page. Use DRAFT if the ADR is in a draft stage (draft PR) or PROPOSED if it's in review.  ","version":"Latest","tagName":"h2"},{"title":"Abstract​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#abstract","content":" &quot;If you can't explain it simply, you don't understand it well enough.&quot; Provide a simplified and layman-accessible explanation of the ADR. A short (~200 word) description of the issue being addressed.  ","version":"Latest","tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#context","content":" This section contains all the context one needs to understand the current state, and why there is a problem. It should be as succinct as possible and introduce the high level idea behind the solution. The language in this section is value-neutral. It is simply describing facts.  ","version":"Latest","tagName":"h2"},{"title":"Decision​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#decision","content":" This section explains all of the details of the proposed solution, including implementation details. It should also describe affects / corollary items that may need to be changed as a part of this. If the proposed change will be large, please also indicate a way to do the change to maximize ease of review. (e.g. the optimal split of things to do between separate PR's)  ","version":"Latest","tagName":"h2"},{"title":"Consequences​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#consequences","content":" This section describes the consequences, after applying the decision. All consequences should be summarized here, not just the &quot;positive&quot; ones.  ","version":"Latest","tagName":"h2"},{"title":"Positive​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#positive","content":" {positive consequences}  ","version":"Latest","tagName":"h3"},{"title":"Negative​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#negative","content":" {negative consequences}  ","version":"Latest","tagName":"h3"},{"title":"Neutral​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#neutral","content":" {neutral consequences}  ","version":"Latest","tagName":"h3"},{"title":"References​","type":1,"pageTitle":"ADR {ADR-NUMBER}: {TITLE}","url":"/main/architecture/templates/adr-template#references","content":" Are there any relevant PR comments, issues that led up to this, or articles referenced for why we made the given design choice? If so link them here!  {reference link} ","version":"Latest","tagName":"h2"},{"title":"Delegators","type":0,"sectionRef":"#","url":"/main/delegators","content":"Delegators This folder contains documentation relevant to delegators of the Cosmos Hub and other gaia blockchains. Delegator CLI GuideDelegators FAQDelegator Security Notice","keywords":"","version":"Latest"},{"title":"ADR 002: Globalfee Module [DEPRECATED]","type":0,"sectionRef":"#","url":"/main/architecture/adr/adr-002-globalfee","content":"","keywords":"","version":"Latest"},{"title":"Changelog​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#changelog","content":" 2023-06-12: Initial Draft2024-06-06: Change status to deprecated  ","version":"Latest","tagName":"h2"},{"title":"Status​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#status","content":" Deprecated  ","version":"Latest","tagName":"h2"},{"title":"Context​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#context","content":" The globalfee module was created to manage a parameter called MinimumGasPricesParam, which sets a network-wide minimum fee requirement. The intention was to stop random denominations from entering fee collections and to reduce the time validators take to check a long list of transaction fees. To address scenarios where no fee payment is required but the denominations for volunteered paid fees are still restricted, the zero coins was introduced to serve as a means of limiting the denoms. Nevertheless, the initial version of the globalfee module had some issues:  In the globalfee module, several Cosmos SDK coins methods were redefined because of the allowance of zero-value coins in the MinimumGasPricesParam. The MinimumGasPricesParam is of sdk.DecCoins type. In the Cosmos SDK, sdk.DecCoins are sanitized to remove zero-value coins. As a result, several methods from sdk.Coins were redefined in the Gaia fee antehandler. BypassMinFeeMsgTypes exists in app.toml, which means each node can define its own value. Thus, it's not clear whether a transaction containing bypass-messages will be exempted from paying a fee. The fee check logic is only executed in CheckTx. This could enable malicious validators to change the fee check code and propose transactions that do not meet the fee requirement.  ","version":"Latest","tagName":"h2"},{"title":"Decision​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#decision","content":" To fix these problems, the following changes are added to the globalfee module:  ZeroCoins in MinimumGasPricesParam: Refactor the fee check logics, in order to use the Cosmos SDK coins' methods instead of the redefined methods.Bypass Message Types: BypassMinFeeMsgTypes is refactored to be a param of the globalfee module, in order to make the bypass messages deterministic.Check Fees in DeliverTx: The fee check is factored to executed in both DeliverTx and CheckTx. This is to prevent malicious validators from changing the fee check logic and allowing any transactions to pass fee check. As a consequence, MinimumGasPricesParam is introduced as a globalfee param.  ","version":"Latest","tagName":"h2"},{"title":"ZeroCoins in MinimumGasPricesParam​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#zerocoins-in-minimumgaspricesparam","content":" Coins Split​  CombinedFeeRequirement refers to the fee requirement that takes into account both globalFees (MinimumGasPricesParam in the globalfee module) and localFees (minimum-gas-prices in app.toml). This requirement is calculated as the maximum value between globalFees and localFees for denomination exists globalFees. The allowance of zero coins in the MinimumGasPricesParam within the globalfee module implies that CombinedFeeRequirement(globalFees, localFees) also permits zero coins. Therefore, the CombinedFeeRequirement doesn't meet the requirements of certain sdk.Coins methods. For instance, the DenomsSubsetOf method requires coins that do not contain zero coins.  To address this issue, the CombinedFeeRequirement and feeCoins are split as shown in the chart below.  --- title: Fee Requirements and Fee Splits --- flowchart TD subgraph feeReq A[CombinedFeeRequirement]--&gt;B[/Split zero/nonzero coins/] B--&gt;|zero coins| C[zeroCoinFeesDenomReq]; B--&gt;|nonzero coins| D[nonzeroCoinFeesDenomReq]; end subgraph feeCoin E[feeCoins]--&gt;F[/Split by the denoms in zero/nonzero CoinFeesDenomReq/] F--&gt;|denoms in zeroCoinFeesDenomReq set| G[feeCoinsZeroDenom] F--&gt;|denoms in nonzeroCoinFeesDenomReq set| H[feeCoinsNonZeroDenom] end   The CombinedFeeRequirement is split into zero and non-zero coins, forming nonZeroCoinFeesReq and zeroCoinFeesDenomReq. Similarly, the paid fees (feeCoins) are split into feeCoinsNonZeroDenom and feeCoinsZeroDenom, based on the denominations of nonZeroCoinFeesReq and zeroCoinFeesDenomReq as shown in the following code snippet.  \tnonZeroCoinFeesReq, zeroCoinFeesDenomReq := getNonZeroFees(feeRequired) // feeCoinsNonZeroDenom contains non-zero denominations from the feeRequired // feeCoinsNonZeroDenom is used to check if the fees meets the requirement imposed by nonZeroCoinFeesReq // when feeCoins does not contain zero coins' denoms in feeRequired feeCoinsNonZeroDenom, feeCoinsZeroDenom := splitCoinsByDenoms(feeCoins, zeroCoinFeesDenomReq)   Fee Checks​  The Workflow of feeCheck is shown below:  --- title: Fee Check --- flowchart TD A[feeCoinsNonZeroDenom]--&gt;B[/DenomsSubsetOf_nonZeroCoinFeesReq/]; B--&gt;|yes|C[is_bypass_msg]; B--&gt;|no|D((reject)); C--&gt;|yes|pass1((pass)); C--&gt;|no|D[/contain_zeroCoinFeesDenomReq_denom/]; D--&gt;|yes|pass2((pass)); D--&gt;|no|E[/feeCoinsZeroDenom_nonEmpty/]; E--&gt;|yes|pass3((pass)); E--&gt;|no|F[/IsAnyGTE_nonZeroCoinFeesDenomReq/]; F--&gt;|yes|pass4((pass)); F--&gt;|no|reject2((reject));   The split enable checking feeCoinsNonZeroDenom against nonZeroCoinFeesReq, and feeCoinsZeroDenom againstzeroCoinFeesDenomReq (as shown in the following code snippet). In the check of feeCoinsNonZeroDenom against nonZeroCoinFeesReq, the Cosmos SDK coins' methods can be used since zero coins are removed from the nonZeroCoinFeesReq, while in the check feeCoinsZeroDenom against zeroCoinFeesDenomReq, only denoms need to be checked.  Checking feeCoinsNonZeroDenom against nonZeroCoinFeesReq:  \tif !feeCoinsNonZeroDenom.IsAnyGTE(nonZeroCoinFeesReq) { return ctx, sdkerrors.Wrapf(sdkerrors.ErrInsufficientFee, &quot;insufficient fees; got: %s required: %s&quot;, feeCoins.String(), feeRequired.String()) }   Here is an example of how the coins split and checked in fee antehandler:  assumption:  globalfee=[1photon, 0uatom, 1stake] and local min-gas-prices=[0.5stake]  fee requirement:  combinedFeeRequirement=[1photon, 0uatom, 1stake]  split fee requirement:  the combinedFeeRequirement into nonZeroCoinFeesReq=[0uatom], and nonZeroCoinFeesReq=[1photon, 1stake]  split the paid fees:  if paidFee=[1uatom, 0.5photon], the splitCoinsByDenoms splits the paidFee into feeCoinsZeroDenom=[1uatom] (the same denom as zero coins in combinedFeeRequirement), and feeCoinsNonZeroDenom=[0.5stake]then feeCoinsZeroDenom=[1uatom] is checked by nonZeroCoinFeesReq=[1photon, 1stake].  Please note that feeCoins does not contain zero coins. The fee coins are split according to the denoms in zeroCoinFeesDenomReq or nonZeroCoinFeesDenomReq. If feeCoins contains coins not in both zeroCoinFeesDenomReq and nonZeroCoinFeesDenomReq, the transaction should be rejected. On the contrary, if feeCoins' denoms are in either zeroCoinFeesDenomReq or nonZeroCoinFeesDenomReq, and len(zeroCoinFeesDenomReq)!=0, the transaction can directly pass, otherwise, the fee amount need to be checked.  ","version":"Latest","tagName":"h3"},{"title":"Bypass Message Types​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#bypass-message-types","content":" BypassMinFeeMsgTypes was a setup in config/app.toml before the refactor. BypassMinFeeMsgTypes is refactored to be a param of the globalfee module to get a network level agreement. Correspondingly,MaxTotalBypassMinFeeMsgGasUsage is also introduced as a globalfee param.  ","version":"Latest","tagName":"h3"},{"title":"Fee Checks in DeliverTx​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#fee-checks-in-delivertx","content":" Implementing fee checks within the DeliverTx function introduces a few requirements:  Deterministic Minimum Fee Requirement: For the DeliverTx process, it is essential to have a deterministic minimum fee requirement. In CheckTx, fee is checked by the CombinedFeeRequirement(globalFees, localFees), which considers both minimum-gas-prices from config/app.toml and MinimumGasPricesParam from the globalfee Params (For more details, see globalfee). CombinedFeeRequirement contains non-deterministic part: minimum-gas-prices from app.toml. Therefore, CombinedFeeRequirement cannot be used in DeliverTx. In DeliverTx, only MinimumGasPricesParam in globalfee Params is used for fee verification. The code implementation is shown below.  func (mfd FeeDecorator) GetTxFeeRequired(ctx sdk.Context, tx sdk.FeeTx) (sdk.Coins, error) { // Get required global fee min gas prices // Note that it should never be empty since its default value is set to coin={&quot;StakingBondDenom&quot;, 0} globalFees, err := mfd.GetGlobalFee(ctx, tx) if err != nil { return sdk.Coins{}, err } // In DeliverTx, the global fee min gas prices are the only tx fee requirements. if !ctx.IsCheckTx() { return globalFees, nil } // In CheckTx mode, the local and global fee min gas prices are combined // to form the tx fee requirements // Get local minimum-gas-prices localFees := GetMinGasPrice(ctx, int64(tx.GetGas())) // Return combined fee requirements return CombinedFeeRequirement(globalFees, localFees) }   Deterministic Bypass Parameters: The decision of whether a message can bypass the minimum fee has to be deterministic as well. To ensure this, BypassMinFeeMsgTypes and MaxTotalBypassMinFeeMsgGasUsage parameters are moved to a persistent store. Module Initialization Order: The genutils module must be initialized before the globalfee module. This is due to the DeliverGenTxs in the genutils module, is called during initGenesis. This function executes DeliverTx, which subsequently calls the AnteHandle in FeeDecorator, triggering the fee check in DeliverTx. To prevent the DeliverGenTxs go through a fee check, the initialization of the globalfee module should occur after the genutils module. This sequencing ensures that all necessary components are in place when the fee check occurs. See Gaia Issue #2489 for more context.  ","version":"Latest","tagName":"h3"},{"title":"Consequences​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#consequences","content":" ","version":"Latest","tagName":"h2"},{"title":"Positive​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#positive","content":" This refactor results in code that is easier to maintain. It prevents malicious validators from escaping fee checks and make the bypass messages work at network level.  ","version":"Latest","tagName":"h3"},{"title":"Negative​","type":1,"pageTitle":"ADR 002: Globalfee Module [DEPRECATED]","url":"/main/architecture/adr/adr-002-globalfee#negative","content":" The introduction of FeeDecorator has replaced the usage of MempoolFeeDecorator in the Cosmos SDK. Currently, if both FeeDecorator and MempoolFeeDecorator are added to the AnteDecorator chain, it will result in redundant checks. However, there's potential for FeeDecorator and MempoolFeeDecorator to become incompatible in the future, depending on updates to the Cosmos SDK. ","version":"Latest","tagName":"h3"},{"title":"Delegator FAQ","type":0,"sectionRef":"#","url":"/main/delegators/delegator-faq","content":"","keywords":"","version":"Latest"},{"title":"What is a delegator?​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#what-is-a-delegator","content":" People who cannot or do not want to operate validator nodes can still participate in the staking process as delegators. Indeed, validators are not chosen based on their self-delegated stake but based on their total stake, which is the sum of their self-delegated stake and of the stake that is delegated to them. This is an important property, as it makes delegators a safeguard against validators that exhibit bad behavior. If a validator misbehaves, their delegators will move their Atoms away from them, thereby reducing their stake. Eventually, if a validator's stake falls under the top 180 addresses with highest stake, they will exit the validator set.  Delegators share the revenue of their validators, but they also share the risks. In terms of revenue, validators and delegators differ in that validators can apply a commission on the revenue that goes to their delegator before it is distributed. This commission is known to delegators beforehand and can only change according to predefined constraints (see section below). In terms of risk, delegators' Atoms can be slashed if their validator misbehaves. For more, see Risks section.  To become delegators, Atom holders need to send a &quot;Delegate transaction&quot; where they specify how many Atoms they want to bond and to which validator. A list of validator candidates will be displayed in Cosmos Hub explorers. Later, if a delegator wants to unbond part or all of their stake, they need to send an &quot;Unbond transaction&quot;. From there, the delegator will have to wait 3 weeks to retrieve their Atoms. Delegators can also send a &quot;Rebond Transaction&quot; to switch from one validator to another, without having to go through the 3 weeks waiting period.  For a practical guide on how to become a delegator, click here.  ","version":"Latest","tagName":"h2"},{"title":"Choosing a validator​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#choosing-a-validator","content":" In order to choose their validators, delegators have access to a range of information directly in Mintscan or other Cosmos block explorers.  Validator's moniker: Name of the validator candidate.Validator's description: Description provided by the validator operator.Validator's website: Link to the validator's website.Initial commission rate: The commission rate on revenue charged to any delegator by the validator (see below for more detail).Commission max change rate: The maximum daily increase of the validator's commission. This parameter cannot be changed by the validator operator.Maximum commission: The maximum commission rate this validator candidate can charge. This parameter cannot be changed by the validator operator.Validator self-bond amount: A validator with a high amount of self-delegated Atoms has more skin-in-the-game than a validator with a low amount.  ","version":"Latest","tagName":"h2"},{"title":"Directives of delegators​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#directives-of-delegators","content":" Being a delegator is not a passive task. Here are the main directives of a delegator:  Perform careful due diligence on validators before delegating. If a validator misbehaves, part of their total stake, which includes the stake of their delegators, can be slashed. Delegators should therefore carefully select validators they think will behave correctly.Actively monitor their validator after having delegated. Delegators should ensure that the validators they delegate to behave correctly, meaning that they have good uptime, do not double sign or get compromised, and participate in governance. They should also monitor the commission rate that is applied. If a delegator is not satisfied with its validator, they can unbond or switch to another validator (Note: Delegators do not have to wait for the unbonding period to switch validators. Rebonding takes effect immediately).Participate in governance. Delegators can and are expected to actively participate in governance. A delegator's voting power is proportional to the size of their bonded stake. If a delegator does not vote, they will inherit the vote of their validator(s). If they do vote, they override the vote of their validator(s). Delegators therefore act as a counterbalance to their validators.  ","version":"Latest","tagName":"h2"},{"title":"Revenue​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#revenue","content":" Validators and delegators earn revenue in exchange for their services. This revenue is given in three forms:  Block provisions (Atoms): They are paid in newly created Atoms. Block provisions exist to incentivize Atom holders to stake. The yearly inflation rate is calculated to target 2/3 bonded stake. If the total bonded stake in the network is less than 2/3 of the total Atom supply, inflation increases until it reaches 20%. If the total bonded stake is more than 2/3 of the Atom supply, inflation decreases until it reaches 7%. This means that if total bonded stake stays less than 2/3 of the total Atom supply for a prolonged period of time, unbonded Atom holders can expect their Atom value to deflate by 20% (compounded) per year.Transaction fees (various tokens): Each transfer on the Cosmos Hub comes with transactions fees. These fees can be paid in any currency that is whitelisted by the Hub's governance. Fees are distributed to bonded Atom holders in proportion to their stake. The first whitelisted token at launch is the ATOM.  ","version":"Latest","tagName":"h2"},{"title":"Validator Commission​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#validator-commission","content":" Each validator receives revenue based on their total stake. Before this revenue is distributed to delegators, the validator can apply a commission. In other words, delegators have to pay a commission to their validators on the revenue they earn. Let us look at a concrete example:  We consider a validator whose stake (i.e. self-delegated stake + delegated stake) is 10% of the total stake of all validators. This validator has 20% self-delegated stake and applies a commission of 10%. Now let us consider a block with the following revenue:  990 Atoms in block provisions10 Atoms in transaction fees.  This amounts to a total of 1000 Atoms and 100 Photons to be distributed among all staking pools.  Our validator's staking pool represents 10% of the total stake, which means the pool obtains 100 Atoms and 10 Photons. Now let us look at the internal distribution of revenue:  Commission = 10% * 80% * 100 Atoms = 8 AtomsValidator's revenue = 20% * 100 Atoms + Commission = 28 AtomsDelegators' total revenue = 80% * 100 Atoms - Commission = 72 Atoms  Then, each delegator in the staking pool can claim their portion of the delegators' total revenue.  ","version":"Latest","tagName":"h2"},{"title":"Liquid Staking​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#liquid-staking","content":" The Liquid Staking module enacts a safety framework and associated governance-controlled parameters to regulate the adoption of liquid staking.  The LSM mitigates liquid staking risks by limiting the total amount of ATOM that can be liquid staked to a percentage of all staked ATOM. As an additional risk-mitigation feature, the LSM introduces a requirement that validators self-bond ATOM to be eligible for delegations from liquid staking providers or to be eligible to mint LSM tokens. This mechanism is called the “validator bond”, and is technically distinct from the current self-bond mechanism, but functions similarly.  At the same time, the LSM introduces the ability for staked ATOM to be instantly liquid staked, without having to wait for the unbonding period.  The LSM enables users to instantly liquid stake their staked ATOM, without having to wait the twenty-one day unbonding period. This is important, because a very large portion of the ATOM supply is currently staked. Liquid staking ATOM that is already staked incurs a switching cost in the form of three weeks’ forfeited staking rewards. The LSM eliminates this switching cost.  A user would be able to visit any liquid staking provider that has integrated with the LSM and click a button to convert her staked ATOM to liquid staked ATOM. It would be as easy as liquid staking unstaked ATOM.  Technically speaking, this is accomplished by using something called an “LSM share.” Using the liquid staking module, a user can tokenize their staked ATOM and turn it into LSM shares. LSM shares can be redeemed for underlying staked tokens and are transferable. After staked ATOM is tokenized it can be immediately transferred to a liquid staking provider in exchange for liquid staking tokens - without having to wait for the unbonding period.  ","version":"Latest","tagName":"h2"},{"title":"Toggling the ability to tokenize shares​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#toggling-the-ability-to-tokenize-shares","content":" Currently the liquid staking module facilitates the immediate conversion of staked assets into liquid staked tokens. Despite the many benefits that come with this capability, it does inadvertently negate a protective measure available via traditional staking, where an account can stake their tokens to render them illiquid in the event that their wallet is compromised (the attacker would first need to unbond, then transfer out the tokens).  Tokenization obviates this potential recovery measure, as an attacker could tokenize and immediately transfer staked tokens to another wallet. So, as an additional protective measure, the staking module permit accounts to selectively disable the tokenization of their stake with the DisableTokenizeShares message.  The DisableTokenizeShares message is exposed by the staking module and can be executed as follows:  gaiad tx staking disable-tokenize-shares --from mykey   When tokenization is disabled, a lock is placed on the account, effectively preventing the tokenization of any delegations. Re-enabling tokenization would initiate the removal of the lock, but the process is not immediate. The lock removal is queued, with the lock itself persisting throughout the unbonding period. Following the completion of the unbonding period, the lock would be completely removed, restoring the account's ability to tokenize. For liquid staking protocols that enable the lock, this delay better positions the base layer to coordinate a recovery in the event of an exploit.  ","version":"Latest","tagName":"h3"},{"title":"Risks​","type":1,"pageTitle":"Delegator FAQ","url":"/main/delegators/delegator-faq#risks","content":" Staking Atoms is not free of risk. First, staked Atoms are locked up, and retrieving them requires a 3 week waiting period called unbonding period. Additionally, if a validator misbehaves, a portion of their total stake can be slashed (i.e. destroyed). This includes the stake of their delegators.  There is one main slashing condition:  Double signing: If someone reports on that a validator signed two different blocks with the same chain ID at the same height, this validator will get slashed.  This is why Atom holders should perform careful due diligence on validators before delegating. It is also important that delegators actively monitor the activity of their validators. If a validator behaves suspiciously or is too often offline, delegators can choose to unbond from them or switch to another validator. Delegators can also mitigate risk by distributing their stake across multiple validators. ","version":"Latest","tagName":"h2"},{"title":"Delegator Security","type":0,"sectionRef":"#","url":"/main/delegators/delegator-security","content":"","keywords":"","version":"Latest"},{"title":"Social Engineering​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#social-engineering","content":" Social engineering has existed for about as long as human beings have been on the planet, and in the technical era, it usually takes in the form of phishing or spearphishing . Both of these attacks are wildly successful forms of trickery that are responsible for over 95% of account security breaches, and they don't just happen via email: these days, opportunistic and targeted phishing attempts take place anywhere that you have an inbox . It doesn't matter if you're using Signal, Telegram, SMS, Twitter, or just checking your DMs on forums or social networks, attackers have a plethora of opportunities to gain foothold in your digital life in an effort to separate you from valuable information and assets that you most definitely don't want to lose. If a deal pops up that sounds too good to be true , or a message shows up asking for information that should never, ever be shared with someone else, you can always verify it before engaging with it by navigating to our official website or an official Cosmos communication channel on your own.  Be skeptical of unexpected attachments, or emails that ask you to visit a suspicious or unfamiliar website in the context of blockchains or cryptocurrency. An attacker may attempt to lure you to a compromised site designed to steal sensitive information from your computer. If you're a Gmail user, test your resilience against the latest email-based phishing tactics here . Do your due diligence before purchasing ATOM. Neither the Tendermint team nor the Interchain Foundation will be selling ATOM at launch, so if you see social media posts or emails advertising a token sale from us, they're not real and should be dismissed immediately. If you're on the hunt for ATOM, make sure that you've researched the seller or exchange to confirm that the tokens are coming from a trustworthy source. No one from Cosmos, the Tendermint team or the Interchain Foundation will ever send an email that asks for you to share any kind of account credentials or your 12 words with us, and we will always use our official Twitter, Medium, and Github accounts to communicate important news directly to the Cosmos community.  If you receive an email or tweet that sounds too good to be true, is likely to be a scam.  ","version":"Latest","tagName":"h2"},{"title":"Key Management​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#key-management","content":" The best way to minimize the risk of theft or loss of ATOM is to have a strong storage and backup strategy for your private keys. The safest way to store your keys is offline, either in a cryptocurrency wallet or on a device that you never connect to the internet. The best backup strategy for your keys is to ensure that you have multiple copies of them stored in safe places, and to take specific measures to protect at least one copy of your keys from any kind of natural disaster that is a likely possibility in your part of the world.  To protect your ATOM, do not share your 12 words with anyone. The only person who should ever need to know them is you. You do not need to share your private keys if you're delegating ATOM to a validator on the network or to use custodial services. If anyone asks for your key material,  ","version":"Latest","tagName":"h2"},{"title":"Software Vulnerabilities​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#software-vulnerabilities","content":" To protect yourself and ensure you're using the safest code is to use the latest version of software available, and to update immediately (or as soon as you can) after a security advisory is released. This is important for your laptops, mobile devices, cryptocurrency wallets, and anything else that may be linked to your identity or your cryptocurrency.  To protect your ATOM, you should only download software directly from official sources, and make sure that you're always using the latest, most secure version of gaiad when you're doing anything that involves your 12 words. The latest versions of Tendermint, the Cosmos-SDK, and gaiad will always be available from our official Github repositories.  No one from Cosmos, the Tendermint team or the Interchain Foundation will ever send an email that asks for you to download a software attachment after sending out a security advisory or making a patch available.  ","version":"Latest","tagName":"h2"},{"title":"Verifying Transactions​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#verifying-transactions","content":" Be skeptical of technical advice, especially advice that comes from people you do not know in forums and on group chat channels. Familiarize yourself with important commands, especially those that will help you carry out high-risk actions, and consult our official documentation to make sure that you're not being tricked into doing something that will harm you or your validator.  When sending transactions or doing anything that may spend coins, you should always verify those transactions before hitting send. While address strings are long, it is important to visually comparing them in blocks of 4 characters at a time to ensure that you are sending them to the right place rather than into oblivion.  ","version":"Latest","tagName":"h2"},{"title":"Account Security​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#account-security","content":" One of the most important things you can do to protect your cryptocurrency and eliminate risk is to harden all of your critical online accounts. Attackers will try to gain foothold wherever they can, and will use that foothold to pivot from one place to another. Unprotected accounts like email, social media, your Github account, the Cosmos Forum and anything in between could give an attacker an opportunities to gain foothold in your online life.  For people who hold cryptocurrency, there are two specific account security actions that can be taken to eliminate specific risks that come with being part of the blockchain world.  First, it is important to enable 2-factor authentication everywhere you can, and to make sure that you are using a code generator or U2F hardware key as a second factor. Second, be mindful of account recovery methods used to regain access to your most important accounts and make sure that you do not use SMS as a recovery method. If you haven't done so yet, start using an authenticator app or a hardware key immediately for your personal email account and wherever else you manage your tokens, especially if you use online exchanges.  ","version":"Latest","tagName":"h2"},{"title":"Supply Chain Attacks​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#supply-chain-attacks","content":" Whether you're buying a hardware or a hardware wallet, it is important to purchase whatever you need directly from the supplier or from a trusted source. This is the only way to completely eliminate the risk of a compromised device or chip from stealing your private keys, especially since there are reports of compromised wallets being sold on Amazon and through other popular online marketplaces.  ","version":"Latest","tagName":"h2"},{"title":"Disclaimer​","type":1,"pageTitle":"Delegator Security","url":"/main/delegators/delegator-security#disclaimer","content":" Please note that this is highly experimental software. In these early days, we can expect to have issues, updates, and bugs. The existing tools require advanced technical skills and involve risks which are outside of the control of the Interchain Foundation and/or the Tendermint team (see also the risk section in the Interchain Cosmos Contribution Terms). Any use of this open source Apache 2.0 licensed software is done at your own risk and on a &quot;AS IS&quot; basis, without warranties or conditions of any kind, and any and all liability of the Interchain Foundation and/or the Tendermint team for damages arising in connection to the software is excluded. Please exercise extreme caution!` ","version":"Latest","tagName":"h2"},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/main/getting-started","content":"Getting Started This folder contains tutorials related to the gaia application. What is Gaia?Installing gaiadJoining Mainnet","keywords":"","version":"Latest"},{"title":"System requirements","type":0,"sectionRef":"#","url":"/main/getting-started/system-requirements","content":"","keywords":"","version":"Latest"},{"title":"Gaia Upgrades​","type":1,"pageTitle":"System requirements","url":"/main/getting-started/system-requirements#gaia-upgrades","content":" The Gaia application typically needs at least 32GB RAM, for smooth operation for upgrade, as there may be lengthy migrations to perform.  If you have less than 32GB RAM, you might try creating a swapfile to swap an idle program onto the hard disk to free up memory. This can allow your machine to run the binary than it could run in RAM alone.  # Linux instructions sudo fallocate -l 16G /swapfile sudo chmod 600 /swapfile sudo mkswap /swapfile sudo swapon /swapfile  ","version":"Latest","tagName":"h2"},{"title":"What is Gaia?","type":0,"sectionRef":"#","url":"/main/getting-started/what-is-gaia","content":"What is Gaia? The Cosmos Hub is a public Proof-of-Stake chain that uses ATOM as its native staking token. It is the first blockchain launched in the Cosmos Network and developed using the cosmos-sdk development framework and ibc-go. Cosmos hub is also the first security aggregation platform that leverages the interchain-security protocol (ICS-28) to facilitate the launch of cosmos-sdk blockchain projects. tip Interchain security features deployed on the Cosmos Hub blockchain allow anyone to launch a blockchain using a subset, or even the entire validator set of the Cosmos Hub blockchain. info gaia is the name of the Cosmos SDK application for the Cosmos Hub. gaiad is the daemon and command-line interface (CLI) that operates the gaia blockchain application. For a full list of modules used on the Cosmos Hub follow this link. Next, learn how to install Gaia.","keywords":"","version":"Latest"},{"title":"Quick Start - Join Mainnet","type":0,"sectionRef":"#","url":"/main/getting-started/quickstart","content":"","keywords":"","version":"Latest"},{"title":"Prerequisites​","type":1,"pageTitle":"Quick Start - Join Mainnet","url":"/main/getting-started/quickstart#prerequisites","content":" Note: Make sure the Gaia CLI is installed.  ","version":"Latest","tagName":"h3"},{"title":"Sync Options​","type":1,"pageTitle":"Quick Start - Join Mainnet","url":"/main/getting-started/quickstart#sync-options","content":" To quickly get started, node operators can choose to sync via State Sync or by downloading a snapshot from Quicksync. State Sync works by replaying larger chunks of application state directly rather than replaying individual blocks or consensus rounds. Quicksync is a service provided courtesy of ChainLayer, and offers historical state of the chain available for download every 24 hours. For more advanced information on setting up a node, see the Sync Options section of the full Joining Mainnet Tutorial  State Sync​  To enable state sync, visit an explorer to get a recent block height and corresponding hash. A node operator can choose any height/hash in the current bonding period, but as the recommended snapshot period is 1000 blocks, it is advised to choose something close to current height - 1000. Set these parameters in the code snippet below &lt;BLOCK_HEIGHT&gt; and &lt;BLOCK_HASH&gt;  For reference, the list of rpc_servers and persistent peers can be found in the cosmos hub chain-registry repo.  # Build gaiad binary and initialize chain cd $HOME git clone -b v18.0.0 https://github.com/cosmos/gaia --depth=1 cd gaiad make install gaiad init CUSTOM_MONIKER --chain-id cosmoshub-4 #Set minimum gas price &amp; peers sed -i'' 's/minimum-gas-prices = &quot;&quot;/minimum-gas-prices = &quot;0.0025uatom&quot;/' $HOME/.gaia/config/app.toml sed -i'' 's/persistent_peers = &quot;&quot;/persistent_peers = '&quot;\\&quot;$(curl -s https://raw.githubusercontent.com/cosmos/chain-registry/master/cosmoshub/chain.json | jq -r '[foreach .peers.seeds[] as $item (&quot;&quot;; &quot;\\($item.id)@\\($item.address)&quot;)] | join(&quot;,&quot;)')\\&quot;&quot;'/' $HOME/.gaia/config/config.toml # Configure State sync sed -i'' 's/enable = false/enable = true/' $HOME/.gaia/config/config.toml sed -i'' 's/trust_height = 0/trust_height = &lt;BLOCK_HEIGHT&gt;/' $HOME/.gaia/config/config.toml sed -i'' 's/trust_hash = &quot;&quot;/trust_hash = &quot;&lt;BLOCK_HASH&gt;&quot;/' $HOME/.gaia/config/config.toml sed -i'' 's/rpc_servers = &quot;&quot;/rpc_servers = &quot;https:\\/\\/cosmos-rpc.polkachu.com:443,https:\\/\\/rpc-cosmoshub-ia.cosmosia.notional.ventures:443,https:\\/\\/rpc.cosmos.network:443&quot;/' $HOME/.gaia/config/config.toml #Start Gaia gaiad start --x-crisis-skip-assert-invariants   Quick Sync​  Note: Make sure to set the --home flag when initializing and starting gaiad if mounting quicksync data externally.  Create Gaia Home &amp; Config​  mkdir $HOME/.gaia/config -p   Start Quicksync Download​  Node Operators can decide how much of historical state they want to preserve by choosing between Pruned, Default, and Archive. See the Quicksync.io downloads for up-to-date snapshot sizes.  Default​  sudo apt-get install wget liblz4-tool aria2 jq -y export URL=`curl -L https://quicksync.io/cosmos.json|jq -r '.[] |select(.file==&quot;cosmoshub-4-default&quot;)|.url'` echo $URL cd $HOME/.gaia aria2c -x5 $URL   Pruned​  sudo apt-get install wget liblz4-tool aria2 jq -y export URL=`curl -L https://quicksync.io/cosmos.json|jq -r '.[] |select(.file==&quot;cosmoshub-4-pruned&quot;)|.url'` echo $URL cd $HOME/.gaia aria2c -x5 $URL   Archive​  sudo apt-get install wget liblz4-tool aria2 jq -y export URL=`curl -L https://quicksync.io/cosmos.json|jq -r '.[] |select(.file==&quot;cosmoshub-4-archive&quot;)|.url'` echo $URL cd $HOME/.gaia aria2c -x5 $URL   The download logs should look like the following  01/11 07:48:17 [NOTICE] Downloading 1 item(s) [#7cca5a 484MiB/271GiB(0%) CN:5 DL:108MiB ETA:42m41s]   Completed Download Process:  [#7cca5a 271GiB/271GiB(99%) CN:1 DL:77MiB] 01/11 08:32:19 [NOTICE] Download complete: /mnt/quicksync_01/cosmoshub-4-pruned.20220111.0310.tar.lz4 Download Results: gid |stat|avg speed |path/URI ======+====+===========+======================================================= 7cca5a|OK | 105MiB/s|/mnt/quicksync_01/cosmoshub-4-pruned.20220111.0310.tar.lz4 Status Legend: (OK):download completed.   Unzip​  lz4 -c -d `basename $URL` | tar xf -   Copy Address Book Quicksync​  curl https://quicksync.io/addrbook.cosmos.json &gt; $HOME/.gaia/config/addrbook.json   Start Gaia​  gaiad start --x-crisis-skip-assert-invariants  ","version":"Latest","tagName":"h3"},{"title":"Governance Overview","type":0,"sectionRef":"#","url":"/main/governance","content":"","keywords":"","version":"Latest"},{"title":"Community​","type":1,"pageTitle":"Governance Overview","url":"/main/governance#community","content":" Cosmos governance is driven by the Cosmos community, and much of the documentation in this repo was funded by the community fund itself inProposal 23 and Proposal 63. Governance discussions happen in a number of places moderated by diverse community members, including:  ForumDiscordRedditanywhere else you might interact with members of the Cosmos community! ","version":"Latest","tagName":"h2"},{"title":"Installing Gaia","type":0,"sectionRef":"#","url":"/main/getting-started/installation","content":"","keywords":"","version":"Latest"},{"title":"Build Requirements​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#build-requirements","content":" At present, the SDK fully supports installation on linux distributions. For the purpose of this instruction set, we'll be using Ubuntu 22.04 LTS. It is also possible to install gaiad on Unix, while Windows may require additional unsupported third party installation. All steps are listed below for a clean install.  Update &amp; install build toolsInstall GoInstall Gaiad binaries  ","version":"Latest","tagName":"h2"},{"title":"Build Tools​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#build-tools","content":" Install make and gcc.  Ubuntu:  sudo apt update sudo apt install -y make gcc build-essential   ","version":"Latest","tagName":"h2"},{"title":"Install Go​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#install-go","content":" tip Go 1.23+ is required.  We suggest the following two ways to install Go. Check out the official docs and Go installer for the correct download for your operating system. Alternatively, you can install Go yourself from the command line. Detailed below are standard default installation locations, but feel free to customize.  Since the introduction of CosmWasm in Gaia v18 it is recommended to build the binaries with CGO enabled - simply set CGO_ENABLED=1 in your terminal before building the binary.  Building the gaiad binary on Windows is not supported due to dependency issues.  Go Binary Downloads  Ubuntu:  At the time of this writing, the latest release is 1.23.6. We're going to download the tarball, extract it to /usr/local, and export GOROOT to our $PATH  curl -OL https://go.dev/dl/go1.23.6.darwin-amd64.tar.gz sudo tar -C /usr/local -xvf go1.23.6.darwin-amd64.tar.gz export PATH=$PATH:/usr/local/go/bin   Remember to add GOPATH to your $PATH environment variable. If you're not sure where that is, run go env GOPATH. This will allow us to run the gaiad binary in the next step. If you're not sure how to set your $PATH take a look at these instructions.  export PATH=$PATH:$(go env GOPATH)/bin   ","version":"Latest","tagName":"h2"},{"title":"Install the binaries​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#install-the-binaries","content":" Next, let's install the latest version of Gaia. Make sure you git checkout the correct released version.  git clone -b &lt;latest-release-tag&gt; https://github.com/cosmos/gaia.git cd gaia &amp;&amp; make install   If this command fails due to the following error message, you might have already set LDFLAGS prior to running this step.  # github.com/cosmos/gaia/cmd/gaiad flag provided but not defined: -L usage: link [options] main.o ... make: *** [install] Error 2   Unset this environment variable and try again.  LDFLAGS=&quot;&quot; make install   NOTE: If you still have issues at this step, please check that you have the latest stable version of GO installed.  That will install the gaiad binary. Verify that everything installed successfully by running:  gaiad version --long   You should see something similar to the following:  name: gaia server_name: gaiad version: v18.0.0 commit: 682770f2410ab0d33ac7f0c7203519d7a99fa2b6 build_tags: netgo,ledger,muslc go: go version go1.23.6 linux/amd64   ","version":"Latest","tagName":"h2"},{"title":"Docker​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#docker","content":" Dockerfile is available in the gaia repo.  Building:  git clone -b &lt;latest-release-tag&gt; https://github.com/cosmos/gaia.git cd gaia docker build -t cosmos-ics:local -f Dockerfile ./   ","version":"Latest","tagName":"h2"},{"title":"Static linking​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#static-linking","content":" In case you need to build a binary with all dependencies statically linked please check our Dockerfile.  You must have libwasmvm available on your machine. Choose the build that matches your platform and OS:  https://github.com/CosmWasm/wasmvm?tab=readme-ov-file#builds-of-libwasmvm  For more information, please check wasmvm documentation.  ","version":"Latest","tagName":"h2"},{"title":"Build Tags​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#build-tags","content":" Build tags indicate special features that have been enabled in the binary.  Build Tag\tDescriptionnetgo\tName resolution will use pure Go code ledger\tLedger devices are supported (hardware wallets) static_wasm/muslc\tUsed for statically linked wasmd dependencies  ","version":"Latest","tagName":"h3"},{"title":"Work with a Cosmos SDK Clone​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#work-with-a-cosmos-sdk-clone","content":" To work with your own modifications of the Cosmos SDK, make a fork of this repo, and add a replace clause to the go.mod file. The replace clause you add to go.mod must provide the correct import path.  go mod edit -replace github.com/cosmos/cosmos-sdk=../cosmos-sdk go mod tidy make install # or make build   ","version":"Latest","tagName":"h2"},{"title":"Next​","type":1,"pageTitle":"Installing Gaia","url":"/main/getting-started/installation#next","content":" Now you can join the mainnet, the public testnet. ","version":"Latest","tagName":"h2"},{"title":"Delegator Guide (CLI)","type":0,"sectionRef":"#","url":"/main/delegators/delegator-guide-cli","content":"","keywords":"","version":"Latest"},{"title":"Table of Contents​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#table-of-contents","content":" Table of ContentsInstalling gaiadCosmos Accounts Restoring an Account from the Fundraiser On a Ledger DeviceOn a Computer Creating an Account Using a Ledger DeviceUsing a Computer Accessing the Cosmos Hub Network Running Your Own Full-NodeConnecting to a Remote Full-Node Setting Up gaiadQuerying the StateSending Transactions A Note on Gas and FeesSending TokensBonding Atoms and Withdrawing Rewards Participating in Governance Primer on GovernanceIn PracticeSigning Transactions From an Offline Computer  ","version":"Latest","tagName":"h2"},{"title":"Installing gaiad​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#installing-gaiad","content":" gaiad: This is the command-line interface to interact with a gaiad full-node.  warning Please check that you download the latest stable release of gaiad that is available  [Download the binaries] Not available yet.  Install from source  tip gaiad is used from a terminal. To open the terminal, follow these steps: Windows: Start &gt; All Programs &gt; Accessories &gt; Command PromptMacOS: Finder &gt; Applications &gt; Utilities &gt; TerminalLinux: Ctrl + Alt + T  ","version":"Latest","tagName":"h2"},{"title":"Cosmos Accounts​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#cosmos-accounts","content":" At the core of every Cosmos account, there is a seed, which takes the form of a 12 or 24-words mnemonic. From this mnemonic, it is possible to create any number of Cosmos accounts, i.e. pairs of private key/public key. This is called an HD wallet (see BIP32 for more information on the HD wallet specification).   Account 0 Account 1 Account 2 +------------------+ +------------------+ +------------------+ | | | | | | | Address 0 | | Address 1 | | Address 2 | | ^ | | ^ | | ^ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | + | | + | | + | | Public key 0 | | Public key 1 | | Public key 2 | | ^ | | ^ | | ^ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | + | | + | | + | | Private key 0 | | Private key 1 | | Private key 2 | | ^ | | ^ | | ^ | +------------------+ +------------------+ +------------------+ | | | | | | | | | +--------------------------------------------------------------------+ | | +---------+---------+ | | | Mnemonic (Seed) | | | +-------------------+   The funds stored in an account are controlled by the private key. This private key is generated using a one-way function from the mnemonic. If you lose the private key, you can retrieve it using the mnemonic. However, if you lose the mnemonic, you will lose access to all the derived private keys. Likewise, if someone gains access to your mnemonic, they gain access to all the associated accounts.  warning Do not lose or share your 12 words with anyone. To prevent theft or loss of funds, it is best to ensure that you keep multiple copies of your mnemonic, and store it in a safe, secure place and that only you know how to access. If someone is able to gain access to your mnemonic, they will be able to gain access to your private keys and control the accounts associated with them.  The address is a public string with a human-readable prefix (e.g. cosmos10snjt8dmpr5my0h76xj48ty80uzwhraqalu4eg) that identifies your account. When someone wants to send you funds, they send it to your address. It is computationally infeasible to find the private key associated with a given address.  ","version":"Latest","tagName":"h2"},{"title":"Restoring an Account from the Fundraiser​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#restoring-an-account-from-the-fundraiser","content":" tip NOTE: This section only concerns fundraiser participants  If you participated in the fundraiser, you should be in possession of a 12-words mnemonic. Newly generated mnemonics use 24 words, but 12-word mnemonics are also compatible with all the Cosmos tools.  On a Ledger Device​  At the core of a ledger device, there is a mnemonic used to generate accounts on multiple blockchains (including the Cosmos Hub). Usually, you will create a new mnemonic when you initialize your ledger device. However, it is possible to tell the ledger device to use a mnemonic provided by the user instead. Let us go ahead and see how you can input the mnemonic you obtained during the fundraiser as the seed of your ledger device.  warning NOTE: To do this, it is preferable to use a brand new ledger device.. Indeed, there can be only one mnemonic per ledger device. If, however, you want to use a ledger that is already initialized with a seed, you can reset it by going in Settings&gt;Device&gt;Reset All. Please note that this will wipe out the seed currently stored on the device. If you have not properly secured the associated mnemonic, you could lose your funds!!!  The following steps need to be performed on an un-initialized ledger device:  Connect your ledger device to the computer via USBPress both buttonsDo NOT choose the &quot;Config as a new device&quot; option. Instead, choose &quot;Restore Configuration&quot;Choose a PINChoose the 12 words optionInput each of the words you got during the fundraiser, in the correct order.  Your ledger is now correctly set up with your fundraiser mnemonic! Do not lose this mnemonic! If your ledger is compromised, you can always restore a new device again using the same mnemonic.  Next, click here to learn how to generate an account.  On a Computer​  warning NOTE: It is more secure to perform this action on an offline computer  To restore an account using a fundraiser mnemonic and store the associated encrypted private key on a computer, use the following command:  gaiad keys add &lt;yourKeyName&gt; --recover   &lt;yourKeyName&gt; is the name of the account. It is a reference to the account number used to derive the key pair from the mnemonic. You will use this name to identify your account when you want to send a transaction.You can add the optional --account flag to specify the path (0, 1, 2, ...) you want to use to generate your account. By default, account 0 is generated.  The private key of account 0 will be saved in your operating system's credentials storage. Each time you want to send a transaction, you will need to unlock your system's credentials store. If you lose access to your credentials storage, you can always recover the private key with the mnemonic.  tip You may not be prompted for password each time you send a transaction since most operating systems unlock user's credentials store upon login by default. If you want to change your credentials store security policies please refer to your operating system manual.  ","version":"Latest","tagName":"h3"},{"title":"Creating an Account​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#creating-an-account","content":" To create an account, you just need to have gaiad installed. Before creating it, you need to know where you intend to store and interact with your private keys. The best options are to store them in an offline dedicated computer or a ledger device. Storing them on your regular online computer involves more risk, since anyone who infiltrates your computer through the internet could exfiltrate your private keys and steal your funds.  Using a Ledger Device​  warning Only use Ledger devices that you bought factory new or trust fully  When you initialize your ledger, a 24-word mnemonic is generated and stored in the device. This mnemonic is compatible with Cosmos and Cosmos accounts can be derived from it. Therefore, all you have to do is make your ledger compatible with gaiad. To do so, you need to go through the following steps:  Download the Ledger Live app here.Connect your ledger via USB and update to the latest firmwareGo to the ledger live app store, and download the &quot;Cosmos&quot; application (this can take a while). Note: You may have to enable Dev Mode in the Settings of Ledger Live to be able to download the &quot;Cosmos&quot; application.Navigate to the Cosmos app on your ledger device  Then, to create an account, use the following command:  gaiad keys add &lt;yourAccountName&gt; --ledger   warning This command will only work while the Ledger is plugged in and unlocked  &lt;yourKeyName&gt; is the name of the account. It is a reference to the account number used to derive the key pair from the mnemonic. You will use this name to identify your account when you want to send a transaction.You can add the optional --account flag to specify the path (0, 1, 2, ...) you want to use to generate your account. By default, account 0 is generated.  Using a Computer​  warning NOTE: It is more secure to perform this action on an offline computer  To generate an account, just use the following command:  gaiad keys add &lt;yourKeyName&gt;   The command will generate a 24-words mnemonic and save the private and public keys for account 0at the same time. Each time you want to send a transaction, you will need to unlock your system's credentials store. If you lose access to your credentials storage, you can always recover the private key with the mnemonic.  tip You may not be prompted for password each time you send a transaction since most operating systems unlock user's credentials store upon login by default. If you want to change your credentials store security policies please refer to your operating system manual.  warning Do not lose or share your 12 words with anyone. To prevent theft or loss of funds, it is best to ensure that you keep multiple copies of your mnemonic, and store it in a safe, secure place and that only you know how to access. If someone is able to gain access to your mnemonic, they will be able to gain access to your private keys and control the accounts associated with them.  warning After you have secured your mnemonic (triple check!), you can delete bash history to ensure no one can retrieve it: history -c rm ~/.bash_history   &lt;yourKeyName&gt; is the name of the account. It is a reference to the account number used to derive the key pair from the mnemonic. You will use this name to identify your account when you want to send a transaction.You can add the optional --account flag to specify the path (0, 1, 2, ...) you want to use to generate your account. By default, account 0 is generated.  You can generate more accounts from the same mnemonic using the following command:  gaiad keys add &lt;yourKeyName&gt; --recover --account 1   This command will prompt you to input a passphrase as well as your mnemonic. Change the account number to generate a different account.  ","version":"Latest","tagName":"h3"},{"title":"Accessing the Cosmos Hub Network​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#accessing-the-cosmos-hub-network","content":" In order to query the state and send transactions, you need a way to access the network. To do so, you can either run your own full-node, or connect to someone else's.  warning NOTE: Do not share your mnemonic (12 or 24 words) with anyone. The only person who should ever need to know it is you. This is especially important if you are ever approached via email or direct message by someone requesting that you share your mnemonic for any kind of blockchain services or support. No one from Cosmos, the Tendermint team or the Interchain Foundation will ever send an email that asks for you to share any kind of account credentials or your mnemonic.&quot;.  ","version":"Latest","tagName":"h2"},{"title":"Running Your Own Full-Node​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#running-your-own-full-node","content":" This is the most secure option, but comes with relatively high resource requirements. In order to run your own full-node, you need good bandwidth and at least 1TB of disk space.  You will find the tutorial on how to install gaiad here, and the guide to run a full-node here.  ","version":"Latest","tagName":"h3"},{"title":"Connecting to a Remote Full-Node​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#connecting-to-a-remote-full-node","content":" If you do not want or cannot run your own node, you can connect to someone else's full-node. You should pick an operator you trust, because a malicious operator could return incorrect query results or censor your transactions. However, they will never be able to steal your funds, as your private keys are stored locally on your computer or ledger device. Possible options of full-node operators include validators, wallet providers or exchanges.  In order to connect to the full-node, you will need an address of the following form: https://77.87.106.33:26657 (Note: This is a placeholder). This address has to be communicated by the full-node operator you choose to trust. You will use this address in the following section.  ","version":"Latest","tagName":"h3"},{"title":"Setting Up gaiad​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#setting-up-gaiad","content":" tip Before setting up gaiad, make sure you have set up a way to access the Cosmos Hub network  warning Please check that you are always using the latest stable release of gaiad  gaiad is the tool that enables you to interact with the node that runs on the Cosmos Hub network, whether you run it yourself or not. Let us set it up properly.  In order to set up gaiad, use the following command:  gaiad config &lt;flag&gt; &lt;value&gt;   It allows you to set a default value for each given flag.  First, set up the address of the full-node you want to connect to:  gaiad config node &lt;host&gt;:&lt;port // example: gaiad config node https://77.87.106.33:26657 (note: this is a placeholder)   If you run your own full-node, just use tcp://localhost:26657 as the address.  Finally, let us set the chain-id of the blockchain we want to interact with:  gaiad config chain-id cosmoshub-4   ","version":"Latest","tagName":"h2"},{"title":"Querying the State​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#querying-the-state","content":" tip Before you can bond atoms and withdraw rewards, you need to set up gaiad  gaiad lets you query all relevant information from the blockchain, like account balances, amount of bonded tokens, outstanding rewards, governance proposals and more. Next is a list of the most useful commands for delegator.  // query account balances and other account-related information gaiad query account &lt;yourAddress&gt; // query the list of validators gaiad query staking validators // query the information of a validator given their address (e.g. cosmosvaloper1n5pepvmgsfd3p2tqqgvt505jvymmstf6s9gw27) gaiad query staking validator &lt;validatorAddress&gt; // query all delegations made from a delegator given their address (e.g. cosmos10snjt8dmpr5my0h76xj48ty80uzwhraqalu4eg) gaiad query staking delegations &lt;delegatorAddress&gt; // query a specific delegation made from a delegator (e.g. cosmos10snjt8dmpr5my0h76xj48ty80uzwhraqalu4eg) to a validator (e.g. cosmosvaloper1n5pepvmgsfd3p2tqqgvt505jvymmstf6s9gw27) given their addresses gaiad query staking delegation &lt;delegatorAddress&gt; &lt;validatorAddress&gt; // query the rewards of a delegator given a delegator address (e.g. cosmos10snjt8dmpr5my0h76xj48ty80uzwhraqalu4eg) gaiad query distribution rewards &lt;delegatorAddress&gt; // query all proposals currently open for depositing gaiad query gov proposals --status deposit_period // query all proposals currently open for voting gaiad query gov proposals --status voting_period // query a proposal given its proposalID gaiad query gov proposal &lt;proposalID&gt;   For more commands, just type:  gaiad query   For each command, you can use the -h or --help flag to get more information.  ","version":"Latest","tagName":"h2"},{"title":"Sending Transactions​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#sending-transactions","content":" warning On Cosmos Hub mainnet, the accepted denom is uatom, where 1atom = 1,000,000uatom  ","version":"Latest","tagName":"h2"},{"title":"A Note on Gas and Fees​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#a-note-on-gas-and-fees","content":" Transactions on the Cosmos Hub network need to include a transaction fee in order to be processed. This fee pays for the gas required to run the transaction. The formula is the following:  fees = ceil(gas * gasPrices)   The gas is dependent on the transaction. Different transaction require different amount of gas. The gas amount for a transaction is calculated as it is being processed, but there is a way to estimate it beforehand by using the auto value for the gas flag. Of course, this only gives an estimate. You can adjust this estimate with the flag --gas-adjustment (default 1.0) if you want to be sure you provide enough gas for the transaction. For the remainder of this tutorial, we will use a --gas-adjustment of 1.5.  The gasPrice is the price of each unit of gas. Each validator sets a min-gas-price value, and will only include transactions that have a gasPrice greater than their min-gas-price.  The transaction fees are the product of gas and gasPrice. As a user, you have to input 2 out of 3. The higher the gasPrice/fees, the higher the chance that your transaction will get included in a block.  tip For mainnet, the recommended gas-prices is 0.0025uatom.  ","version":"Latest","tagName":"h3"},{"title":"Sending Tokens​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#sending-tokens","content":" tip Before you can bond atoms and withdraw rewards, you need to set up gaiad and create an account  warning Note: These commands need to be run on an online computer. It is more secure to perform them commands using a Ledger Nano S device. For the offline procedure, click here.  // Send a certain amount of tokens to an address // Ex value for parameters (do not actually use these values in your tx!!): &lt;to_address&gt;=cosmos16m93fezfiezhvnjajzrfyszml8qm92a0w67ntjhd3d0 &lt;amount&gt;=1000000uatom // Ex value for flags: &lt;gasPrice&gt;=0.0025uatom gaiad tx bank send [from_key_or_address] [to_address] [amount] [flags]   ","version":"Latest","tagName":"h3"},{"title":"Bonding Atoms and Withdrawing Rewards​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#bonding-atoms-and-withdrawing-rewards","content":" tip Before you can bond atoms and withdraw rewards, you need to set up gaiad and create an account  warning Before bonding Atoms, please read the delegator faq to understand the risk and responsibilities involved with delegating  warning Note: These commands need to be run on an online computer. It is more secure to perform them commands using a ledger device. For the offline procedure, click here.  // Bond a certain amount of Atoms to a given validator // ex value for flags: &lt;validatorAddress&gt;=cosmosvaloper18thamkhnj9wz8pa4nhnp9rldprgant57pk2m8s, &lt;amountToBound&gt;=10000000uatom, &lt;gasPrice&gt;=0.0025uatom gaiad tx staking delegate &lt;validatorAddress&gt; &lt;amountToBond&gt; --from &lt;delegatorKeyName&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; // Redelegate a certain amount of Atoms from a validator to another // Can only be used if already bonded to a validator // Redelegation takes effect immediately, there is no waiting period to redelegate // After a redelegation, no other redelegation can be made from the account for the next 3 weeks // ex value for flags: &lt;stcValidatorAddress&gt;=cosmosvaloper18thamkhnj9wz8pa4nhnp9rldprgant57pk2m8s, &lt;amountToRedelegate&gt;=100000000uatom, &lt;gasPrice&gt;=0.0025uatom gaiad tx staking redelegate &lt;srcValidatorAddress&gt; &lt;destValidatorAddress&gt; &lt;amountToRedelegate&gt; --from &lt;delegatorKeyName&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; // Withdraw all rewards // ex value for flag: &lt;gasPrice&gt;=0.0025uatom gaiad tx distribution withdraw-all-rewards --from &lt;delegatorKeyName&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; // Unbond a certain amount of Atoms from a given validator // You will have to wait 3 weeks before your Atoms are fully unbonded and transferrable // ex value for flags: &lt;validatorAddress&gt;=cosmosvaloper18thamkhnj9wz8pa4nhnp9rldprgant57pk2m8s, &lt;amountToUnbound&gt;=10000000uatom, &lt;gasPrice&gt;=0.0025uatom gaiad tx staking unbond &lt;validatorAddress&gt; &lt;amountToUnbond&gt; --from &lt;delegatorKeyName&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt;   warning If you use a connected Ledger, you will be asked to confirm the transaction on the device before it is signed and broadcast to the network. Note that the command will only work while the Ledger is plugged in and unlocked.  To confirm that your transaction went through, you can use the following queries:  // your balance should change after you bond Atoms or withdraw rewards gaiad query account // you should have delegations after you bond Atom gaiad query staking delegations &lt;delegatorAddress&gt; // this returns your tx if it has been included // use the tx hash that was displayed when you created the tx gaiad query tx &lt;txHash&gt;   Double check with a block explorer if you interact with the network through a trusted full-node.  ","version":"Latest","tagName":"h3"},{"title":"Participating in Governance​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#participating-in-governance","content":" ","version":"Latest","tagName":"h2"},{"title":"Primer on Governance​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#primer-on-governance","content":" The Cosmos Hub has a built-in governance system that lets bonded Atom holders vote on proposals. There are three types of proposal:  Text Proposals: These are the most basic type of proposals. They can be used to get the opinion of the network on a given topic.Parameter Proposals: These are used to update the value of an existing parameter.Software Upgrade Proposal: These are used to propose an upgrade of the Hub's software.  Any Atom holder can submit a proposal. In order for the proposal to be open for voting, it needs to come with a deposit that is greater than a parameter called minDeposit. The deposit need not be provided in its entirety by the submitter. If the initial proposer's deposit is not sufficient, the proposal enters the deposit_period status. Then, any Atom holder can increase the deposit by sending a depositTx.  Once the deposit reaches minDeposit, the proposal enters the voting_period, which lasts 2 weeks. Any bonded Atom holder can then cast a vote on this proposal. The options are Yes, No, NoWithVeto and Abstain. The weight of the vote is based on the amount of bonded Atoms of the sender. If they don't vote, delegator inherit the vote of their validator. However, delegators can override their validator's vote by sending a vote themselves.  At the end of the voting period, the proposal is accepted if there are more than 50% Yes votes (excluding Abstain votes) and less than 33.33% of NoWithVeto votes (excluding Abstain votes).  ","version":"Latest","tagName":"h3"},{"title":"In Practice​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#in-practice","content":" tip Before you can bond atoms and withdraw rewards, you need to bond Atoms  warning Note: These commands need to be run on an online computer. It is more secure to perform them commands using a ledger device. For the offline procedure, click here.  // Submit a Proposal // &lt;type&gt;=text/parameter_change/software_upgrade // ex value for flag: &lt;gasPrice&gt;=0.0025uatom // the proposal must meet the minimum deposit amount - please check the current chain params gaiad tx gov submit-legacy-proposal --title &quot;Test Text Proposal&quot; --description &quot;My awesome proposal&quot; --type &quot;text&quot; --deposit=10000000uatom --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; --from &lt;delegatorKeyName&gt; // Increase deposit of a proposal // Retrieve proposalID from $gaiad query gov proposals --status deposit_period // ex value for parameter: &lt;deposit&gt;=10000000uatom gaiad tx gov deposit &lt;proposalID&gt; &lt;deposit&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; --from &lt;delegatorKeyName&gt; // Vote on a proposal // Retrieve proposalID from $gaiad query gov proposals --status voting_period // &lt;option&gt;=yes/no/no_with_veto/abstain gaiad tx gov vote &lt;proposalID&gt; &lt;option&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; --from &lt;delegatorKeyName&gt;   ","version":"Latest","tagName":"h3"},{"title":"Signing Transactions From an Offline Computer​","type":1,"pageTitle":"Delegator Guide (CLI)","url":"/main/delegators/delegator-guide-cli#signing-transactions-from-an-offline-computer","content":" If you do not have a ledger device and want to interact with your private key on an offline computer, you can use the following procedure. First, generate an unsigned transaction on an online computer with the following command (example with a bonding transaction):  // Bond Atoms // ex value for flags: &lt;amountToBound&gt;=10000000uatom, &lt;bech32AddressOfValidator&gt;=cosmosvaloper18thamkhnj9wz8pa4nhnp9rldprgant57pk2m8s, &lt;gasPrice&gt;=0.0025uatom, &lt;delegatorAddress&gt;=cosmos10snjt8dmpr5my0h76xj48ty80uzwhraqalu4eg gaiad tx staking delegate &lt;validatorAddress&gt; &lt;amountToBond&gt; --from &lt;delegatorAddress&gt; --gas auto --gas-adjustment 1.5 --gas-prices &lt;gasPrice&gt; --generate-only &gt; unsignedTX.json   In order to sign, you will also need the chain-id, account-number and sequence. The chain-id is a unique identifier for the blockchain on which you are submitting the transaction. The account-number is an identifier generated when your account first receives funds. The sequence number is used to keep track of the number of transactions you have sent and prevent replay attacks.  Get the chain-id from the genesis file (4), and the two other fields using the account query:  gaiad query account &lt;yourAddress&gt; --chain-id cosmoshub-4   Then, copy unsignedTx.json and transfer it (e.g. via USB) to the offline computer. If it is not done already, create an account on the offline computer. For additional security, you can double check the parameters of your transaction before signing it using the following command:  cat unsignedTx.json   Now, sign the transaction using the following command. You will need the chain-id, sequence and account-number obtained earlier:  gaiad tx sign unsignedTx.json --from &lt;delegatorKeyName&gt; --offline --chain-id cosmoshub-4 --sequence &lt;sequence&gt; --account-number &lt;account-number&gt; &gt; signedTx.json   Copy signedTx.json and transfer it back to the online computer. Finally, use the following command to broadcast the transaction:  gaiad tx broadcast signedTx.json  ","version":"Latest","tagName":"h3"},{"title":"Off-Chain Proposal Process","type":0,"sectionRef":"#","url":"/main/governance/best-practices","content":"","keywords":"","version":"Latest"},{"title":"Engage directly with the voting community and seek feedback​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#engage-directly-with-the-voting-community-and-seek-feedback","content":" Engagement is likely to be critical to the success of a proposal. The degree to which you engage with the Cosmos Hub community should be relative to the potential impact that your proposal may have on the stakeholders. This guide does not cover all ways of engaging but here are some suggestions:  Post your idea to the Cosmos Hub Forum  Mention the idea in a community call (often hosted on Twitter)Host an AMA on Reddit  We encourage you to experiment and use your strengths to introduce proposal ideas and gather feedback.  There are many different ways to engage. One strategy involves a few stages of engagement before and after submitting a proposal on chain.  Why do it in stages? It's a more conservative approach to save resources. The idea is to check in with key stakeholders at each stage before investing more resources into developing your proposal.  In the first stage of this strategy, you should engage people (ideally experts) informally about your idea. You'll want to start with the minimal, critical components (name, value to Cosmos Hub, timeline, any funding needs) and check:  Does it make sense?Are there critical flaws?How will this affect other projects or properties of the Hub?  You should be engaging with key stakeholders (e.g., a large validator operator) with a few short sentences to measure their support. Here's an example:  &quot;We are considering a proposal for funding to work on project. We think it will help the Hub to outcome. Timeline is x, and we're asking for y amount. Do you think that this is a proposal that large validator may support?&quot;  Why a large validator? They tend to be the de facto decision-makers on the Cosmos Hub, since their delegators also delegate their voting power. If you can establish a base layer of off-chain support, you can be more confident that it's worth proceeding to the next stage.  Note: Many validators will likely hesitate to commit support, and that's okay. It will be important to reassure these stakeholders that this isn't a binding commitment. You're just canvasing the community to get a feel for whether it's worthwhile to proceed. It's also an opportunity to connect with new people and to answer their questions about what it is you're working on. It will be important for them to clearly understand why you think what you're proposing will be valuable to the Cosmos Hub, and if possible, why it will be valuable to them as long-term stakeholders.  If you're already confident about your idea, skip to Stage 2.  ","version":"Latest","tagName":"h2"},{"title":"Stage 1: Your Idea​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#stage-1-your-idea","content":" ","version":"Latest","tagName":"h2"},{"title":"Not yet confident about your idea?​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#not-yet-confident-about-your-idea","content":" Great! Governance proposals potentially impact many stakeholders. Introduce your idea with known members of the community before investing resources into drafting a proposal. Don't let negative feedback dissuade you from exploring your idea if you think that it's still important.  If you know people who are very involved with the Cosmos Hub, send them a private message with a concise overview of what you think will result from your idea or proposed changes. Wait for them to ask questions before providing details. Do the same in semi-private channels where people tend to be respectful (and hopefully supportive).  ","version":"Latest","tagName":"h3"},{"title":"Confident with your idea?​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#confident-with-your-idea","content":" Great! However, remember that governance proposals potentially impact many stakeholders, which can happen in unexpected ways. Introduce your idea with members of the community before investing resources into drafting a proposal. At this point you should seek out and carefully consider critical feedback in order to protect yourself from confirmation bias. This is the ideal time to see a critical flaw, because submitting a flawed proposal on-chain will waste resources and have reputational costs.  Posting your idea to the Cosmos Hub Forum is a great way to get broad feedback and perspective even if you don't have personal connections to any stakeholders or involved parties.  ","version":"Latest","tagName":"h3"},{"title":"Are you ready to draft a governance proposal?​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#are-you-ready-to-draft-a-governance-proposal","content":" There will likely be differences of opinion about the value of what you're proposing to do and the strategy by which you're planning to do it. If you've considered feedback from broad perspectives and think that what you're doing is valuable and that your strategy should work, and you believe that others feel this way as well, it's likely worth drafting a proposal. However, remember that the largest ATOM stakers have the biggest vote, so a vocal minority isn't necessarily representative or predictive of the outcome of an on-chain vote.  You could choose to take a conservative approach and wait until you have some confidence that you roughly have initial support from a majority of the voting power before proceeding to drafting the details of your proposal. Or you could propose the idea, or define the problem statement and let the community participate freely in drafting competing solutions to solve the issue.  ","version":"Latest","tagName":"h3"},{"title":"Stage 2: Your Draft Proposal​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#stage-2-your-draft-proposal","content":" The next major section outlines and describes some potential elements of drafting a proposal. Ensure that you have considered your proposal and anticipated questions that the community will likely ask. Once your proposal is on-chain, you will not be able to change it.  ","version":"Latest","tagName":"h2"},{"title":"Proposal Elements​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#proposal-elements","content":" It will be important to balance two things: being detailed and being concise. You'll want to be concise so that people can assess your proposal quickly. You'll want to be detailed so that voters will have a clear, meaningful understanding of what the changes are and how they are likely to be impacted.  Each major proposal type has a rough template available on the forum: Text, community pool spend, parameter change, software upgrade.  Each proposal should contain a summary with key details about what the proposal hopes to change. If you were viewing only the summary with no other context, it should be a good start to being able to make a decision.  Assume that many people will stop reading at this point. However it is important to provide in-depth information. The on-chain proposal text should also include a link to an un-editable version of the text, such as an IPFS pin, and a link to where discussion about the idea is happening.  A few more pointers for Parameter-change and Community Spend proposals are below.  Parameter-Change​  An example of a successful parameter change proposal is Proposal #66. Note that this proposal went on-chain without the recommended IPFS pin.  Problem/Value - The problem or value that's motivating the parameter change(s).Solution - How changing the parameter(s) will address the problem or improve the network.Risks &amp; Benefits - How making this/these change(s) may expose stakeholders to new benefits and/or risks. The beneficiaries of the change(s) (ie. who will these changes impact and how?)Voters should understand the importance of the change(s) in a simple way Supplementary materials - Optional materials eg. models, graphs, tables, research, signed petition, etc  Community-Spend Proposal​  An example of a successful community spend proposal is Proposal #63.  Applicant(s) - The profile of the person(s)/entity making the proposal. Who you are and your involvement in Cosmos and/or other blockchain networks.An overview of team members involved and their relevant experience. Problem - What you're solving and/or opportunity you're addressing. Past, present (and possibly a prediction of the future without this work being done). Solution - How you're proposing to deliver the solution. Your plan to fix the problem or deliver value.The beneficiaries of this plan (ie. who will your plan impact and how?).Your reasons for selecting this plan.Your motivation for delivering this solution/value. Funding - amount and denomination proposed eg. 5000 ATOM. The entity controlling the account receiving the funding.Consider an itemized breakdown of funding per major deliverable.Note that the 'budget' of a spend proposal is generally the easiest thing to criticize. If your budget is vague, consider explaining the reasons you're unable to give a detailed breakdown and be clear about what happens if you do not meet your budget. Deliverables and timeline - the specifics of what you're delivering and how, and what to expect. What are the specific deliverables? (be detailed).When will each of these be delivered?How will each of these be delivered?What will happen if you do not deliver on time?Do you have a plan to return the funds if you're under-budget or the project fails?How will you be accountable to the Cosmos Hub stakeholders? How will you communicate updates and how often?How can the community observe your progress?How can the community provide feedback? How should the quality of deliverables be assessed? eg. metrics. Relationships and disclosures. Have you received or applied for grants or funding? for similar work? eg. from the Interchain Foundation.How will you and/or your organization benefit?Do you see this work continuing in the future and is there a plan?What are the risks involved with this work?Do you have conflicts of interest to declare?  ","version":"Latest","tagName":"h3"},{"title":"Begin with a well-considered draft proposal​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#begin-with-a-well-considered-draft-proposal","content":" Ideally, a proposal is first sent to the forum in Markdown format so that it can be further edited and available for comments. A changelog is a great tool so that people can see how the idea has developed over time and in response to feedback.  This Markdown-formatted post can eventually become the description text in a proposal sent on-chain.  ","version":"Latest","tagName":"h3"},{"title":"Engage the community with your draft proposal​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#engage-the-community-with-your-draft-proposal","content":" Post a draft of your proposal as a topic in the appropriate category of the forum. Hub Proposals is a catch-all if you are not sure where to post, but there are categories for all types of proposals. Directly engage key members of the community for feedback. These could be large contributors, those likely to be most impacted by the proposal, and entities with high stake-backing (eg. high-ranked validators; large stakers).  Alert the entire community to the draft proposal on other platforms such as Twitter, tagging accounts such as the Cosmos Hub account, the Cosmos Governance account, and other governance-focused groups.  ","version":"Latest","tagName":"h3"},{"title":"Submit your proposal to the testnet​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#submit-your-proposal-to-the-testnet","content":" Before going on mainnet, you can test your proposal on the testnet.  This is a great way to make sure your proposal looks the way you want and refine it before heading to mainnet.  ","version":"Latest","tagName":"h3"},{"title":"Stage 3: Your On-Chain Proposal​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#stage-3-your-on-chain-proposal","content":" A majority of the voting community should probably be aware of the proposal and have considered it before the proposal goes live on-chain. If you're taking a conservative approach, you should have reasonable confidence that your proposal will pass before risking deposit contributions. Make revisions to your draft proposal after each stage of engagement.  See the submitting guide for more on submitting proposals.  ","version":"Latest","tagName":"h2"},{"title":"The Deposit Period​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#the-deposit-period","content":" The deposit period currently lasts 14 days. If you submitted your transaction with the minimum deposit (250 ATOM), your proposal will immediately enter the voting period. If you didn't submit the minimum deposit amount (currently 250 ATOM), then this may be an opportunity for others to show their support by contributing (and risking) their ATOMs as a bond for your proposal. You can request contributions openly and also contact stakeholders directly (particularly stakeholders who are enthusiastic about your proposal). Remember that each contributor is risking their funds, and you can read more about the conditions for burning deposits here.  This is a stage where proposals may begin to get broader attention. Some block explorers display proposals in the deposit period, while others don't show them until they hit voting period.  A large cross-section of the blockchain/cryptocurrency community exists on Twitter. Having your proposal in the deposit period is a good time to engage the so-called 'crypto Twitter' Cosmos community to prepare validators to vote (eg. tag @cosmosvalidator) and ATOM-holders that are staking (eg. tag @cosmoshub, @CosmosGov).  ","version":"Latest","tagName":"h3"},{"title":"The Voting Period​","type":1,"pageTitle":"Off-Chain Proposal Process","url":"/main/governance/best-practices#the-voting-period","content":" At this point you'll want to track which validator has voted and which has not. You'll want to re-engage directly with top stake-holders, ie. the highest-ranking validator operators, to ensure that:  they are aware of your proposal;they can ask you any questions about your proposal; andthey are prepared to vote.  Remember that any voter may change their vote at any time before the voting period ends. That historically doesn't happen often, but there may be an opportunity to convince a voter to change their vote. The biggest risk is that stakeholders won't vote at all (for a number of reasons). Validator operators tend to need multiple reminders to vote. How you choose to contact validator operators, how often, and what you say is up to you--remember that no validator is obligated to vote, and that operators are likely occupied by competing demands for their attention. Take care not to stress any potential relationship with validator operators. ","version":"Latest","tagName":"h3"},{"title":"Formatting a Proposal","type":0,"sectionRef":"#","url":"/main/governance/formatting","content":"","keywords":"","version":"Latest"},{"title":"Text​","type":1,"pageTitle":"Formatting a Proposal","url":"/main/governance/formatting#text","content":" Text proposals are used by delegators to agree to a certain strategy, plan, commitment, future upgrade, or any other statement in the form of text. Aside from having a record of the proposal outcome on the Cosmos Hub chain, a text proposal has no direct effect on the change Cosmos Hub.  There are four components:  Title - the distinguishing name of the proposal, typically the way that explorers list proposalsSummary - the body of the proposal that further describes what is being proposed and details surrounding the proposalDeposit - the amount that will be contributed to the deposit (in micro-ATOMs &quot;uatom&quot;) from the account submitting the proposalMetadata - usually a link to an off-chain resource  ","version":"Latest","tagName":"h2"},{"title":"Real example​","type":1,"pageTitle":"Formatting a Proposal","url":"/main/governance/formatting#real-example","content":" Proposal 12 asked if the Cosmos Hub community of validators charging 0% commission was harmful to the success of the Cosmos Hub.  You can use gaiad tx gov draft-proposal and choose text to create the proposal file.  You must submit the proposal using gaiad tx gov submit-proposal &lt;path_to_text_proposal.json&gt;.  { &quot;title&quot;: &quot;Are Validators Charging 0% Commission Harmful to the Success of the Cosmos Hub?&quot;, &quot;summary&quot;: &quot;This governance proposal is intended to act purely as a signalling proposal. Throughout this history of the Cosmos Hub, there has been much debate about the impact that validators charging 0% commission has on the Cosmos Hub, particularly with respect to the decentralization of the Cosmos Hub and the sustainability for validator operations. Discussion around this topic has taken place in many places including numerous threads on the Cosmos Forum, public Telegram channels, and in-person meetups. Because this has been one of the primary discussion points in off-chain Cosmos governance discussions, we believe it is important to get a signal on the matter from the on-chain governance process of the Cosmos Hub. There have been past discussions on the Cosmos Forum about placing an in-protocol restriction on validators from charging 0% commission. https://forum.cosmos.network/t/governance-limit-validators-from-0-commission-fee/2182 This proposal is NOT proposing a protocol-enforced minimum. It is merely a signalling proposal to query the viewpoint of the bonded Atom holders as a whole. We encourage people to discuss the question behind this governance proposal in the associated Cosmos Hub forum post here: https://forum.cosmos.network/t/proposal-are-validators-charging-0-commission-harmful-to-the-success-of-the-cosmos-hub/2505 Also, for voters who believe that 0% commission rates are harmful to the network, we encourage optionally sharing your belief on what a healthy minimum commission rate for the network using the memo field of their vote transaction on this governance proposal or linking to a longer written explanation such as a Forum or blog post. The question on this proposal is “Are validators charging 0% commission harmful to the success of the Cosmos Hub?”. A Yes vote is stating that they ARE harmful to the network's success, and a No vote is a statement that they are NOT harmful.&quot;, &quot;deposit&quot;: &quot;100000uatom&quot;, &quot;metadata&quot;: &quot;ipfs://CID&quot;, }   ","version":"Latest","tagName":"h3"},{"title":"Community Pool Spend​","type":1,"pageTitle":"Formatting a Proposal","url":"/main/governance/formatting#community-pool-spend","content":" There are five (5) components:  Title - the distinguishing name of the proposal, typically the way that explorers list proposalsSummary - the body of the proposal that further describes what is being proposed and details surrounding the proposalRecipient - the Cosmos Hub (bech32-based) address that will receive funding from the Community PoolAmount - the amount of funding that the recipient will receive in micro-ATOMs (uatom)Deposit - the amount that will be contributed to the deposit (in micro-ATOMs &quot;uatom&quot;) from the account submitting the proposal  If the description says that a certain address will receive a certain number of ATOMs, it should also be programmed to do that, but it's possible that that's not the case (accidentally or otherwise). Check that the description aligns with the 'recipient' address.  ","version":"Latest","tagName":"h2"},{"title":"Real example​","type":1,"pageTitle":"Formatting a Proposal","url":"/main/governance/formatting#real-example-1","content":" The amount is 1000000000uatom. 1,000,000 micro-ATOM is equal to 1 ATOM, so recipient address cosmos1xf2qwf6g6xvuttpf37xwrgp08qq984244952ze will receive 1000 ATOM if this proposal is passed.  The deposit&quot;: &quot;1000000uatom results in 1 ATOM being used from the proposal submitter's account.  You can use the gaiad tx gov draft-proposal utility and choose /cosmos.distribution.v1beta1.MsgCommunityPoolSpend to create a draft proposal file.  You must use gaiad tx gov submit-proposal &lt;path_to_proposal_file.json&gt; to submit the proposal. The proposal cannot be submitted using submit-legacy-proposal.  { &quot;messages&quot;:[ { &quot;@type&quot;: &quot;/cosmos.distribution.v1beta1.MsgCommunityPoolSpend&quot;, &quot;authority&quot;: &quot;cosmos10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn&quot;, &quot;recipient&quot;: &quot;cosmos00af8sd0a9dfansdfoiasf0a9ssd9fa09i99990&quot;, &quot;amount&quot;: [{ &quot;denom&quot;: &quot;uatom&quot;, &quot;amount&quot;: &quot;10000000000&quot; }] } ], &quot;deposit&quot;: &quot;100000uatom&quot;, &quot;proposer&quot;: &quot;cosmos12xpdapokdfpsodf32das75sokdaadapsokd1sa&quot;, &quot;metadata&quot;: &quot;Community Pool Spend Proposal Example&quot;, &quot;title&quot;: &quot;Activate governance discussions on the Discourse forum using community pool funds&quot;, &quot;summary&quot;: &quot;## Summary\\nProposal to request for 1000 ATOM from the community spending pool to be sent to a multisig who will put funds towards stewardship of the Discourse forum to make it an authoritative record of governance decisions as well as a vibrant space to draft and discuss proposals.\\n## Details\\nWe are requesting 1000 ATOM from the community spending pool to activate and steward the Cosmos Hub (Discourse) forum for the next six months.\\n\\nOff-chain governance conversations are currently highly fragmented, with no shared public venue for discussing proposals as they proceed through the process of being drafted and voted on. It means there is no record of discussion that voters can confidently point to for context, potentially leading to governance decisions becoming delegitimized by stakeholders.\\n\\nThe requested amount will be sent to a multisig comprising individuals (members listed below) who can ensure that the tokens are spent judiciously. We believe stewardship of the forum requires:\\n\\n* **Moderation**: Format, edit, and categorize posts; Standardize titles and tags; Monitor and approve new posts; Archive posts.\\n* **Facilitation**: Ask clarifying questions in post threads; Summarize discussions; Provide historical precedence to discussions.\\n* **Engagement**: Circulate important posts on other social channels to increase community participation; Solicit input from key stakeholders.\\n* **Guidance**: Orient and assist newcomers; Guide proposers through governance process; Answer questions regarding the forum or Cosmos ecosystem.\\nThe work to steward the forum will be carried out by members of [Hypha Worker Co-op](https://hypha.coop/) and individuals selected from the community to carry out scoped tasks in exchange for ATOM from this budget.\\n## Multisig Members\\n* Hypha: Mai Ishikawa Sutton (Hypha Co-op)\\n* Validator: Daniel Hwang (Stakefish)\\n* Cosmos Hub developer: Lauren Gallinaro (Interchain Berlin)\\n\\nWe feel the membership of the multisig should be rotated following the six-month pilot period to preserve insight from the distinct specializations (i.e., Cosmos Hub validators and developers).\\n## Timeline and Deliverables\\nWe estimate the total work to take 250-300 hours over six months where we hope to produce:\\n* **Moving summaries:** Provide succinct summaries of the proposals and include all publicly stated reasons why various entities are choosing to vote for/against a given proposal. These summaries will be written objectively, not siding with any one entity.\\n* **Validator platforms:** Create a section of the Forum where we collate all validators' visions for Cosmos Hub governance to allow them to state their positions publicly. We will work with the smaller validators to ensure they are equally represented.\\n* **Regular check-ins with the Cosmonaut DAO:** Collaborate with the future Cosmonaut DAO to ensure maximal accessibility and engagement. Community management is a critical, complementary aspect of increasing participation in governance.\\n* **Announcement channel:** Create a read-only announcement channel in the Cosmos Community Discord, so that new proposals and major discussions can be easily followed.\\n* **Tooling friendly posts:** Tag and categorize posts so that they can be easily ingested into existing tooling that validators have setup.\\n* **Neutral moderation framework:** Document and follow transparent standards for how the forum is moderated.\\n\\nAt the end of the period, we will produce a report reflecting on our successes and failures, and recommendations for how the work of maintaining a governance venue can be continuously sustained (e.g., through a DAO). We see this initiative as a process of discovery, where we are learning by doing.\\n\\nFor more context, you can read through the discussions on this [proposal on the Discourse forum](https://forum.cosmos.network/t/proposal-draft-activate-governance-discussions-on-the-discourse-forum-using-community-pool-funds/5833).\\n\\n## Governance Votes\\nThe following items summarize the voting options and what it means for this proposal:\\n**YES** - You approve this community spend proposal to deposit 1000 ATOM to a multisig that will spend them to improve governance discussions in the Discourse forum.\\n**NO** - You disapprove of this community spend proposal in its current form (please indicate why in the Cosmos Forum).\\n**NO WITH VETO** - You are strongly opposed to this change and will exit the network if passed.\\n**ABSTAIN** - You are impartial to the outcome of the proposal.\\n## Recipient\\ncosmos1xf2qwf6g6xvuttpf37xwrgp08qq984244952ze\\n## Amount\\n1000 ATOM\\n\\n***Disclosure**: Hypha has an existing contract with the Interchain Foundation focused on the testnet program and improving documentation. This work is beyond the scope of that contract and is focused on engaging the community in governance.*\\n\\nIPFS pin of proposal on-forum: (https://ipfs.io/ipfs/Qmaq7ftqWccgYCo8U1KZfEnjvjUDzSEGpMxcRy61u8gf2Y)&quot;, }   ","version":"Latest","tagName":"h3"},{"title":"Legacy Param Change​","type":1,"pageTitle":"Formatting a Proposal","url":"/main/governance/formatting#legacy-param-change","content":" tip Legacy parameter change proposals are not available for cosmos-sdk modules. You can update these CosmosHub modules using submit-legacy-proposal: ibc (transfer, interchain-accounts)provider  Note: The changes outlined here must be submitted using submit-legacy-proposal.  For param-change proposals, there are arguably seven (7) components, though three are nested beneath 'Changes':  Title - the distinguishing name of the proposal, typically the way that explorers list proposalsDescription - the body of the proposal that further describes what is being proposed and details surrounding the proposalChanges - a component containingSubspace - the Cosmos Hub module with the parameter that is being changedKey - the parameter that will be changedValue - the value of the parameter that will be changed by the governance mechanismDeposit - the amount that will be contributed to the deposit (in micro-ATOMs &quot;uatom&quot;) from the account submitting the proposal  The components must be presented as shown in the example.  info To update any of the cosmos-sdk modules you must use gaiad tx gov submit-proposal with a correctly formatted proposal file containing a MsgUpdateParams. When using MsgUpdateParams please note that all fields must always be specified (PUT semantics). Please be careful to not accidentally submit a proposal that changes more parameters than was intended. The parameters that you do not want to change you can simply copy from existing module params.  ","version":"Latest","tagName":"h2"},{"title":"Real example​","type":1,"pageTitle":"Formatting a Proposal","url":"/main/governance/formatting#real-example-2","content":" This example is 'real', because it was put on-chain using the Theta testnet and can be seen in the block explorer here.  Not all explorers will show the proposed parameter changes that are coded into the proposal, so ensure that you verify that the description aligns with what the governance proposal is programmed to enact. If the description says that a certain parameter will be increased, it should also be programmed to do that, but it's possible that that's not the case (accidentally or otherwise).   { &quot;title&quot;: &quot;Doc update test: Param change for transfer/SendEnabled&quot;, &quot;description&quot;: &quot;Testing the proposal format for enabling IBC transfers on our chain&quot;, &quot;changes&quot;: [ { &quot;subspace&quot;: &quot;transfer&quot;, &quot;key&quot;: &quot;transfer&quot;, &quot;value&quot;: true } ], &quot;deposit&quot;: &quot;100000uatom&quot; }  ","version":"Latest","tagName":"h3"},{"title":"On-Chain Proposal Process","type":0,"sectionRef":"#","url":"/main/governance/process","content":"","keywords":"","version":"Latest"},{"title":"Governance Parameters​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#governance-parameters","content":" Several of the numbers involved in governance are parameters and can thus be changed by passing a parameter change proposal.  Minimum deposit: 250 ATOMMaximum deposit period: 14 daysVoting period: 14 daysQuorum: 40% of participating voting powerPass threshold: 50% of participating voting powerVeto threshold: 33.40% of participating voting power  ","version":"Latest","tagName":"h2"},{"title":"1. Deposit Period​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#1-deposit-period","content":" The deposit period lasts either 14 days or until the proposal deposit totals 250 ATOMs, whichever happens first.  ","version":"Latest","tagName":"h2"},{"title":"Deposits​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#deposits","content":" Prior to a governance proposal entering the voting period (i.e., for the proposal to be voted upon), there must be at least a minimum number of ATOMs deposited (250). Anyone may contribute to this deposit, though it is usually filled by the proposal maker. Deposits of passed and failed proposals are returned to the contributors.  In the past, different people have considered contribution amounts differently. There is some consensus that this should be a personal choice. There is also some consensus that this can be an opportunity for supporters to signal their support by adding to the deposit amount, so a proposer may choose to leave contribution room (i.e., a deposit below 250 ATOMs) so that others may participate. It is important to remember that any contributed ATOMs are at risk of being burned.  ","version":"Latest","tagName":"h3"},{"title":"Burned deposits​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#burned-deposits","content":" Deposits are burned only when proposals are vetoed as documented in the Cosmos SDK gov module spec. Deposits are not burned for failing to meet quorum or for being rejected.  ","version":"Latest","tagName":"h3"},{"title":"2. Voting Period​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#2-voting-period","content":" The voting period is currently a fixed 14-day period. During the voting period, participants may select a vote of either 'Yes', 'No', 'Abstain', or 'NoWithVeto'. Voters may change their vote at any time before the voting period ends.  ","version":"Latest","tagName":"h2"},{"title":"What do the voting options mean?​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#what-do-the-voting-options-mean","content":" Abstain: The voter wishes to contribute to quorum without voting for or against a proposal.Yes: Approval of the proposal in its current form.No: Disapproval of the proposal in its current form.NoWithVeto: A ‘NoWithVeto’ vote indicates a proposal either (1) is deemed to be spam, i.e., irrelevant to Cosmos Hub, (2) disproportionately infringes on minority interests, or (3) violates or encourages violation of the rules of engagement as currently set out by Cosmos Hub governance.  As accepted by the community in Proposal 75, voters are expected to vote 'NoWithVeto' for proposals that are spam, infringe on minority interests, or violate the rules of engagement (i.e., Social protocols which have passed governance and thus been accepted as rules on the Hub). This proposal was an extension of the ideas put forward in Proposal 6.  Voting 'NoWithVeto' has no immediate additional financial cost to the voter - you do not directly risk your ATOM by using this option.  ","version":"Latest","tagName":"h3"},{"title":"What determines whether or not a governance proposal passes?​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#what-determines-whether-or-not-a-governance-proposal-passes","content":" There are four criteria:  Deposit is filled: A minimum deposit of 250 ATOM is required for the proposal to enter the voting period anyone may contribute to this depositthe deposit must be reached within 14 days (this is the deposit period) Quorum is reached: A minimum of 40% of the network's total voting power (staked ATOM) is required to participateSimple majority of 'Yes' votes: Greater than 50% of the participating voting power must back the 'Yes' vote by the end of the 14-day voting periodNot vetoed: Less than 33.4% of participating voting power must have backed 'NoWithVeto' by the end of the 14-day voting period  Currently, the criteria for submitting and passing/failing all proposal types is the same.  ","version":"Latest","tagName":"h3"},{"title":"How is quorum determined?​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#how-is-quorum-determined","content":" Voting power, whether backing a vote of 'Yes', 'Abstain', 'No', or 'NoWithVeto', counts toward quorum. Quorum is required for the outcome of a governance proposal vote to be considered valid and for deposit contributors to recover their deposit amounts.  ","version":"Latest","tagName":"h3"},{"title":"How is voting tallied?​","type":1,"pageTitle":"On-Chain Proposal Process","url":"/main/governance/process#how-is-voting-tallied","content":" Total voting power refers to all staked ATOM at the end of the 14-day voting period. Liquid ATOMs are not part of the total voting power and thus cannot participate in voting.Participating voting power refers to only the ATOM which have been used to cast a vote on a particular proposal. Quorum is set to 40% of the participating voting power.  Validators not in the active set can cast a vote, but their voting power (including the backing of their delegators) will not count toward the vote if they are not in the active set when the voting period ends. That means that if ATOM is delegated to a validator that is jailed, tombstoned, or outside of the active set at the time that the voting period ends, that ATOM's stake-weight will not count in the vote.  Though a simple majority 'Yes' vote (ie. 50% of participating voting power) is required for a governance proposal vote to pass, a 'NoWithVeto' vote of 33.4% of participating voting power or greater can override this outcome and cause the proposal to fail. This enables a minority group representing greater than 1/3 of participating voting power to fail a proposal that would otherwise pass. ","version":"Latest","tagName":"h3"},{"title":"Proposal Types","type":0,"sectionRef":"#","url":"/main/governance/proposal-types","content":"","keywords":"","version":"Latest"},{"title":"Drafting a Proposal​","type":1,"pageTitle":"Proposal Types","url":"/main/governance/proposal-types#drafting-a-proposal","content":" Drafting and submitting a proposal is a process that takes time, attention, and involves risk. The objective of this documentation is to make this process easier by preparing participants for what to pay attention to, the information that should be considered in a proposal, and how to reduce the risk of losing deposits.  Ideally, a proposal should only fail to pass because voters are aware, engaged, and have made an informed decision to vote down the proposal.  If you are considering drafting a proposal, you should first review the general background on drafting and submitting a proposal:  How the voting process and governance mechanism worksHow to draft your proposal and engage with the Cosmos community about itHow to format proposalsHow to submit your proposal  You should also review details specific to each kind of proposal, listed in this section. ","version":"Latest","tagName":"h2"},{"title":"Community Pool Spend","type":0,"sectionRef":"#","url":"/main/governance/proposal-types/community-pool-spend","content":"","keywords":"","version":"Latest"},{"title":"Learn About the Community Pool​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#learn-about-the-community-pool","content":" ","version":"Latest","tagName":"h2"},{"title":"How is the Community Pool funded?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#how-is-the-community-pool-funded","content":" 2% of all staking rewards generated (via block rewards &amp; transaction fees) are continually transferred to and accrue within the Community Pool. For example, from Dec 19, 2019 until Jan 20, 2020 (32 days), 28,726 ATOM were generated and added to the pool.  ","version":"Latest","tagName":"h3"},{"title":"How can funding for the Community Pool change?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#how-can-funding-for-the-community-pool-change","content":" Though the rate of funding is currently fixed at 2% of staking rewards, the effective rate is dependent upon the Cosmos Hub's staking rewards, which can change with inflation and block times.  The current parameter Community Tax parameter of 2% may be modified with a governance proposal and enacted immediately after the proposal passes.  ","version":"Latest","tagName":"h3"},{"title":"How much money is in the Community Pool?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#how-much-money-is-in-the-community-pool","content":" You may directly query the Cosmos Hub 4 for the balance of the Community Pool:  gaiad q distribution community-pool --chain-id cosmoshub-4 --node &lt;rpc-node-address&gt;   Alternatively, popular Cosmos explorers such as Big Dipper and Mintscan display the ongoing Community Pool balance.  ","version":"Latest","tagName":"h3"},{"title":"How can funds from the Community Pool be spent?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#how-can-funds-from-the-community-pool-be-spent","content":" Funds from the Cosmos Community Pool may be spent via successful governance proposal.  ","version":"Latest","tagName":"h3"},{"title":"How should funds from the Community Pool be spent?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#how-should-funds-from-the-community-pool-be-spent","content":" We don't know 🤷  The prevailing assumption is that funds should be spent in a way that brings value to the Cosmos Hub. However, there is debate about how to keep the fund sustainable. There is also some debate about who should receive funding. For example, part of the community believes that the funds should only be used for those who need funding most. Other topics of concern include:  retroactive grantsprice negotiationfund disbursal (eg. payments in stages; payments pegged to reduce volatility)radical overhaul of how the community-spend mechanism functions  We can expect this to take shape as proposals are discussed, accepted, and rejected by the Cosmos Hub community.  ","version":"Latest","tagName":"h3"},{"title":"How are funds disbursed after a community-spend proposal is passed?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#how-are-funds-disbursed-after-a-community-spend-proposal-is-passed","content":" If a community-spend proposal passes successfully, the number of ATOM encoded in the proposal will be transferred from the community pool to the address encoded in the proposal, and this will happen immediately after the voting period ends.  ","version":"Latest","tagName":"h3"},{"title":"Why create a proposal to use Community Pool funds?​","type":1,"pageTitle":"Community Pool Spend","url":"/main/governance/proposal-types/community-pool-spend#why-create-a-proposal-to-use-community-pool-funds","content":" There are other funding options, most notably the Interchain Foundation's grant program. Why create a community-spend proposal?  As a strategy: you can do both. You can submit your proposal to the Interchain Foundation, but also consider submitting your proposal publicly on-chain. If the Hub votes in favour, you can withdraw your Interchain Foundation application.  As a strategy: funding is fast. Besides the time it takes to push your proposal on-chain, the only other limiting factor is a fixed 14-day voting period. As soon as the proposal passes, your account will be credited the full amount of your proposal request.  To build rapport. Engaging publicly with the community is the opportunity to develop relationships with stakeholders and to educate them about the importance of your work. Unforeseen partnerships could arise, and overall the community may value your work more if they are involved as stakeholders.  To be more independent. The Interchain Foundation (ICF) may not always be able to fund work. Having a more consistently funded source and having a report with its stakeholders means you can use your rapport to have confidence in your ability to secure funding without having to be dependent upon the ICF alone. ","version":"Latest","tagName":"h2"},{"title":"Parameter Changes","type":0,"sectionRef":"#","url":"/main/governance/proposal-types/param-change","content":"","keywords":"","version":"Latest"},{"title":"What parameters can be changed?​","type":1,"pageTitle":"Parameter Changes","url":"/main/governance/proposal-types/param-change#what-parameters-can-be-changed","content":" The complete parameters of the Cosmos Hub are split up into different modules, each of which has its own set of parameters. Most parameters can be updated by submitting a governance proposal.  List of modules whose parameters can be changed via governance:  x/authx/bankx/distributionx/evidencex/feegrantx/govx/mintx/slashingx/stakingibc-go/transferinterchain-security/provider  Each cosmos-sdk module uses MsgUpdateParams for providing parameter changes. You can learn more about it in the cosmos-sdk documentation of each module (e.g. https://docs.cosmos.network/v0.47/build/modules/staking#msgupdateparams)  ","version":"Latest","tagName":"h2"},{"title":"What are the current parameter values?​","type":1,"pageTitle":"Parameter Changes","url":"/main/governance/proposal-types/param-change#what-are-the-current-parameter-values","content":" There are ways to query the current settings for each module's parameter(s). Some can be queried with the command line program gaiad.  You can begin by using the command gaiad q [module] -h to get help about the subcommands for the module you want to query. For example, gaiad q staking params returns the settings of relevant parameters:  bond_denom: uatom historical_entries: 10000 max_entries: 7 max_validators: 180 unbonding_time: 1814400s   If a parameter-change proposal is successful, the change takes effect immediately upon completion of the voting period.  Note: You cannot currently query the bank module's parameter, which is sendenabled. You also cannot query the crisis module's parameters.  ","version":"Latest","tagName":"h2"},{"title":"Why create a parameter change proposal?​","type":1,"pageTitle":"Parameter Changes","url":"/main/governance/proposal-types/param-change#why-create-a-parameter-change-proposal","content":" Parameters are what govern many aspects of the chain's behaviour. As circumstances and attitudes change, sometimes you might want to change a parameter to bring the chain's behaviour in line with community opinion. For example, the Cosmos Hub launched with 100 active validators and there have been 4 proposals to date that have increased the MaxValidators parameter. At the time of writing, the active set contains 180 validators.  The Cosmos Hub has been viewed as a slow-moving, highly secure chain and that is reflected in some of its other parameters, such as a 21 day unbonding period and 14 day voting period. These are quite long compared to other chains in the Cosmos Ecosystem  ","version":"Latest","tagName":"h2"},{"title":"Risks in parameter change proposals​","type":1,"pageTitle":"Parameter Changes","url":"/main/governance/proposal-types/param-change#risks-in-parameter-change-proposals","content":" Because parameters dictate some of the ways in which the chain operates, changing them can have an impact beyond what is immediately obvious.  For example, reducing the unbonding period might seem like the only effect is in how quickly delegators can liquidate their assets. It might also have a much greater impact on the overall security of the network that would be hard to realize at first glance.  This is one of the reasons that having a thorough discussion before going on-chain is so important - talking through the impacts of a proposal is a great way to avoid unintended effects. ","version":"Latest","tagName":"h2"},{"title":"Text (Signaling)","type":0,"sectionRef":"#","url":"/main/governance/proposal-types/text-prop","content":"","keywords":"","version":"Latest"},{"title":"What are signaling proposals currently used for?​","type":1,"pageTitle":"Text (Signaling)","url":"/main/governance/proposal-types/text-prop#what-are-signaling-proposals-currently-used-for","content":" Signaling proposals are used to make an on-chain record of support or agreement on a certain topic or ideas. Text proposals do not contain any code. That is, they do not directly cause any changes to the Hub once passed.  Past signalling proposals have been used for a variety of reasons:  Agreement to adopt (or not adopt) a feature in a future release (7, 31, 38, 49, 69)A high-signal alert to validators (8)On-chain record of community opinion (12)Ratification of a social norm (75)  ","version":"Latest","tagName":"h2"},{"title":"A note on historical text proposals​","type":1,"pageTitle":"Text (Signaling)","url":"/main/governance/proposal-types/text-prop#a-note-on-historical-text-proposals","content":" In the early days of the Cosmos Hub, 'text' was the only proposal type. If you read old proposals, you will find 'text' proposals being used for things we use other proposal types now, such as changing a parameter (10) or upgrading the software (19).  The process for these historical proposals was that an on-chain signal was used to give permission for development or changes to be made off-chain and included in the Cosmos Hub code. With the addition of new proposal types, these development or spending choices can now be executed by the Gaia code immediately after the vote is tallied.  ","version":"Latest","tagName":"h3"},{"title":"Why make a signaling proposal?​","type":1,"pageTitle":"Text (Signaling)","url":"/main/governance/proposal-types/text-prop#why-make-a-signaling-proposal","content":" Signaling proposals are a great way to take an official, public poll of community sentiment before investing more resources into a project. The most common way for text proposals to be used is to confirm that the community is actually interested in what the proposer wants to develop, without asking for money to fund development that might not be concrete enough to have a budget yet.  Because the results of signaling proposals remain on-chain and are easily accessible to anyone, they are also a good way to formalize community opinions. Information contained in documentation or Github repos can be hard to find for new community members but signaling proposals in a block explorer or wallet is very accessible.  You might make a signaling proposal to gather opinions for work you want to do for the Hub, or because you think it's important to have a record of some perspective held by the community at large.  ","version":"Latest","tagName":"h2"},{"title":"What happens when a signaling proposal passes?​","type":1,"pageTitle":"Text (Signaling)","url":"/main/governance/proposal-types/text-prop#what-happens-when-a-signaling-proposal-passes","content":" Technically, nothing happens on-chain. No code executes, and this 'unenforceable' property of text proposals is one of the biggest criticisms of the format. Regardless of whether the results of a signaling proposal are enforced by code, there can still be value from having a proposal on-chain and subject to discussion. Whether a proposal passes or fails, we all get information from it having been considered.  The community might have had a thorough, thoughtful discussion about a topic that they otherwise wouldn't have had.A dev team interested in a feature might have a better idea of how their work will be received by the community.The community might be more informed about a topic than they previously were.The community might feel confident that we are aligned on a particular definition or social norm.  ","version":"Latest","tagName":"h2"},{"title":"Submitting a text proposal​","type":1,"pageTitle":"Text (Signaling)","url":"/main/governance/proposal-types/text-prop#submitting-a-text-proposal","content":" Follow the instructions below to create a text proposal and submit it to the blockchain.  ➜ gaiad tx gov draft-proposal Use the arrow keys to navigate: ↓ ↑ → ← ? Select proposal type: ▸ text # choose this community-pool-spend software-upgrade cancel-software-upgrade other   Choose text from the draft-proposal menu and populate all the available fields.  ✔ text Enter proposal title: Title Enter proposal authors: Author Enter proposal summary: Proposal summary Enter proposal details: Details, all the details Enter proposal forum url: / Enter proposal vote option context: Vote yes if &lt;...&gt; Enter proposal deposit: 100001uatom   Check draft_proposal.json, your result should be similar to this:  { &quot;metadata&quot;: &quot;ipfs://CID&quot;, &quot;deposit&quot;: &quot;100001uatom&quot;, &quot;title&quot;: &quot;Title&quot;, &quot;summary&quot;: &quot;Proposal summary&quot; }   Upload your draft_metadata.json to a distribution platform of your choice. draft_proposal.json is used to submit a governance proposal using submit-proposal.  gaiad tx gov submit-proposal &lt;path_to_proposal.json&gt; --from &lt;submitter address&gt; \\ --chain-id cosmoshub-4 \\ --gas &lt;max gas allocated&gt; \\ --fees &lt;fees allocated&gt; \\ --node &lt;node address&gt; \\   Additional instructions with debugging information is available on the submitting page. ","version":"Latest","tagName":"h2"},{"title":"Gaia Tutorials","type":0,"sectionRef":"#","url":"/main/hub-tutorials","content":"Gaia Tutorials This folder contains tutorials related to the gaiad application. Interacting with the gaiad binaryRunning a full-node for the Cosmos Hub MainnetRunning a full-node for a gaia testnetUpgrading a node from a previous versionCreating an upgrade governance proposal","keywords":"","version":"Latest"},{"title":"Software Upgrade","type":0,"sectionRef":"#","url":"/main/governance/proposal-types/software-upgrade","content":"","keywords":"","version":"Latest"},{"title":"Procedure​","type":1,"pageTitle":"Software Upgrade","url":"/main/governance/proposal-types/software-upgrade#procedure","content":" Use draft-proposal command to create a draft proposal and populate it with required information.  ✗ gaiad tx gov draft-proposal Use the arrow keys to navigate: ↓ ↑ → ← ? Select proposal type: text community-pool-spend ▸ software-upgrade # choose this cancel-software-upgrade other # populate all steps (displaying all for demonstration purposes) Enter proposal title: Upgrade v15 Enter proposal authors: Stewards Enter proposal summary: Upgrade to v15 Enter proposal details: &lt;v15 upgrade changelog details&gt; Enter proposal proposal forum url: / Enter proposal vote option context: Vote YES to support running this binary on the Cosmos Hub mainnet. Enter proposal deposit: 100001uatom Enter msg authority: cosmos10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn   In your draft_proposal.json populate the height with your desired upgrade height and populate the info field with additional information (must be a valid JSON string):  { &quot;binaries&quot;: { &quot;darwin/amd64&quot;: &quot;https://github.com/cosmos/gaia/releases/download/v15.0.0/gaiad-v15.0.0-darwin-amd64?checksum=sha256:7157f03fbad4f53a4c73cde4e75454f4a40a9b09619d3295232341fec99ad138&quot;, &quot;darwin/arm64&quot;: &quot;https://github.com/cosmos/gaia/releases/download/v15.0.0/gaiad-v15.0.0-darwin-arm64?checksum=sha256:09e2420151dd22920304dafea47af4aa5ff4ab0ddbe056bb91797e33ff6df274&quot;, &quot;linux/amd64&quot;: &quot;https://github.com/cosmos/gaia/releases/download/v15.0.0/gaiad-v15.0.0-linux-amd64?checksum=sha256:236b5b83a7674e0e63ba286739c4670d15d7d6b3dcd810031ff83bdec2c0c2af&quot;, &quot;linux/arm64&quot;: &quot;https://github.com/cosmos/gaia/releases/download/v15.0.0/gaiad-v15.0.0-linux-arm64?checksum=sha256:b055fb7011e99d16a3ccae06443b0dcfd745b36480af6b3e569e88c94f3134d3&quot;, &quot;windows/armd64&quot;: &quot;https://github.com/cosmos/gaia/releases/download/v15.0.0/gaiad-v15.0.0-windows-amd64.exe?checksum=sha256:f0224ba914cad46dc27d6a9facd8179aec8a70727f0b1e509f0c6171c97ccf76&quot;, &quot;windows/arm64&quot;: &quot;https://github.com/cosmos/gaia/releases/download/v15.0.0/gaiad-v15.0.0-windows-arm64.exe?checksum=sha256:cbbce5933d501b4d54dcced9b097c052bffdef3fa8e1dfd75f29b34c3ee7de86&quot; } }   Upload your draft_metadata.json to a distribution platform of your choice. draft_proposal.json is used to submit a governance proposal using submit-proposal.  gaiad tx gov submit-proposal &lt;path_to_proposal.json&gt; --from &lt;submitter address&gt; \\ --chain-id cosmoshub-4 \\ --gas &lt;max gas allocated&gt; \\ --fees &lt;fees allocated&gt; \\ --node &lt;node address&gt; \\   ","version":"Latest","tagName":"h2"},{"title":"Using x/upgrading​","type":1,"pageTitle":"Software Upgrade","url":"/main/governance/proposal-types/software-upgrade#using-xupgrading","content":" Software upgrade proposals can be submitted using the x/upgrade module. The end effect will be the same since the x/gov module routes the message to x/upgrade module.  ","version":"Latest","tagName":"h2"},{"title":"Additional information​","type":1,"pageTitle":"Software Upgrade","url":"/main/governance/proposal-types/software-upgrade#additional-information","content":" Additional instructions with debugging information is available on the submitting page. ","version":"Latest","tagName":"h2"},{"title":"Submitting a Proposal","type":0,"sectionRef":"#","url":"/main/governance/submitting","content":"","keywords":"","version":"Latest"},{"title":"Hosting supplementary materials​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#hosting-supplementary-materials","content":" In general we try to minimize the amount of data pushed to the blockchain. Hence, detailed documentation about a proposal is usually hosted on a separate censorship resistant data-hosting platform, like IPFS.  Once you have drafted your proposal, ideally as a Markdown file, you can upload it to the IPFS network:  By running an IPFS node and the IPFS software, orBy using a service such as https://pinata.cloud  Ensure that you &quot;pin&quot; the file so that it continues to be available on the network. You should get a URL like this: https://ipfs.io/ipfs/QmbkQNtCAdR1CNbFE8ujub2jcpwUcmSRpSCg8gVWrTHSWD  The value QmbkQNtCAdR1CNbFE8ujub2jcpwUcmSRpSCg8gVWrTHSWD is called the CID of your file - it is effectively the file's hash.  If you uploaded a markdown file, you can use the IPFS markdown viewer to render the document for better viewing. Links for the markdown viewer look like https://ipfs.io/ipfs/QmTkzDwWqPbnAh5YiV5VwcTLnGdwSNsNTn2aDxdXBFca7D/example#/ipfs/&lt;CID&gt;, where &lt;CID&gt; is your CID. For instance the link above would be: https://ipfs.io/ipfs/QmTkzDwWqPbnAh5YiV5VwcTLnGdwSNsNTn2aDxdXBFca7D/example#/ipfs/QmbkQNtCAdR1CNbFE8ujub2jcpwUcmSRpSCg8gVWrTHSWD  Share the URL with others and verify that your file is publicly accessible.  The reason we use IPFS is that it is a decentralized means of storage, making it resistant to censorship or single points of failure. This increases the likelihood that the file will remain available in the future.  ","version":"Latest","tagName":"h2"},{"title":"Formatting the JSON file for the governance proposal​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#formatting-the-json-file-for-the-governance-proposal","content":" Prior to sending the transaction that submits your proposal on-chain, you must create a JSON file. This file will contain the information that will be stored on-chain as the governance proposal. Begin by creating a new text (.txt) file to enter this information. Use these best practices as a guide for the contents of your proposal. When you're done, save the file as a .json file.  Each proposal type is unique in how the JSON should be formatted. See the relevant section for the type of proposal you are drafting:  Text ProposalsCommunity Pool Spend ProposalsParameter Change Proposals  Once on-chain, most people will rely upon block explorers to interpret this information with a graphical user interface (GUI).  ","version":"Latest","tagName":"h2"},{"title":"Sending the transaction that submits your governance proposal​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#sending-the-transaction-that-submits-your-governance-proposal","content":" For information on how to use gaiad (the command line interface) to submit an on-chain proposal through the governance module, please refer to the gaiad CLI tutorials for the Cosmos Hub documentation.  ","version":"Latest","tagName":"h2"},{"title":"Proposal types​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#proposal-types","content":" There are 2 proposal types that can be submitted to the CosmosHub governance module.  Legacy proposals (cosmos-sdk &lt; v0.47)​  These proposals can be submitted using gaiad tx gov submit-legacy-proposal.  Available proposals that can be submitted using this Tx are:  cancel-software-upgradechange-reward-denomsconsumer-additionconsumer-removalibc-upgradeparam-change (does not work for standard cosmos-sdk modules, works on IBC and ICS modules)software-upgradeupdate-client  You can read more about submitting a legacy proposal in the cosmos-sdk docs  Proposals (cosmos-sdk &gt;= v0.47)​  These proposals can be submitted using gaiad tx gov submit-proposal.  Using gaiad tx gov draft-proposal can help prepare a proposal. The tool will create a file containing the specified proposal message and it also helps with populating all the required proposal fields. You can always edit the file after you create it using draft-proposal  Most cosmos-sdk modules allow changing their governance gated parameters using a MsgUpdateParams which is a new way of updating governance parameters. It is important to note that MsgUpdateParams requires all parameters to be specified in the proposal message.  You can read more about submitting a proposal in the cosmos-sdk docs  Minimal Deposit amount​  tip Please note that cosmoshub-4 uses a minimum initial deposit amount.  Proposals cannot be submitted successfully without providing a minimum initial deposit. In practice, this means that the deposit field in your proposal has to meet the min_initial_deposit governance parameter. The minimum deposit is equal to min_deposit * min_initial_deposit_ratio. Only uatom is supported as deposit denom.  // checking the min_initial_deposit gaiad q gov params -o json { ... &quot;params&quot;: { ... &quot;min_deposit&quot;: [ { &quot;denom&quot;: &quot;stake&quot;, &quot;amount&quot;: &quot;10000000&quot; } ], &quot;min_initial_deposit_ratio&quot;: &quot;0.000000000000000000&quot; }   ","version":"Latest","tagName":"h3"},{"title":"Walkthrough example (changing x/staking params)​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#walkthrough-example-changing-xstaking-params","content":" Let's illustrate how to change the x/staking parameters.  The module has the following parameters (values don't reflect actual on-chain values):  gaiad q staking params -o json { &quot;unbonding_time&quot;: &quot;86400s&quot;, &quot;max_validators&quot;: 100, &quot;max_entries&quot;: 7, &quot;historical_entries&quot;: 10000, &quot;bond_denom&quot;: &quot;stake&quot;, &quot;min_commission_rate&quot;: &quot;0.000000000000000000&quot;, &quot;validator_bond_factor&quot;: &quot;-1.000000000000000000&quot;, &quot;global_liquid_staking_cap&quot;: &quot;1.000000000000000000&quot;, &quot;validator_liquid_staking_cap&quot;: &quot;1.000000000000000000&quot; }   We will use draft-proposal to help us create a proposal file that we will later submit.  gaiad tx gov draft-proposal // running the command will start a terminal applet allowing you to choose the proposal type // 1st screen Use the arrow keys to navigate: ↓ ↑ → ← ? Select proposal type: text community-pool-spend software-upgrade cancel-software-upgrade ▸ other // choose this // 2nd screen ✔ other Use the arrow keys to navigate: ↓ ↑ → ← ? Select proposal message type:: ↑ /cosmos.staking.v1beta1.MsgUndelegate ▸ /cosmos.staking.v1beta1.MsgUpdateParams // choose this option /cosmos.staking.v1beta1.MsgValidatorBond /cosmos.upgrade.v1beta1.MsgCancelUpgrade ↓ /cosmos.upgrade.v1beta1.MsgSoftwareUpgrade   After choosing the /cosmos.staking.v1beta1.MsgUpdateParams message, the applet will allow you to set the message fields and some other proposal details. Upon completion, the proposal will be available in the directory where you called the gaiad command inside the draft_proposal.json file.  Here is an example of the draft_proposal.json file:  { &quot;messages&quot;: [ { &quot;@type&quot;: &quot;/cosmos.staking.v1beta1.MsgUpdateParams&quot;, &quot;authority&quot;: &quot;cosmos10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn&quot;, &quot;params&quot;: { &quot;unbonding_time&quot;: &quot;86400s&quot;, &quot;max_validators&quot;: 100, &quot;max_entries&quot;: 7, &quot;historical_entries&quot;: 10000, &quot;bond_denom&quot;: &quot;uatom&quot;, &quot;min_commission_rate&quot;: &quot;0.050000000000000000&quot;, // we are changing this from 0.000000000000000000 &quot;validator_bond_factor&quot;: &quot;-1.000000000000000000&quot;, &quot;global_liquid_staking_cap&quot;: &quot;1.000000000000000000&quot;, &quot;validator_liquid_staking_cap&quot;: &quot;1.000000000000000000&quot; } } ], &quot;metadata&quot;: &quot;ipfs://CID&quot;, &quot;deposit&quot;: &quot;1000000uatom&quot;, &quot;title&quot;: &quot;Updating the staking params (min_comission_rate)&quot;, &quot;summary&quot;: &quot;This proposal will attempt to update the min_commission_rate staking parameter. During proposal creation and submission **all** proposal fields must be specified. Pay attention that you don't unintentionally specify different values for fields that you did not intend to change.&quot; }   Finally, we submit the proposal:  gaiad tx gov submit-proposal &lt;path_to_proposal.json&gt; --from &lt;submitter address&gt; \\ --chain-id cosmoshub-4 \\ --gas &lt;max gas allocated&gt; \\ --fees &lt;fees allocated&gt; \\ --node &lt;node address&gt; \\   Use gaiad tx gov --help to get more info about the CLI options, we will explain some options below:  --from is the account key that pays the transaction fee and deposit amount. This account key must be already saved in the keyring on your device and it must be an address you control (e.g. --from hypha-dev-wallet).--gas is the maximum amount of gas permitted to be used to process the transaction (e.g. --gas 500000). The more content there is in the description of your proposal, the more gas your transaction will consumeIf this number isn't high enough and there isn't enough gas to process your transaction, the transaction will fail.The transaction will only use the amount of gas needed to process the transaction. --fees is a flat-rate incentive for a validator to process your transaction. Many nodes use a minimum fee to disincentivize transaction spamming.7500uatom is equal to 0.0075 ATOM. --node is using an established node to send the transaction to the Cosmos Hub 4 network. For available nodes, please look at the Chain Registry.  Note: be careful what you use for --fees. A mistake here could result in spending hundreds or thousands of ATOMs accidentally, which cannot be recovered.  ","version":"Latest","tagName":"h3"},{"title":"Verifying your transaction​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#verifying-your-transaction","content":" After posting your transaction, your command line interface (gaiad) will provide you with the transaction's hash, which you can either query using gaiad or by searching the transaction hash using Mintscan. The hash should look something like this: 0506447AE8C7495DE970736474451CF23536DF8EA837FAF1CF6286565589AB57.  Alternatively, you can check your Tx status and information using:  gaiad q tx &lt;hash&gt;   ","version":"Latest","tagName":"h3"},{"title":"Troubleshooting a failed transaction​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#troubleshooting-a-failed-transaction","content":" There are a number of reasons why a transaction may fail. Here are two examples:  Running out of gas - The more data there is in a transaction, the more gas it will need to be processed. If you don't specify enough gas, the transaction will fail. Incorrect denomination - You may have specified an amount in 'utom' or 'atom' instead of 'uatom', causing the transaction to fail.  If you encounter a problem, try to troubleshoot it first, and then ask for help on the Cosmos Hub forum: https://forum.cosmos.network. We can learn from failed attempts and use them to improve upon this guide.  ","version":"Latest","tagName":"h3"},{"title":"Depositing funds after a proposal has been submitted​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#depositing-funds-after-a-proposal-has-been-submitted","content":" Sometimes a proposal is submitted without having the minimum token amount deposited yet. In these cases you would want to be able to deposit more tokens to get the proposal into the voting stage. In order to deposit tokens, you'll need to know what your proposal ID is after you've submitted your proposal. You can query all proposals by the following command:  gaiad q gov proposals   If there are a lot of proposals on the chain already, you can also filter by your own address. For the proposal above, that would be:  gaiad q gov proposals --depositor cosmos1hxv7mpztvln45eghez6evw2ypcw4vjmsmr8cdx   Once you have the proposal ID, this is the command to deposit extra tokens:  gaiad tx gov deposit &lt;proposal-id&gt; &lt;deposit_amount&gt; --from &lt;name&gt;   The amount per deposit is equal to min_deposit * min_deposit_ratio. Only uatom is supported as deposit denom. Transactions where deposit_amount &lt; (min_deposit * min_deposit_ratio) will be rejected.  ","version":"Latest","tagName":"h3"},{"title":"Submitting your proposal to the testnet​","type":1,"pageTitle":"Submitting a Proposal","url":"/main/governance/submitting#submitting-your-proposal-to-the-testnet","content":" Submitting to the testnet is identical to mainnet submissions aside from a few changes:  The chain-id is theta-testnet-001.The list of usable endpoints can be found here.You will need testnet tokens, not ATOM. There is a faucet available in the Developer Discord.  You may want to submit your proposal to the testnet chain before the mainnet for a number of reasons:  To see what the proposal description will look like.To signal that your proposal is about to go live on the mainnet.To share what the proposal will look like in advance with stakeholders.To test the functionality of the governance features. ","version":"Latest","tagName":"h3"},{"title":"Joining Testnet","type":0,"sectionRef":"#","url":"/main/hub-tutorials/join-testnet","content":"","keywords":"","version":"Latest"},{"title":"How to Join​","type":1,"pageTitle":"Joining Testnet","url":"/main/hub-tutorials/join-testnet#how-to-join","content":" You can set up a testnet node with a single command using one of the options below:  Run a shell script from the testnets repo ICS TestnetRelease testnet Run an Ansible playbook from the cosmos-ansible repo ICS TestnetRelease Testnet  ","version":"Latest","tagName":"h2"},{"title":"Create a Validator (Optional)​","type":1,"pageTitle":"Joining Testnet","url":"/main/hub-tutorials/join-testnet#create-a-validator-optional","content":" If you want to create a validator in either testnet, request tokens through the faucet Discord channel and follow the this guide. If you are creating a validator in the Release Testnet, you can disregard the instructions about joining live consumer chains.  ","version":"Latest","tagName":"h2"},{"title":"Upgrading Your Node​","type":1,"pageTitle":"Joining Testnet","url":"/main/hub-tutorials/join-testnet#upgrading-your-node","content":" Follow these instructions if you have a node that is already synced and wish to participate in a scheduled testnet software upgrade.  When the chain reaches the upgrade block height specified by a software upgrade proposal, the chain binary will halt and expect the new binary to be run (the system log will show ERR UPGRADE &quot;&lt;Upgrade name&gt;&quot; NEEDED at height: XXXX or something similar).  There are three ways you can update the binary:  Without Cosmovisor: You must build or download the new binary ahead of the upgrade. When the chain binary halts at the upgrade height:  Stop the gaiad service with systemctl stop gaiad.service.Build or download the new binary, replacing the existing ~/go/bin one.Start the gaiad service with systemctl start gaiad.service.  With Cosmovisor: You must build or download the new binary and copy it to the appropriate folder ahead of the upgrade.With Cosmovisor: Using the auto-download feature, assuming the proposal includes the binaries for your system architecture.  The instructions below are for option 2. For more information on auto-download with Cosmovisor, see the relevant documentation in the Cosmos SDK repo.  If the environment variable DAEMON_ALLOW_DOWNLOAD_BINARIES is set to false, Cosmovisor will look for the new binary in a folder that matches the name of the upgrade specified in the software upgrade proposal.  ","version":"Latest","tagName":"h2"},{"title":"Cosmovisor Upgrade Example​","type":1,"pageTitle":"Joining Testnet","url":"/main/hub-tutorials/join-testnet#cosmovisor-upgrade-example","content":" Using the v17 upgrade as an example, the expected folder structure would look as follows:  .gaia └── cosmovisor ├── current ├── genesis │ └── bin | └── gaiad └── upgrades └── v17 └── bin └── gaiad   Prepare the upgrade directory  mkdir -p ~/.gaia/cosmovisor/upgrades/v17/bin   Download and install the new binary version.  cd $HOME/gaia git pull git checkout v17.0.0-rc0 make install # Copy the new binary to the v17 upgrade directory cp ~/go/bin/gaiad ~/.gaia/cosmovisor/upgrades/v17/bin/gaiad   When the upgrade height is reached, Cosmovisor will stop the gaiad binary, update the symlink from current to the relevant upgrade folder, and restart. After a few minutes, the node should start syncing blocks using the new binary. ","version":"Latest","tagName":"h3"},{"title":"Upgrading the Chain","type":0,"sectionRef":"#","url":"/main/hub-tutorials/live-upgrade-tutorial","content":"Upgrading the Chain This document demonstrates how a live upgrade can be performed on-chain through a governance process. Start the network and trigger upgrade # start a gaia application full-node $ gaiad start # set up the cli config $ gaiad config chain-id testing # create an upgrade governance proposal $ gaiad tx gov submit-proposal &lt;path-to-proposal-json&gt; --from &lt;name-or-key&gt; Where proposal json file contains MsgSoftwareUpgrade e.g. `{ &quot;messages&quot;: [ { &quot;@type&quot;: &quot;/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade&quot;, &quot;authority&quot;:&quot;cosmos10d07y265gmmuvt4z0w9aw880jnsr700j6zn9kn&quot; , &quot;plan&quot;: { &quot;name&quot;: &quot;plan name&quot;, &quot;height&quot;: &quot;1000&quot; , &quot;info&quot;: &quot;proposal info&quot; , &quot;upgraded_client_state&quot;: null } } ], &quot;metadata&quot;: &quot;ipfs://CID&quot;, &quot;deposit&quot;: &quot;10000000stake&quot;, &quot;title&quot;: &quot;proposal title&quot;, &quot;summary&quot;: &quot;proposal summary&quot; }` # once the proposal passes you can query the pending plan $ gaiad query upgrade plan Performing an upgrade Assuming the proposal passes the chain will stop at given upgrade height. You can stop and start the original binary all you want, but it will refuse to run after the upgrade height. We need a new binary with the upgrade handler installed. The logs should look something like: E[2019-11-05|12:44:18.913] UPGRADE &quot;&lt;plan-name&gt;&quot; NEEDED at height: &lt;desired-upgrade-height&gt;: module=main E[2019-11-05|12:44:18.914] CONSENSUS FAILURE!!! ... Note that the process will hang indefinitely (doesn't exit to avoid restart loops). So, you must manually kill the process and replace it with a new binary. Do so now with Ctrl+C or killall gaiad. In gaia/app/app.go, after upgrade.Keeper is initialized and set in the app, set the corresponding upgrade Handler with the correct &lt;plan-name&gt;: app.upgradeKeeper.SetUpgradeHandler(&quot;&lt;plan-name&gt;&quot;, func(ctx sdk.Context, plan upgrade.Plan) { // custom logic after the network upgrade has been executed }) Note that we panic on any error - this would cause the upgrade to fail if the migration could not be run, and no node would advance - allowing a manual recovery. If we ignored the errors, then we would proceed with an incomplete upgrade and have a very difficult time every recovering the proper state. Now, compile the new binary and run the upgraded code to complete the upgrade: # create a new binary of gaia with the added upgrade handler $ make install # Restart the chain using the new binary. You should see the chain resume from # the upgrade height: # `I[2019-11-05|12:48:15.184] applying upgrade &lt;plan-name&gt; at height: &lt;desired-upgrade-height&gt; module=main` $ gaiad start # verify there is no pending plan $ gaiad query upgrade plan # verify you can query the block header of the completed upgrade $ gaiad query upgrade applied &lt;plan-name&gt; ","keywords":"","version":"Latest"},{"title":"Interchain Security","type":0,"sectionRef":"#","url":"/main/interchain-security","content":"","keywords":"","version":"Latest"},{"title":"ICS features​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#ics-features","content":" Partial Set Security and Power Shaping bring benefits for both the consumer chains and validators:  ","version":"Latest","tagName":"h2"},{"title":"Top-N consumer chains​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#top-n-consumer-chains","content":" Validators inside the top-N percent of voting power are required to validate the consumer chain.  e.g. top-95 means that the 95% of the validators (by voting power) are required to run the consumer chain binary  ","version":"Latest","tagName":"h3"},{"title":"Opt-in consumer chains​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#opt-in-consumer-chains","content":" Only validators that opt to running a consumer chains are required to run the chain binary and become eligible for consumer chain rewards distribution.  ","version":"Latest","tagName":"h3"},{"title":"Parameter customization​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#parameter-customization","content":" Consumer chains gain the ability to customize the validator set to their needs:  define allow/denylistsset maximum number of validatorsset validator power cap  ","version":"Latest","tagName":"h3"},{"title":"Notable consumer chains​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#notable-consumer-chains","content":" Currently the Cosmos Hub has the following two Consumer Chains.  ","version":"Latest","tagName":"h2"},{"title":"Neutron​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#neutron","content":" Neutron, is a smart contracting platform, that was the first consumer chain onboarded. Neutron was onboarded as a consumer chain in May 2023, see Hub proposal 792 for more details.  ","version":"Latest","tagName":"h3"},{"title":"Stride​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#stride","content":" Stride, is a liquid staking provider, which aims to unlock liquidity for Cosmos Hub token holders. Stride was onboarded as a consumer chain in July 2023, see Hub proposal 799 for more details.  ","version":"Latest","tagName":"h3"},{"title":"Resources​","type":1,"pageTitle":"Interchain Security","url":"/main/interchain-security#resources","content":" For more information visit:  Interchain Security docs ","version":"Latest","tagName":"h2"},{"title":"Join the Cosmos Hub Mainnet","type":0,"sectionRef":"#","url":"/main/hub-tutorials/join-mainnet","content":"","keywords":"","version":"Latest"},{"title":"Release History​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#release-history","content":" use gaia v5.0.x (Delta) for queries of state between height 6,910,000 and 8,695,000use gaia v6.0.x (Vega) between 8,695,000 and 10,085,397use gaia v7.0.x (Theta) between 10,085,397 and 14,099,412use gaia v8.0.x (Rho) between 14,099,412 and 14,470,501use gaia v9.0.x (Lambda) between 14,470,501 and 15,213,800use gaia v9.1.x between 15,213,800 and 15,816,200use gaia v10.0.x between 15,816,200 and 16,596,000use gaia v11.x between 16,596,000 and 16,985,500use gaia v12.x between 16,985,500 and 17,380,000use gaia v13.x between 17,380,000 and 18,262,000use gaia v14.1.x between 18,262,000 and 19,639,600use gaia v15.1.x between 19,639,600 and 19,939,000use gaia v15.2.x between 19,939,000 and 20,440,500use gaia v16.x from 20,440,500 and 20,739,800use gaia v17.1.x from 20,739,800  This guide includes full instructions for joining the mainnet either as an archive/full node or a pruned node.  For instructions to bootstrap a node via Quicksync or State Sync, see the Quickstart Guide  For instructions to join as a validator, please also see the Validator Guide.  ","version":"Latest","tagName":"h2"},{"title":"Overview​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#overview","content":" Release History Overview ExplorersGetting StartedHardwareGeneral Configuration Initialize ChainGenesis FileSeeds &amp; PeersGas &amp; FeesPruning of StateREST APIGRPC Sync Options Blocksync Getting Started State SyncQuicksync SnapshotsCosmovisorRunning via Background ProcessExporting StateVerify Mainnet  ","version":"Latest","tagName":"h3"},{"title":"Explorers​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#explorers","content":" There are many explorers for the Cosmos Hub. For reference while setting up a node, here are a few recommendations:  Mintscan  NumiaPing.Pub  ","version":"Latest","tagName":"h2"},{"title":"Getting Started​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#getting-started","content":" Make sure the following prerequisites are completed:  Choose the proper hardware/server configuration. See the hardware guide.Ensure Gaia is properly installed. See the installation guide for a walk-through.Follow the configuration guide to initialize and prepare the node to sync with the network.  ","version":"Latest","tagName":"h2"},{"title":"Hardware​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#hardware","content":" Running a full archive node can be resource intensive as the full current cosmoshub-4 state is over 1.4TB. For those who wish to run state sync or use quicksync, the following hardware configuration is recommended:  Node Type\tRAM\tStorageValidator\t32GB\t500GB-2TB* Full\t16GB\t2TB Default\t16GB\t1TB  * Storage size for validators will depend on level of pruning.  ","version":"Latest","tagName":"h2"},{"title":"General Configuration​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#general-configuration","content":" Make sure to walk through the basic setup and configuration. Operators will need to initialize gaiad, download the genesis file for cosmoshub-4, and set persistent peers and/or seeds for startup.  ","version":"Latest","tagName":"h2"},{"title":"Initialize Chain​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#initialize-chain","content":" Choose a custom moniker for the node and initialize. By default, the init command creates the ~/.gaia directory with subfolders config and data. In the /config directory, the most important files for configuration are app.toml and config.toml.  gaiad init &lt;custom-moniker&gt;   Note: Monikers can contain only ASCII characters. Using Unicode characters is not supported and renders the node unreachable.  The moniker can be edited in the ~/.gaia/config/config.toml file:  # A custom human readable name for this node moniker = &quot;&lt;custom_moniker&gt;&quot;   ","version":"Latest","tagName":"h3"},{"title":"Genesis File​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#genesis-file","content":" Once the node is initialized, download the genesis file and move to the /config directory of the Gaia home directory.  wget https://raw.githubusercontent.com/cosmos/mainnet/master/genesis/genesis.cosmoshub-4.json.gz gzip -d genesis.cosmoshub-4.json.gz mv genesis.cosmoshub-4.json ~/.gaia/config/genesis.json   ","version":"Latest","tagName":"h3"},{"title":"Seeds & Peers​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#seeds--peers","content":" Upon startup the node will need to connect to peers. If there are specific nodes a node operator is interested in setting as seeds or as persistent peers, this can be configured in ~/.gaia/config/config.toml  # Comma separated list of seed nodes to connect to seeds = &quot;&lt;seed node id 1&gt;@&lt;seed node address 1&gt;:26656,&lt;seed node id 2&gt;@&lt;seed node address 2&gt;:26656&quot; # Comma separated list of nodes to keep persistent connections to persistent_peers = &quot;&lt;node id 1&gt;@&lt;node address 1&gt;:26656,&lt;node id 2&gt;@&lt;node address 2&gt;:26656&quot;   Node operators can optionally download the Quicksync address book. Make sure to move this to ~/.gaia/config/addrbook.json.  ","version":"Latest","tagName":"h3"},{"title":"Gas & Fees​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#gas--fees","content":" On Cosmos Hub mainnet, the accepted denom is uatom, where 1atom = 1.000.000uatom  Transactions on the Cosmos Hub network need to include a transaction fee in order to be processed. This fee pays for the gas required to run the transaction. The formula is the following:  fees = ceil(gas * gasPrices)   Gas is the smallest unit or pricing value required to perform a transaction. Different transactions require different amounts of gas. The gas amount for a transaction is calculated as it is being processed, but it can be estimated beforehand by using the auto value for the gas flag. The gas estimate can be adjusted with the flag --gas-adjustment (default 1.0) to ensure enough gas is provided for the transaction.  The gasPrice is the price of each unit of gas. Each validator sets a min-gas-price value, and will only include transactions that have a gasPrice greater than their min-gas-price.  The transaction fees are the product of gas and gasPrice. The higher the gasPrice/fees, the higher the chance that a transaction will get included in a block.  For mainnet, the recommended gas-prices is 0.0025uatom.  A full-node keeps unconfirmed transactions in its mempool. In order to protect it from spam, it is better to set a minimum-gas-prices that the transaction must meet in order to be accepted in the node's mempool. This parameter can be set in ~/.gaia/config/app.toml.  # The minimum gas prices a validator is willing to accept for processing a # transaction. A transaction's fees must meet the minimum of any denomination # specified in this config (e.g. 0.25token1;0.0001token2). minimum-gas-prices = &quot;0.0025uatom&quot;   The initial recommended min-gas-prices is 0.0025uatom, but this can be changed later.  ","version":"Latest","tagName":"h3"},{"title":"Pruning of State​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#pruning-of-state","content":" Note: This is an optional configuration.  There are four strategies for pruning state. These strategies apply only to state and do not apply to block storage. A node operator may want to consider custom pruning if node storage is a concern or there is an interest in running an archive node.  To set pruning, adjust the pruning parameter in the ~/.gaia/config/app.toml file. The following pruning state settings are available:  everything: Prune all saved states other than the current state.nothing: Save all states and delete nothing.default: Save the last 100 states and the state of every 10,000th block.custom: Specify pruning settings with the pruning-keep-recent, pruning-keep-every, and pruning-interval parameters.  By default, every node is in default mode which is the recommended setting for most environments. If a node operator wants to change their node's pruning strategy then this must be done before the node is initialized.  In ~/.gaia/config/app.toml  # default: the last 100 states are kept in addition to every 500th state; pruning at 10 block intervals # nothing: all historic states will be saved, nothing will be deleted (i.e. archiving node) # everything: all saved states will be deleted, storing only the current state; pruning at 10 block intervals # custom: allow pruning options to be manually specified through 'pruning-keep-recent', 'pruning-keep-every', and 'pruning-interval' pruning = &quot;custom&quot; # These are applied if and only if the pruning strategy is custom. pruning-keep-recent = &quot;10&quot; pruning-keep-every = &quot;1000&quot; pruning-interval = &quot;10&quot;   Passing a flag when starting gaia will always override settings in the app.toml file. To change the node's pruning setting to everything mode then pass the ---pruning everything flag when running gaiad start.  Note: If running the node with pruned state, it will not be possible to query the heights that are not in the node's store.  ","version":"Latest","tagName":"h3"},{"title":"REST API​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#rest-api","content":" Note: This is an optional configuration.  By default, the REST API is disabled. To enable the REST API, edit the ~/.gaia/config/app.toml file, and set enable to true in the [api] section.  ############################################################################### ### API Configuration ### ############################################################################### [api] # Enable defines if the API server should be enabled. enable = true # Swagger defines if swagger documentation should automatically be registered. swagger = false # Address defines the API server to listen on. address = &quot;tcp://0.0.0.0:1317&quot;   Optionally activate swagger by setting swagger to true or change the port of the REST API in the parameter address. After restarting the application, access the REST API on &lt;NODE IP&gt;:1317.  ","version":"Latest","tagName":"h3"},{"title":"GRPC​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#grpc","content":" Note: This is an optional configuration.  By default, gRPC is enabled on port 9090. The ~/.gaia/config/app.toml file is where changes can be made in the gRPC section. To disable the gRPC endpoint, set enable to false. To change the port, use the address parameter.  ############################################################################### ### gRPC Configuration ### ############################################################################### [grpc] # Enable defines if the gRPC server should be enabled. enable = true # Address defines the gRPC server address to bind to. address = &quot;0.0.0.0:9090&quot;   ","version":"Latest","tagName":"h3"},{"title":"Sync Options​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#sync-options","content":" There are three main ways to sync a node on the Cosmos Hub; Blocksync, State Sync, and Quicksync. See the matrix below for the Hub's recommended setup configuration. This guide will focus on syncing two types of common nodes; full and pruned. For further information on syncing to run a validator node, see the section on Validators.  There are two types of concerns when deciding which sync option is right. Data integrity refers to how reliable the data provided by a subset of network participants is. Historical data refers to how robust and inclusive the chain’s history is.  \tLow Data Integrity\tHigh Data IntegrityMinimal Historical Data\tQuicksync - Pruned\tState Sync Moderate Historical Data\tQuicksync - Default Full Historical Data\tQuicksync - Archive\tBlocksync  If a node operator wishes to run a full node, it is possible to start from scratch but will take a significant amount of time to catch up. Node operators not concerned with rebuilding original state from the beginning of cosmoshub-4 can also leverage Quicksync's available archive history.  For operators interested in bootstrapping a pruned node, either Quicksync or State Sync would be sufficient.  Make sure to consult the hardware section for guidance on the best configuration for the type of node operating.  ","version":"Latest","tagName":"h2"},{"title":"Blocksync​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#blocksync","content":" Blocksync is faster than traditional consensus and syncs the chain from genesis by downloading blocks and verifying against the merkle tree of validators. For more information see CometBFT's Blocksync Docs  When syncing via Blocksync, node operators will either need to manually upgrade the chain or set up Cosmovisor to upgrade automatically.  It is possible to sync from previous versions of the Cosmos Hub. See the matrix below for the correct gaia version. See the mainnet archive for historical genesis files.  Chain Id\tGaia Versioncosmoshub-4\tv4.2.1 cosmoshub-3\tv2.0.x cosmoshub-2\tv1.0.x cosmoshub-1\tv0.0.x  Getting Started​  Start Gaia to begin syncing with the skip-invariants flag. For more information on this see Verify Mainnet.  gaiad start --x-crisis-skip-assert-invariants   The node will begin rebuilding state until it hits the first upgrade height at block 6910000. If Cosmovisor is set up then there's nothing else to do besides wait, otherwise the node operator will need to perform the manual upgrade twice.  ","version":"Latest","tagName":"h3"},{"title":"State Sync​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#state-sync","content":" State Sync is an efficient and fast way to bootstrap a new node, and it works by replaying larger chunks of application state directly rather than replaying individual blocks or consensus rounds. For more information, see CometBFT's State Sync docs.  To enable state sync, visit an explorer to get a recent block height and corresponding hash. A node operator can choose any height/hash in the current bonding period, but as the recommended snapshot period is 1000 blocks, it is advised to choose something close to current height - 1000.  With the block height and hash selected, update the configuration in ~/.gaia/config/config.toml to set enable = true, and populate the trust_height and trust_hash. Node operators can configure the rpc servers to a preferred provider, but there must be at least two entries. It is important that these are two rpc servers the node operator trusts to verify component parts of the chain state. While not recommended, uniqueness is not currently enforced, so it is possible to duplicate the same server in the list and still sync successfully.  Note: In the future, the RPC server requirement will be deprecated as state sync is moved to the p2p layer in Tendermint 0.38.  ####################################################### ### State Sync Configuration Options ### ####################################################### [statesync] # State sync rapidly bootstraps a new node by discovering, fetching, and restoring a state machine # snapshot from peers instead of fetching and replaying historical blocks. Requires some peers in # the network to take and serve state machine snapshots. State sync is not attempted if the node # has any local state (LastBlockHeight &gt; 0). The node will have a truncated block history, # starting from the height of the snapshot. enable = true # RPC servers (comma-separated) for light client verification of the synced state machine and # retrieval of state data for node bootstrapping. Also needs a trusted height and corresponding # header hash obtained from a trusted source, and a period during which validators can be trusted. # # For Cosmos SDK-based chains, trust_period should usually be about 2/3 of the unbonding time (~2 # weeks) during which they can be financially punished (slashed) for misbehavior. rpc_servers = &quot;https://cosmos-rpc.polkachu.com:443,https://rpc-cosmoshub-ia.cosmosia.notional.ventures:443&quot; trust_height = 8959784 trust_hash = &quot;3D8F12EA302AEDA66E80939F7FC785206692F8B6EE6F727F1655F1AFB6A873A5&quot; trust_period = &quot;168h0m0s&quot;   Start Gaia to begin state sync. It may take some time for the node to acquire a snapshot, but the command and output should look similar to the following:  $ gaiad start --x-crisis-skip-assert-invariants ... &gt; INF Discovered new snapshot format=1 hash=&quot;0x000...&quot; height=8967000 module=statesync ... &gt; INF Fetching snapshot chunk chunk=4 format=1 height=8967000 module=statesync total=45 &gt; INF Applied snapshot chunk to ABCI app chunk=0 format=1 height=8967000 module=statesync total=45   Once state sync successfully completes, the node will begin to process blocks normally. If state sync fails and the node operator encounters the following error: State sync failed err=&quot;state sync aborted&quot;, either try restarting gaiad or running gaiad unsafe-reset-all (make sure to backup any configuration and history before doing this).  ","version":"Latest","tagName":"h3"},{"title":"Quicksync​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#quicksync","content":" Quicksync.io offers several daily snapshots of the Cosmos Hub with varying levels of pruning (archive 1.4TB, default 540GB, and pruned 265GB). For downloads and installation instructions, visit the Cosmos Quicksync guide.  ","version":"Latest","tagName":"h3"},{"title":"Snapshots​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#snapshots","content":" Saving and serving snapshots helps nodes rapidly join the network. Snapshots are now enabled by default effective 1/20/21.  While not advised, if a node operator needs to customize this feature, it can be configured in ~/.gaia/config/app.toml. The Cosmos Hub recommends setting this value to match pruning-keep-every in config.toml.  Note: It is highly recommended that node operators use the same value for snapshot-interval in order to aid snapshot discovery. Discovery is easier when more nodes are serving the same snapshots.  In app.toml  ############################################################################### ### State Sync Configuration ### ############################################################################### # State sync snapshots allow other nodes to rapidly join the network without replaying historical # blocks, instead downloading and applying a snapshot of the application state at a given height. [state-sync] # snapshot-interval specifies the block interval at which local state sync snapshots are # taken (0 to disable). Must be a multiple of pruning-keep-every. snapshot-interval = 1000 # snapshot-keep-recent specifies the number of recent snapshots to keep and serve (0 to keep all). snapshot-keep-recent = 10   ","version":"Latest","tagName":"h2"},{"title":"Cosmovisor​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#cosmovisor","content":" Cosmovisor is a process manager developed to relieve node operators of having to manually intervene every time there is an upgrade. Cosmovisor monitors the governance module for upgrade proposals; it will take care of downloading the new binary, stopping the old one, switching to the new one, and restarting.  For more information on how to run a node via Cosmovisor, check out the docs.  ","version":"Latest","tagName":"h2"},{"title":"Running via Background Process​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#running-via-background-process","content":" To run the node in a background process with automatic restarts, it's recommended to use a service manager like systemd. To set this up run the following:  sudo tee /etc/systemd/system/&lt;service name&gt;.service &gt; /dev/null &lt;&lt;EOF [Unit] Description=Gaia Daemon After=network-online.target [Service] User=$USER ExecStart=$(which gaiad) start Restart=always RestartSec=3 LimitNOFILE=4096 [Install] WantedBy=multi-user.target EOF   If using Cosmovisor then make sure to add the following:  Environment=&quot;DAEMON_HOME=$HOME/.gaia&quot; Environment=&quot;DAEMON_NAME=gaiad&quot; Environment=&quot;DAEMON_ALLOW_DOWNLOAD_BINARIES=false&quot; Environment=&quot;DAEMON_RESTART_AFTER_UPGRADE=true&quot;   After the LimitNOFILE line and replace $(which gaiad) with $(which cosmovisor).  Run the following to setup the daemon:  sudo -S systemctl daemon-reload sudo -S systemctl enable &lt;service name&gt;   Then start the process and confirm that it's running.  sudo -S systemctl start &lt;service name&gt; sudo service &lt;service name&gt; status   ","version":"Latest","tagName":"h2"},{"title":"Exporting State​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#exporting-state","content":" Gaia can dump the entire application state into a JSON file. This application state dump is useful for manual analysis and can also be used as the genesis file of a new network.  Note: The node can't be running while exporting state, otherwise the operator can expect a resource temporarily unavailable error.  Export state with:  gaiad export &gt; [filename].json   It is also possible to export state from a particular height (at the end of processing the block of that height):  gaiad export --height [height] &gt; [filename].json   If planning to start a new network from the exported state, export with the --for-zero-height flag:  gaiad export --height [height] --for-zero-height &gt; [filename].json   ","version":"Latest","tagName":"h2"},{"title":"Verify Mainnet​","type":1,"pageTitle":"Join the Cosmos Hub Mainnet","url":"/main/hub-tutorials/join-mainnet#verify-mainnet","content":" Help to prevent a catastrophe by running invariants on each block on your full node. In essence, by running invariants the node operator ensures that the state of mainnet is the correct expected state. One vital invariant check is that no atoms are being created or destroyed outside of expected protocol, however there are many other invariant checks each unique to their respective module. Because invariant checks are computationally expensive, they are not enabled by default. To run a node with these checks start your node without the --x-crisis-skip-assert-invariants flag:  gaiad start   If an invariant is broken on the node, it will panic and prompt the operator to send a transaction which will halt mainnet. For example the provided message may look like:  invariant broken: loose token invariance: pool.NotBondedTokens: 100 sum of account tokens: 101 CRITICAL please submit the following transaction: gaiad tx crisis invariant-broken staking supply  ","version":"Latest","tagName":"h2"},{"title":"Upgrade Your Node","type":0,"sectionRef":"#","url":"/main/hub-tutorials/upgrade-node","content":"","keywords":"","version":"Latest"},{"title":"Cosmovisor​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#cosmovisor","content":" The Cosmos SDK provides a convenient process manager that wraps around the gaiad binary and can automatically swap in new binaries upon a successful governance upgrade proposal. Cosmovisor is entirely optional but recommended. More information can be found in cosmos.network docs and cosmos-sdk/cosmovisor/readme.  ","version":"Latest","tagName":"h2"},{"title":"Setup​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#setup","content":" To get started with Cosmovisor first download it  go install github.com/cosmos/cosmos-sdk/cosmovisor/cmd/cosmovisor   Set up the environment variables  echo &quot;# Setup Cosmovisor&quot; &gt;&gt; ~/.profile echo &quot;export DAEMON_NAME=gaiad&quot; &gt;&gt; ~/.profile echo &quot;export DAEMON_HOME=$HOME/.gaia&quot; &gt;&gt; ~/.profile source ~/.profile   Create the appropriate directories  mkdir -p ~/.gaia/cosmovisor/upgrades mkdir -p ~/.gaia/cosmovisor/genesis/bin/ cp $(which gaiad) ~/.gaia/cosmovisor/genesis/bin/ # verify the setup. # It should return the same version as gaiad cosmovisor version   Now gaiad can start by running  cosmovisor start   ","version":"Latest","tagName":"h3"},{"title":"Preparing an Upgrade​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#preparing-an-upgrade","content":" Cosmovisor will continually poll the $DAEMON_HOME/data/upgrade-info.json for new upgrade instructions. When an upgrade is ready, node operators can download the new binary and place it under $DAEMON_HOME/cosmovisor/upgrades/&lt;name&gt;/bin where &lt;name&gt; is the URI-encoded name of the upgrade as specified in the upgrade module plan.  It is possible to have Cosmovisor automatically download the new binary. To do this set the following environment variable.  export DAEMON_ALLOW_DOWNLOAD_BINARIES=true   ","version":"Latest","tagName":"h3"},{"title":"Manual Software Upgrade​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#manual-software-upgrade","content":" First, stop your instance of gaiad. Next, upgrade the software:  cd gaia git fetch --all &amp;&amp; git checkout &lt;new_version&gt; make install   tip NOTE: If you have issues at this step, please check that you have the latest stable version of GO installed.  See the testnet repo for details on which version is needed for which public testnet, and the Gaia release page for details on each release.  Your full node has been cleanly upgraded! If there are no breaking changes then you can simply restart the node by running:  gaiad start   ","version":"Latest","tagName":"h2"},{"title":"Upgrade Genesis File​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#upgrade-genesis-file","content":" warning If the new version you are upgrading to has breaking changes, you will have to restart your chain. If it is not breaking, you can skip to Restart  To upgrade the genesis file, you can either fetch it from a trusted source or export it locally.  ","version":"Latest","tagName":"h2"},{"title":"Fetching from a Trusted Source​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#fetching-from-a-trusted-source","content":" If you are joining the mainnet, fetch the genesis from the mainnet repo. If you are joining a public testnet, fetch the genesis from the appropriate testnet in the testnet repo. Otherwise, fetch it from your trusted source.  Save the new genesis as new_genesis.json. Then replace the old genesis.json with new_genesis.json  cd $HOME/.gaia/config cp -f genesis.json new_genesis.json mv new_genesis.json genesis.json   Then, go to the reset data section.  ","version":"Latest","tagName":"h3"},{"title":"Exporting State to a New Genesis Locally​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#exporting-state-to-a-new-genesis-locally","content":" If you were running a node in the previous version of the network and want to build your new genesis locally from a state of this previous network, use the following command:  cd $HOME/.gaia/config gaiad export --for-zero-height --height=&lt;export-height&gt; &gt; new_genesis.json   The command above take a state at a certain height &lt;export-height&gt; and turns it into a new genesis file that can be used to start a new network.  Then, replace the old genesis.json with new_genesis.json.  cp -f genesis.json new_genesis.json mv new_genesis.json genesis.json   At this point, you might want to run a script to update the exported genesis into a genesis that is compatible with your new version. For example, the attributes of the Account type changed, a script should query encoded account from the account store, unmarshal them, update their type, re-marshal and re-store them. You can find an example of such script here.  ","version":"Latest","tagName":"h3"},{"title":"Reset Data​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#reset-data","content":" warning If the version &lt;new_version&gt; you are upgrading to is not breaking from the previous one, you should not reset the data. If it is not breaking, you can skip to Restart  warning If you are running a validator node on the mainnet, always be careful when doing gaiad unsafe-reset-all. You should never use this command if you are not switching chain-id.  ::: danger IMPORTANT Make sure that every node has a unique priv_validator.json. Do not copy the priv_validator.json from an old node to multiple new nodes. Running two nodes with the same priv_validator.json will cause you to get slashed due to double signing! :::  First, remove the outdated files and reset the data. If you are running a validator node, make sure you understand what you are doing before resetting.  gaiad unsafe-reset-all   Your node is now in a pristine state while keeping the original priv_validator.json and config.toml. If you had any sentry nodes or full nodes setup before, your node will still try to connect to them, but may fail if they haven't also been upgraded.  ","version":"Latest","tagName":"h2"},{"title":"Restart​","type":1,"pageTitle":"Upgrade Your Node","url":"/main/hub-tutorials/upgrade-node#restart","content":" If there are no breaking changes then you can simply restart the node by running:  gaiad start  ","version":"Latest","tagName":"h2"},{"title":"Interacting with Gaiad (CLI)","type":0,"sectionRef":"#","url":"/main/hub-tutorials/gaiad","content":"","keywords":"","version":"Latest"},{"title":"Gaia Daemon​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#gaia-daemon","content":" gaiad is the tool that enables you to interact with the node that runs on the Cosmos Hub network, whether you run it yourself or not. Let us set it up properly. In order to install it, follow the installation procedure.  ","version":"Latest","tagName":"h2"},{"title":"Setting up gaiad​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#setting-up-gaiad","content":" The main command used to set up gaiad is the following:  gaiad config &lt;flag&gt; &lt;value&gt;   It allows you to set a default value for each given flag.  First, set up the address of the full-node you want to connect to:  gaiad config node &lt;host&gt;:&lt;port&gt; # example: gaiad config node https://77.87.106.33:26657   If you run your own full-node, just use tcp://localhost:26657 as the address.  Finally, let us set the chain-id of the blockchain we want to interact with:  gaiad config chain-id cosmoshub-2   ","version":"Latest","tagName":"h3"},{"title":"Keys​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#keys","content":" Keyring​  The keyring holds the private/public keypairs used to interact with a node. For instance, a validator key needs to be set up before running the blockchain node, so that blocks can be correctly signed. The private key can be stored in different locations, called &quot;backends&quot;, such as a file or the operating system's own key storage.  Headless environments are recommended to use either the file or pass backends. More information is available at the SDK documentation page.  Key Types​  There are three types of key representations that are used:  cosmos Derived from account keys generated by gaiad keys addUsed to receive fundse.g. cosmos15h6vd5f0wqps26zjlwrc6chah08ryu4hzzdwhc cosmosvaloper Used to associate a validator to its operatorUsed to invoke staking commandse.g. cosmosvaloper1carzvgq3e6y3z5kz5y6gxp3wpy3qdrv928vyah cosmospub Derived from account keys generated by gaiad keys adde.g. cosmospub1zcjduc3q7fu03jnlu2xpl75s2nkt7krm6grh4cc5aqth73v0zwmea25wj2hsqhlqzm cosmosvalconspub Generated when the node is created with gaiad init.Get this value with gaiad tendermint show-validatore.g. cosmosvalconspub1zcjduepq0ms2738680y72v44tfyqm3c9ppduku8fs6sr73fx7m666sjztznqzp2emf  Migrate Keys From Legacy On-Disk Keybase To OS Built-in Secret Store​  Older versions of gaiad used store keys in the user's home directory. If you are migrating from an old version of gaiad you will need to migrate your old keys into your operating system's credentials storage by running the following command:  gaiad keys migrate   The command will prompt for every passphrase. If a passphrase is incorrect, it will skip the respective key.  Generate Keys​  You'll need an account private and public key pair (a.k.a. sk, pk respectively) to be able to receive funds, send txs, bond tx, etc.  To generate a new secp256k1 key:  gaiad keys add &lt;account_name&gt;   The output of the above command will contain a seed phrase. It is recommended to save the seed phrase in a safe place so that in case you forget the password of the operating system's credentials store, you could eventually regenerate the key from the seed phrase with the following command:  gaiad keys add --recover   If you check your private keys, you'll now see &lt;account_name&gt;:  gaiad keys show &lt;account_name&gt;   View the validator operator's address via:  gaiad keys show &lt;account_name&gt; --bech=val   You can see all your available keys by typing:  gaiad keys list   View the validator pubkey for your node by typing:  gaiad tendermint show-validator   Note that this is the Tendermint signing key, not the operator key you will use in delegation transactions.  We strongly recommend NOT using the same passphrase for multiple keys. The CometBFT team and the Interchain Foundation will not be responsible for the loss of funds.  Generate Multisig Public Keys​  You can generate and print a multisig public key by typing:  gaiad keys add --multisig=name1,name2,name3[...] --multisig-threshold=K new_key_name   K is the minimum number of private keys that must have signed the transactions that carry the public key's address as signer.  The --multisig flag must contain the name of public keys that will be combined into a public key that will be generated and stored as new_key_name in the local database. All names supplied through --multisig must already exist in the local database. Unless the flag --nosort is set, the order in which the keys are supplied on the command line does not matter, i.e. the following commands generate two identical keys:  gaiad keys add --multisig=foo,bar,baz --multisig-threshold=2 multisig_address gaiad keys add --multisig=baz,foo,bar --multisig-threshold=2 multisig_address   Multisig addresses can also be generated on-the-fly and printed through the which command:  gaiad keys show --multisig-threshold K name1 name2 name3 [...]   For more information regarding how to generate, sign and broadcast transactions with a multi signature account see Multisig Transactions.  ","version":"Latest","tagName":"h3"},{"title":"Tx Broadcasting​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#tx-broadcasting","content":" When broadcasting transactions, gaiad accepts a --broadcast-mode flag. This flag can have a value of sync (default), async, or block, where sync makes the client return a CheckTx response, async makes the client return immediately, and block makes the client wait for the tx to be committed (or timing out).  It is important to note that the block mode should not be used in most circumstances. This is because broadcasting can timeout but the tx may still be included in a block. This can result in many undesirable situations. Therefore, it is best to use sync or async and query by tx hash to determine when the tx is included in a block.  ","version":"Latest","tagName":"h3"},{"title":"Fees & Gas​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#fees--gas","content":" The Cosmos Hub uses the x/feemarket module to dynamically vary the gas price based on demand.  You need to specify a sufficient gas price or total fees to ensure that your transaction is included in a block, e.g.  gaiad tx bank send ... --fees=50000uatom   or  gaiad tx bank send ... --gas-prices=0.0025uatom   To find out more about the current minimal gas price, you can query the feemarket module:  gaiad q feemarket gas-prices   or  gaiad q feemarket gas-prices uatom   which will output the current gas price similar to this:  price: amount: &quot;0.005&quot; denom: uatom   For more information, check out how to query the feemarket, or check out the feemarket integration guide.  ","version":"Latest","tagName":"h3"},{"title":"Account​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#account","content":" Get Tokens​  On a testnet, getting tokens is usually done via a faucet.  Query Account Balance​  After receiving tokens to your address, you can view your account's balance by typing:  gaiad query account account_cosmos   Note When you query an account balance with zero tokens, you will get this error: No account with address &lt;account_cosmos&gt; was found in the state. This can also happen if you fund the account before your node has fully synced with the chain. These are both normal.  ","version":"Latest","tagName":"h3"},{"title":"Send Tokens​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#send-tokens","content":" The following command could be used to send coins from one account to another:  gaiad tx bank send sender_key_name_or_address recipient_address 10faucetToken \\ --chain-id=chain_id   The amount argument accepts the format value|coin_name.  You may want to cap the maximum gas that can be consumed by the transaction via the --gas flag. If you pass --gas=auto, the gas supply will be automatically estimated before executing the transaction. Gas estimate might be inaccurate as state changes could occur in between the end of the simulation and the actual execution of a transaction, thus an adjustment is applied on top of the original estimate in order to ensure the transaction is broadcasted successfully. The adjustment can be controlled via the --gas-adjustment flag, whose default value is 1.0.  Now, view the updated balances of the origin and destination accounts:  gaiad query account account_cosmos gaiad query account destination_cosmos   You can also check your balance at a given block by using the --block flag:  gaiad query account account_cosmos --block=&lt;block_height&gt;   You can simulate a transaction without actually broadcasting it by appending the--dry-run flag to the command line:  gaiad tx bank send &lt;sender_key_name_or_address&gt; &lt;destination_cosmosaccaddr&gt; 10faucetToken \\ --chain-id=&lt;chain_id&gt; \\ --dry-run   Furthermore, you can build a transaction and print its JSON format to STDOUT by appending --generate-only to the list of the command line arguments:  gaiad tx bank send &lt;sender_address&gt; &lt;recipient_address&gt; 10faucetToken \\ --chain-id=&lt;chain_id&gt; \\ --generate-only &gt; unsignedSendTx.json   gaiad tx sign \\ --chain-id=&lt;chain_id&gt; \\ --from=&lt;key_name&gt; \\ unsignedSendTx.json &gt; signedSendTx.json   The --generate-only flag prevents gaiad from accessing the local keybase. Thus when such flag is supplied sender_key_name_or_address must be an address.  You can validate the transaction's signatures by typing the following:  gaiad tx sign --validate-signatures signedSendTx.json   You can broadcast the signed transaction to a node by providing the JSON file to the following command:  gaiad tx broadcast --node=&lt;node&gt; signedSendTx.json   ","version":"Latest","tagName":"h3"},{"title":"Query Transactions​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#query-transactions","content":" Matching a Set of Events​  You can use the transaction search command to query for transactions that match a specific set of events, which are added on every transaction.  Each event is composed by a key-value pair in the form of {eventType}.{eventAttribute}={value}. Events can also be combined to query for a more specific result using the &amp; symbol.  You can query transactions by events as follows:  gaiad query txs --events='message.sender=cosmos1...'   And for using multiple events:  gaiad query txs --events='message.sender=cosmos1...&amp;message.action=withdraw_delegator_reward'   The pagination is supported as well via page and limit:  gaiad query txs --events='message.sender=cosmos1...' --page=1 --limit=20   The action tag always equals the message type returned by the Type() function of the relevant message.  You can find a list of available events on each of the SDK modules:  Staking eventsGovernance eventsSlashing eventsDistribution eventsBank events  Matching a Transaction's Hash​  You can also query a single transaction by its hash using the following command:  gaiad query tx [hash]   ","version":"Latest","tagName":"h3"},{"title":"Slashing​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#slashing","content":" Unjailing​  To unjail your jailed validator  gaiad tx slashing unjail --from &lt;validator-operator-addr&gt;   Signing Info​  To retrieve a validator's signing info:  gaiad query slashing signing-info &lt;validator-pubkey&gt;   Query Parameters​  You can get the current slashing parameters via:  gaiad query slashing params   ","version":"Latest","tagName":"h3"},{"title":"Minting​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#minting","content":" You can query for the minting/inflation parameters via:  gaiad query mint params   To query for the current inflation value:  gaiad query mint inflation   To query for the current annual provisions value:  gaiad query mint annual-provisions   ","version":"Latest","tagName":"h3"},{"title":"Staking​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#staking","content":" Set up a Validator​  Please refer to the Validator Setup section for a more complete guide on how to set up a validator-candidate.  Delegate to a Validator​  On the upcoming mainnet, you can delegate atom to a validator. These delegators can receive part of the validator's fee revenue. Read more about the Cosmos Token Model.  Query Validators​  You can query the list of all validators of a specific chain:  gaiad query staking validators   If you want to get the information of a single validator you can check it with:  gaiad query staking validator &lt;account_cosmosval&gt;   Bond Tokens​  On the Cosmos Hub mainnet, we delegate uatom, where 1atom = 1000000uatom. Here's how you can bond tokens to a testnet validator (i.e. delegate):  gaiad tx staking delegate \\ --amount=10000000uatom \\ --validator=&lt;validator&gt; \\ --from=&lt;key_name&gt; \\ --chain-id=&lt;chain_id&gt;   &lt;validator&gt; is the operator address of the validator to which you intend to delegate. If you are running a local testnet, you can find this with:  gaiad keys show [name] --bech val   where [name] is the name of the key you specified when you initialized gaiad.  While tokens are bonded, they are pooled with all the other bonded tokens in the network. Validators and delegators obtain a percentage of shares that equal their stake in this pool.  Query Delegations​  Once submitted a delegation to a validator, you can see its information by using the following command:  gaiad query staking delegation &lt;delegator_addr&gt; &lt;validator_addr&gt;   Or if you want to check all your current delegations with distinct validators:  gaiad query staking delegations &lt;delegator_addr&gt;   Unbond Tokens​  If for any reason the validator misbehaves, or you just want to unbond a certain amount of tokens, use the following command.  gaiad tx staking unbond \\ &lt;validator_addr&gt; \\ 10atom \\ --from=&lt;key_name&gt; \\ --chain-id=&lt;chain_id&gt;   The unbonding will be automatically completed when the unbonding period has passed.  Query Unbonding-Delegations​  Once you begin an unbonding-delegation, you can see it's information by using the following command:  gaiad query staking unbonding-delegation &lt;delegator_addr&gt; &lt;validator_addr&gt;   Or if you want to check all your current unbonding-delegations with distinct validators:  gaiad query staking unbonding-delegations &lt;account_cosmos&gt;   Additionally, as you can get all the unbonding-delegations from a particular validator:  gaiad query staking unbonding-delegations-from &lt;account_cosmosval&gt;   Redelegate Tokens​  A redelegation is a type delegation that allows you to bond illiquid tokens from one validator to another:  gaiad tx staking redelegate \\ &lt;src-validator-operator-addr&gt; \\ &lt;dst-validator-operator-addr&gt; \\ 10atom \\ --from=&lt;key_name&gt; \\ --chain-id=&lt;chain_id&gt;   Here you can also redelegate a specific shares-amount or a shares-fraction with the corresponding flags.  The redelegation will be automatically completed when the unbonding period has passed.  Query Redelegations​  Once you begin a redelegation, you can see its information by using the following command:  gaiad query staking redelegation &lt;delegator_addr&gt; &lt;src_val_addr&gt; &lt;dst_val_addr&gt;   Or if you want to check all your current unbonding-delegations with distinct validators:  gaiad query staking redelegations &lt;account_cosmos&gt;   Additionally, as you can get all the outgoing redelegations from a particular validator:   gaiad query staking redelegations-from &lt;account_cosmosval&gt;   Query Parameters​  Parameters define high level settings for staking. You can get the current values by using:  gaiad query staking params   With the above command you will get the values for:  Unbonding timeMaximum numbers of validatorsCoin denomination for staking  All these values will be subject to updates through a governance process by ParameterChange proposals.  Query Pool​  A staking Pool defines the dynamic parameters of the current state. You can query them with the following command:  gaiad query staking pool   With the pool command you will get the values for:  Not-bonded and bonded tokensToken supplyCurrent annual inflation and the block in which the last inflation was processedLast recorded bonded shares  Query Delegations To Validator​  You can also query all of the delegations to a particular validator:   gaiad query delegations-to &lt;account_cosmosval&gt;   ","version":"Latest","tagName":"h3"},{"title":"Governance​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#governance","content":" Governance is the process from which users in the Cosmos Hub can come to consensus on software upgrades, parameters of the mainnet or signaling mechanisms through text proposals. This is done through voting on proposals, which will be submitted by ATOM holders on the mainnet.  Some considerations about the voting process:  Voting is done by bonded ATOM holders on a 1 bonded ATOM 1 vote basisDelegators inherit the vote of their validator if they don't voteVotes are tallied at the end of the voting period (2 weeks on mainnet) where each address can vote multiple times to update its Option value (paying the transaction fee each time), only the most recently cast vote will count as validVoters can choose between options Yes, No, NoWithVeto and AbstainAt the end of the voting period, a proposal is accepted iff: (YesVotes / (YesVotes+NoVotes+NoWithVetoVotes)) &gt; 1/2(NoWithVetoVotes / (YesVotes+NoVotes+NoWithVetoVotes)) &lt; 1/3((YesVotes+NoVotes+NoWithVetoVotes) / totalBondedStake) &gt;= quorum  For more information about the governance process and how it works, please check out the Governance module specification.  Create a Governance Proposal​  In order to create a governance proposal, you must submit an initial deposit along with a title and description. Various modules outside of governance may implement their own proposal types and handlers (eg. parameter changes), where the governance module itself supports Text proposals. Any module outside of governance has its command mounted on top of submit-proposal.  To submit a Text proposal:  gaiad tx gov submit-proposal \\ --title=&lt;title&gt; \\ --description=&lt;description&gt; \\ --type=&quot;Text&quot; \\ --deposit=&quot;1000000uatom&quot; \\ --from=&lt;name&gt; \\ --chain-id=&lt;chain_id&gt;   You may also provide the proposal directly through the --proposal flag which points to a JSON file containing the proposal.  To submit a parameter change proposal, you must provide a proposal file as its contents are less friendly to CLI input:  gaiad tx gov submit-proposal param-change &lt;path/to/proposal.json&gt; \\ --from=&lt;name&gt; \\ --chain-id=&lt;chain_id&gt;   Where proposal.json contains the following:  { &quot;title&quot;: &quot;Param Change&quot;, &quot;description&quot;: &quot;Update max validators&quot;, &quot;changes&quot;: [ { &quot;subspace&quot;: &quot;staking&quot;, &quot;key&quot;: &quot;MaxValidators&quot;, &quot;value&quot;: 105 } ], &quot;deposit&quot;: [ { &quot;denom&quot;: &quot;stake&quot;, &quot;amount&quot;: &quot;10000000&quot; } ] }   Currently parameter changes are evaluated but not validated, so it is very important that any value change is valid (ie. correct type and within bounds) for its respective parameter, eg. MaxValidators should be an integer and not a decimal. Proper vetting of a parameter change proposal should prevent this from happening (no deposits should occur during the governance process), but it should be noted regardless.  The SoftwareUpgrade is currently not supported as it's not implemented and currently does not differ from the semantics of a Text proposal.  Query Proposals​  Once created, you can now query information of the proposal:  gaiad query gov proposal &lt;proposal_id&gt;   Or query all available proposals:  gaiad query gov proposals   You can also query proposals filtered by voter or depositor by using the corresponding flags.  To query for the proposer of a given governance proposal:  gaiad query gov proposer &lt;proposal_id&gt;   Increase Deposit​  In order for a proposal to be broadcasted to the network, the amount deposited must be above a minDeposit value (initial value: 512000000uatom). If the proposal you previously created didn't meet this requirement, you can still increase the total amount deposited to activate it. Once the minimum deposit is reached, the proposal enters voting period:  gaiad tx gov deposit &lt;proposal_id&gt; &quot;10000000uatom&quot; \\ --from=&lt;name&gt; \\ --chain-id=&lt;chain_id&gt;   NOTE: Proposals that don't meet this requirement will be deleted after MaxDepositPeriod is reached.  Query Deposits​  Once a new proposal is created, you can query all the deposits submitted to it:  gaiad query gov deposits &lt;proposal_id&gt;   You can also query a deposit submitted by a specific address:  gaiad query gov deposit &lt;proposal_id&gt; &lt;depositor_address&gt;   Vote on a Proposal​  After a proposal's deposit reaches the MinDeposit value, the voting period opens. Bonded Atom holders can then cast vote on it:  gaiad tx gov vote &lt;proposal_id&gt; &lt;Yes/No/NoWithVeto/Abstain&gt; \\ --from=&lt;name&gt; \\ --chain-id=&lt;chain_id&gt;   Query Votes​  Check the vote with the option you just submitted:  gaiad query gov vote &lt;proposal_id&gt; &lt;voter_address&gt;   You can also get all the previous votes submitted to the proposal with:  gaiad query gov votes &lt;proposal_id&gt;   Query proposal tally results​  To check the current tally of a given proposal you can use the tally command:  gaiad query gov tally &lt;proposal_id&gt;   Query Governance Parameters​  To check the current governance parameters run:  gaiad query gov params   To query subsets of the governance parameters run:  gaiad query gov param voting gaiad query gov param tallying gaiad query gov param deposit   ","version":"Latest","tagName":"h3"},{"title":"Fee Distribution​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#fee-distribution","content":" Query Distribution Parameters​  To check the current distribution parameters, run:  gaiad query distribution params   Query distribution Community Pool​  To query all coins in the community pool which is under Governance control:  gaiad query distribution community-pool   Query outstanding rewards​  To check the current outstanding (un-withdrawn) rewards, run:  gaiad query distribution outstanding-rewards   Query Validator Commission​  To check the current outstanding commission for a validator, run:  gaiad query distribution commission &lt;validator_address&gt;   Query Validator Slashes​  To check historical slashes for a validator, run:  gaiad query distribution slashes &lt;validator_address&gt; &lt;start_height&gt; &lt;end_height&gt;   Query Delegator Rewards​  To check current rewards for a delegation (were they to be withdrawn), run:  gaiad query distribution rewards &lt;delegator_address&gt; &lt;validator_address&gt;   Query All Delegator Rewards​  To check all current rewards for a delegation (were they to be withdrawn), run:  gaiad query distribution rewards &lt;delegator_address&gt;   ","version":"Latest","tagName":"h3"},{"title":"Multisig Transactions​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#multisig-transactions","content":" Multisig transactions require signatures of multiple private keys. Thus, generating and signing a transaction from a multisig account involve cooperation among the parties involved. A multisig transaction can be initiated by any of the key holders, and at least one of them would need to import other parties' public keys into their Keybase and generate a multisig public key in order to finalize and broadcast the transaction.  For example, given a multisig key comprising the keys p1, p2, and p3, each of which is held by a distinct party, the user holding p1 would require to import both p2 and p3 in order to generate the multisig account public key:  gaiad keys add \\ p2 \\ --pubkey=cosmospub1addwnpepqtd28uwa0yxtwal5223qqr5aqf5y57tc7kk7z8qd4zplrdlk5ez5kdnlrj4 gaiad keys add \\ p3 \\ --pubkey=cosmospub1addwnpepqgj04jpm9wrdml5qnss9kjxkmxzywuklnkj0g3a3f8l5wx9z4ennz84ym5t gaiad keys add \\ p1p2p3 \\ --multisig-threshold=2 \\ --multisig=p1,p2,p3   A new multisig public key p1p2p3 has been stored, and its address will be used as signer of multisig transactions:  gaiad keys show --address p1p2p3   You may also view multisig threshold, pubkey constituents and respective weights by viewing the JSON output of the key or passing the --show-multisig flag:  gaiad keys show p1p2p3 -o json gaiad keys show p1p2p3 --show-multisig   The first step to create a multisig transaction is to initiate it on behalf of the multisig address created above:  gaiad tx bank send cosmos1570v2fq3twt0f0x02vhxpuzc9jc4yl30q2qned 1000000uatom \\ --from=&lt;multisig_address&gt; \\ --generate-only &gt; unsignedTx.json   The file unsignedTx.json contains the unsigned transaction encoded in JSON.p1 can now sign the transaction with its own private key:  gaiad tx sign \\ unsignedTx.json \\ --multisig=&lt;multisig_address&gt; \\ --from=p1 \\ --output-document=p1signature.json   Once the signature is generated, p1 transmits both unsignedTx.json andp1signature.json to p2 or p3, which in turn will generate their respective signature:  gaiad tx sign \\ unsignedTx.json \\ --multisig=&lt;multisig_address&gt; \\ --from=p2 \\ --output-document=p2signature.json   p1p2p3 is a 2-of-3 multisig key, therefore one additional signature is sufficient. Any the key holders can now generate the multisig transaction by combining the required signature files:  gaiad tx multisign \\ unsignedTx.json \\ p1p2p3 \\ p1signature.json p2signature.json &gt; signedTx.json   The transaction can now be sent to the node:  gaiad tx broadcast signedTx.json   ","version":"Latest","tagName":"h3"},{"title":"Shells Completion Scripts​","type":1,"pageTitle":"Interacting with Gaiad (CLI)","url":"/main/hub-tutorials/gaiad#shells-completion-scripts","content":" Completion scripts for popular UNIX shell interpreters such as Bash and Zshcan be generated through the completion command, which is available for bothgaiad and gaiad.  If you want to generate Bash completion scripts run the following command:  gaiad completion &gt; gaiad_completion gaiad completion &gt; gaiacli_completion   If you want to generate Zsh completion scripts run the following command:  gaiad completion --zsh &gt; gaiad_completion gaiad completion --zsh &gt; gaiacli_completion   On most UNIX systems, such scripts may be loaded in .bashrc or.bash_profile to enable Bash autocompletion: echo '. gaiad_completion' &gt;&gt; ~/.bashrc echo '. gaiacli_completion' &gt;&gt; ~/.bashrc Refer to the user's manual of your interpreter provided by your operating system for information on how to enable shell autocompletion. ","version":"Latest","tagName":"h2"},{"title":"Module List","type":0,"sectionRef":"#","url":"/main/modules","content":"","keywords":"","version":"Latest"},{"title":"cosmos-sdk​","type":1,"pageTitle":"Module List","url":"/main/modules#cosmos-sdk","content":" x/authx/authzx/bankx/capabilityx/consensusx/crisisx/distributionx/evidencex/feegrantx/govx/mintx/paramsx/slashingx/staking (with LSM changes)x/upgrade  ","version":"Latest","tagName":"h2"},{"title":"ibc-go​","type":1,"pageTitle":"Module List","url":"/main/modules#ibc-go","content":" transferinterchain accounts - hostinterchain accounts - controllerinterchain-security/providerpacketforwardibcfeeibc-rate-limiting  ","version":"Latest","tagName":"h2"},{"title":"gaia specific modules​","type":1,"pageTitle":"Module List","url":"/main/modules#gaia-specific-modules","content":" x/metaprotocolsx/liquidCosmos SDK LSM (deprecated)  ","version":"Latest","tagName":"h2"},{"title":"other modules​","type":1,"pageTitle":"Module List","url":"/main/modules#other-modules","content":" fee market ","version":"Latest","tagName":"h2"},{"title":"x/liquid","type":0,"sectionRef":"#","url":"/main/modules/liquid","content":"","keywords":"","version":"Latest"},{"title":"What are LSM shares​","type":1,"pageTitle":"x/liquid","url":"/main/modules/liquid#what-are-lsm-shares","content":" LSM shares are derivatives of the delegation shares. They are tied to a delegator and a validator pair and they represent the underlying delegation shares. By issuing LSM shares, the underlying staked ATOM can become &quot;liquid&quot; while still being slashable. The LSM shares are tokens that can be used in various DeFi protocols and transferred between users or between chains via IBC.  LSM shares are not fungible (as they are tied to a delegator/validator pair) and are issued by the Hub directly and thus don't depend on the security of any entity other than the Cosmos Hub itself.  ","version":"Latest","tagName":"h2"},{"title":"Benefits​","type":1,"pageTitle":"x/liquid","url":"/main/modules/liquid#benefits","content":" By tokenizing your staked ATOM into LSM shares, you maintain the benefits of staking while gaining flexibility in using these shares in DeFi protocols and platforms.  The LSM shares issued by the Hub are powering liquid staking derivatives like stATOM or dATOM and they are the backbone of the Hydro platform. ","version":"Latest","tagName":"h2"},{"title":"Cosmos SDK LSM","type":0,"sectionRef":"#","url":"/main/modules/lsm-migration","content":"","keywords":"","version":"Latest"},{"title":"Deprecation​","type":1,"pageTitle":"Cosmos SDK LSM","url":"/main/modules/lsm-migration#deprecation","content":" As of the v24.x release of Gaia, the Cosmos SDK based Liquid Staking Module is deprecated. The v24 release line will still have all the types from the forked SDK version, but all the API endpoints will be disabled.  ","version":"Latest","tagName":"h2"},{"title":"Migration​","type":1,"pageTitle":"Cosmos SDK LSM","url":"/main/modules/lsm-migration#migration","content":" The following outlines the key differences between the Cosmos SDK LSM and the x/liquid module, including message and API removals between the two, as well as parameter and limit changes. In general an effort was made to keep as much as possible the same between the two. Cases where removals were made were largely due to no longer be able to properly track state from outside the staking module.  The state associated with each account currently on a live network which is using the SDK LSM will be migrated to use the liquid module. There should be no change to the existing liquid staking denoms, tokenize share records, or rewards associated with any owner of a tokenize share record.  ","version":"Latest","tagName":"h2"},{"title":"Removals​","type":1,"pageTitle":"Cosmos SDK LSM","url":"/main/modules/lsm-migration#removals","content":" MsgUnbondValidatorMsgValidatorBond  Both the message types and the APIs for Validator Bonds have been removed. The min_self_delegation field in the SDK's staking module, which had previously been marked as deprecated, has been restored to its upstream state.  Note that if you created a validator after the field was deprecated, you may end up with 0 self delegation and amin_self_delegation of 1. This should be minimally invasive and will only affect you if you try to callEditValidator or potentially in an Unjail scenario. The resolution for this is to self delegate a minimal amount of stake.  Limits changes  The GlobalLiquidStakingCap and ValidatorLiquidStakingCap are now the only protocol limits and are enforced solely on tokenized shares through the x/liquid module itself. Previously this tracked delegations via ICA as counting towards these limits, but the new tallies do not take that into account.  Additionally, the liquid_shares field of the Validator object returned in staking module queries will no longer be updated. Its removal is planned in v25, but as of v24 that value will still show up, but will not be updated and is not used in limits calculations. To query the same information, you can use the QueryLiquidValidator request added to the x/liquid module.  ","version":"Latest","tagName":"h3"},{"title":"Migrations​","type":1,"pageTitle":"Cosmos SDK LSM","url":"/main/modules/lsm-migration#migrations","content":" All messages and APIs have been moved.  For protobuf, the types within the distribution and staking modules have all been moved to  gaia.liquid.v1beta1.*   For API paths, the module-specific paths have all been moved to  /gaia/liquid/v1beta1/   CLI interactions with the liquid module should use gaiad q liquid or gaiad tx liquid, etc. ","version":"Latest","tagName":"h3"},{"title":"Resources","type":0,"sectionRef":"#","url":"/main/resources","content":"Resources This folder contains resources on the gaia software. gaia genesis fileHD Wallets for gaiaLedger Integration for gaiaService Providers DocumentationReproducible Builds","keywords":"","version":"Latest"},{"title":"Cosmos Hub Archives","type":0,"sectionRef":"#","url":"/main/resources/archives","content":"","keywords":"","version":"Latest"},{"title":"Big Dipper​","type":1,"pageTitle":"Cosmos Hub Archives","url":"/main/resources/archives#big-dipper","content":" Cosmos Hub 1Cosmos Hub 2Cosmos Hub 3  If you want to make archives available to the community, feel free to open a PR to this file and add them. ","version":"Latest","tagName":"h3"},{"title":"Metaprotocol","type":0,"sectionRef":"#","url":"/main/modules/metaprotocols","content":"Metaprotocol The x/metaprotocol module adds support for encoding and decoding additional fields attached to transactions. extension_options and non_critical_extension_options are optional fields that can be used to attach data to valid transactions. The fields are validated by the blockchain, but they are not used in any way. The fields pass validation if they are provided as empty lists ([ ]) or they use a list of ExtensionData types. The application does not use the attached data but it does ensure that the correct type is provided and that it can be successfully unmarshalled. The attached data will be part of a block. tip Txs where extension_options or non_critical_extension_options are populated with a type other than /gaia.metaprotocols.ExtensionData are considered invalid and will be rejected. Here is an example of a correctly formed non_critical_extension_options field: { &quot;@type&quot;: &quot;/gaia.metaprotocols.ExtensionData&quot;, // must be this exact string &quot;protocol_id&quot;: &quot;some-protocol&quot;, &quot;protocol_version&quot;: &quot;1&quot;, &quot;data&quot;: &quot;&lt;base64 encoded bytes&gt;&quot; } Here is an example of a correctly populated non_critical_extension_options on a bank.MsgSend transaction: { &quot;body&quot;: { &quot;messages&quot;: [ { &quot;@type&quot;: &quot;/cosmos.bank.v1beta1.MsgSend&quot;, &quot;from_address&quot;: &quot;cosmos1ehpqg9sj09037uhe56sqktk30asn47asthyr22&quot;, &quot;to_address&quot;: &quot;cosmos1ehpqg9sj09037uhe56sqktk30asn47asthyr22&quot;, &quot;amount&quot;: [ { &quot;denom&quot;: &quot;uatom&quot;, &quot;amount&quot;: &quot;100&quot; } ] } ], &quot;memo&quot;: &quot;memo_smaller_than_512_bytes&quot;, &quot;timeout_height&quot;: &quot;0&quot;, &quot;extension_options&quot;: [], &quot;non_critical_extension_options&quot;: [ { &quot;@type&quot;: &quot;/gaia.metaprotocols.ExtensionData&quot;, &quot;protocol_id&quot;: &quot;some-protocol&quot;, &quot;protocol_version&quot;: &quot;1&quot;, &quot;data&quot;: &quot;&lt;base64 encoded bytes&gt;&quot; } ] }, &quot;auth_info&quot;: { &quot;signer_infos&quot;: [], &quot;fee&quot;: { &quot;amount&quot;: [], &quot;gas_limit&quot;: &quot;200000&quot;, &quot;payer&quot;: &quot;&quot;, &quot;granter&quot;: &quot;&quot; }, &quot;tip&quot;: null }, &quot;signatures&quot;: [] } ","keywords":"","version":"Latest"},{"title":"HD Wallets","type":0,"sectionRef":"#","url":"/main/resources/hd-wallets","content":"HD Wallets Accounts in Cosmos are Hierarchical Deterministic (HD) Wallets. Originally specified in Bitcoin's BIP32, HD wallets are a special kind of wallet that let users derive any number of accounts from a single seed. To understand what that means, let us first define some terminology: Wallet: Set of accounts obtained from a given seed.Account: A pair of public key/private key.Private Key: A private key is a secret piece of information used to sign messages. In the blockchain context, a private key identifies the owner of an account. The private key of a user should never be revealed to others.Public Key: A public key is a piece of information obtained by applying a one-way mathematical function on a private key. From it, an address can be derived. A private key cannot be found from a public key.Address: An address is a public string with a human-readable prefix that identifies an account. It is obtained by applying mathematical transformations to a public key.Digital Signature: A digital signature is a piece of cryptographic information that proves the owner of a given private key approved of a given message without revealing the private key.Seed: Same as Mnemonic.Mnemonic: A mnemonic is a sequence of words that is used as seed to derive private keys. The mnemonic is at the core of each wallet. NEVER LOSE YOUR MNEMONIC. WRITE IT DOWN ON A PIECE OF PAPER AND STORE IT SOMEWHERE SAFE. IF YOU LOSE IT, THERE IS NO WAY TO RETRIEVE IT. IF SOMEONE GAINS ACCESS TO IT, THEY GAIN ACCESS TO ALL THE ASSOCIATED ACCOUNTS. At the core of a HD wallet, there is a seed. From this seed, users can deterministically generate accounts. To generate an account from a seed, one-way mathematical transformations are applied. To decide which account to generate, the user specifies a path, generally an integer (0, 1, 2, ...). By specifying path to be 0 for example, the Wallet will generate Private Key 0 from the seed. Then, Public Key 0 can be generated from Private Key 0. Finally, Address 0 can be generated from Public Key 0. All these steps are one way only, meaning the Public Key cannot be found from the Address, the Private Key cannot be found from the Public Key, ... Account 0 Account 1 Account 2 +------------------+ +------------------+ +------------------+ | | | | | | | Address 0 | | Address 1 | | Address 2 | | ^ | | ^ | | ^ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | + | | + | | + | | Public key 0 | | Public key 1 | | Public key 2 | | ^ | | ^ | | ^ | | | | | | | | | | | | | | | | | | | | | | | | | | | | | + | | + | | + | | Private key 0 | | Private key 1 | | Private key 2 | | ^ | | ^ | | ^ | +------------------+ +------------------+ +------------------+ | | | | | | | | | +--------------------------------------------------------------------+ | | +---------+---------+ | | | Mnemonic (Seed) | | | +-------------------+ The process of derivating accounts from the seed is deterministic. This means that given the same path, the derived private key will always be the same. The funds stored in an account are controlled by the private key. This private key is generated using a one-way function from the mnemonic. If you lose the private key, you can retrieve it using the mnemonic. However, if you lose the mnemonic, you will lose access to all the derived private keys. Likewise, if someone gains access to your mnemonic, they gain access to all the associated accounts. danger Do not lose or share your 24 words with anyone. To prevent theft or loss of funds, it is best to keep multiple copies of your mnemonic stored in safe, secure places. If someone is able to gain access to your mnemonic, they will fully control the accounts associated with them.","keywords":"","version":"Latest"},{"title":"Building Gaia Deterministically","type":0,"sectionRef":"#","url":"/main/resources/reproducible-builds","content":"","keywords":"","version":"Latest"},{"title":"Prerequisites​","type":1,"pageTitle":"Building Gaia Deterministically","url":"/main/resources/reproducible-builds#prerequisites","content":" Make sure you have Docker installed on your system.  All the following instructions have been tested on Ubuntu 18.04.2 LTS with docker 20.10.2.  ","version":"Latest","tagName":"h2"},{"title":"Build​","type":1,"pageTitle":"Building Gaia Deterministically","url":"/main/resources/reproducible-builds#build","content":" Clone gaia:  git clone https://github.com/cosmos/gaia.git   Checkout the commit, branch, or release tag you want to build:  cd gaia/ git checkout v4.2.1   The buildsystem supports and produces binaries for the following architectures:  darwin/amd64linux/amd64linux/arm64windows/amd64  Run the following command to launch a build for all supported architectures:  make distclean build-reproducible   The build system generates both the binaries and deterministic build report in the artifacts directory. The artifacts/build_report file contains the list of the build artifacts and their respective checksums, and can be used to verify build sanity. An example of its contents follows:  App: gaiad Version: v4.2.1 Commit: dbd8a6fb522c571debf958837f9113c56d418f6b Files: 29d219b0b120b3188bd7cd7249fc96b9 gaiad-v4.2.1-darwin-amd64 80338d9f0e55ea8f6c93f2ec7d4e18d6 gaiad-v4.2.1-linux-amd64 9bc77a512acca673ca1769ae67b4d6c7 gaiad-v4.2.1-linux-arm64 c84387860f52178e2bffee08897564bb gaiad-v4.2.1-windows-amd64.exe c25cca8ccceec06a6fabae90f671fab1 gaiad-v4.2.1.tar.gz Checksums-Sha256: 05e5b9064bac4e71f0162c4c3c3bff55def22ca016d34205a5520fef89fd2776 gaiad-v4.2.1-darwin-amd64 ccda422cbda29c723aaf27653bcf0f6412e138eec33fba2b49de131f9ffbe2d2 gaiad-v4.2.1-linux-amd64 95f89e8213cb758d12e1b0b631285938de822d04d2e25f399e99c0b798173cfd gaiad-v4.2.1-linux-arm64 7ef98f0041f1573f0a8601abad4a14b1c163f47481c7ba1954fd81ed423a6408 gaiad-v4.2.1-windows-amd64.exe 422883ba43c96a6ea5ef9512d39321dd1356633c6a9505517b9c651788df4a7f gaiad-v4.2.1.tar.gz  ","version":"Latest","tagName":"h2"},{"title":"Gaia Telemetry","type":0,"sectionRef":"#","url":"/main/telemetry","content":"","keywords":"","version":"Latest"},{"title":"What Data Is Collected?​","type":1,"pageTitle":"Gaia Telemetry","url":"/main/telemetry#what-data-is-collected","content":" Gaia nodes will emit telemetry data collected from Cosmos SDK, CometBFT, and the Go Runtime. The following information about the validator node is attached to this data: moniker and binary version. Follow the links below to see what telemetry data is emitted from these services.  Cosmos SDK: https://docs.cosmos.network/main/learn/advanced/telemetryCometBFT: https://docs.cometbft.com/main/explanation/core/metricsGo Runtime (via OpenTelemetry): https://opentelemetry.io/docs/specs/semconv/runtime/go-metrics/ ","version":"Latest","tagName":"h2"},{"title":"Validators","type":0,"sectionRef":"#","url":"/main/validators","content":"Validators This folder contains documentation relevant to validators of the Cosmos Hub and other gaia blockchains. Validator OverviewSetting Up a Validator for Cosmos Hub MainnetValidator FAQValidator Security NoticeKey Management Systems Intro to KMSKMS + Ledger","keywords":"","version":"Latest"},{"title":"The Genesis File","type":0,"sectionRef":"#","url":"/main/resources/genesis","content":"","keywords":"","version":"Latest"},{"title":"What is a Genesis File​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#what-is-a-genesis-file","content":" A genesis file is a JSON file which defines the initial state of your blockchain. It can be seen as height 0 of your blockchain. The first block, at height 1, will reference the genesis file as its parent.  The state defined in the genesis file contains all the necessary information, like initial token allocation, genesis time, default parameters, and more. Let us break down this information.  ","version":"Latest","tagName":"h2"},{"title":"Genesis Time and Chain_id​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#genesis-time-and-chain_id","content":" The genesis_time is defined at the top of the genesis file. It is a UTC timestamp that specifies when the blockchain is due to start. At this time, genesis validators are supposed to come online and start participating in the consensus process. The blockchain starts when more than 2/3rd of the genesis validators (weighted by voting power) are online.  &quot;genesis_time&quot;: &quot;2019-03-13T17:00:00.000000000Z&quot;,   The chain_id is a unique identifier for your chain. It helps differentiate between different chains using the same version of the software.  &quot;chain_id&quot;: &quot;cosmoshub-2&quot;,   ","version":"Latest","tagName":"h2"},{"title":"Consensus Parameters​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#consensus-parameters","content":" Next, the genesis file defines consensus parameters. Consensus parameters regroup all the parameters that are related to the consensus layer, which is Tendermint in the case of gaia. Let us look at these parameters:  block max_bytes: Maximum number of bytes per block.max_gas: Gas limit per block. Each transaction included in the block will consume some gas. The total gas used by transactions included in a block cannot exceed this limit. evidence max_age: An evidence is a proof that a validator signed two different blocks at the same height (and round). This is an explicitly malicious behaviour that is punished at the state-machine level. The max_age defines the maximum number of blocks after which an evidence is not valid anymore. validator pub_key_types: The types of pubkey (ed25519, secp256k1, ...) that are accepted for validators. Currently only ed25519 is accepted.  &quot;consensus_params&quot;: { &quot;block_size&quot;: { &quot;max_bytes&quot;: &quot;150000&quot;, &quot;max_gas&quot;: &quot;1500000&quot; }, &quot;evidence&quot;: { &quot;max_age&quot;: &quot;1000000&quot; }, &quot;validator&quot;: { &quot;pub_key_types&quot;: [ &quot;ed25519&quot; ] } },   ","version":"Latest","tagName":"h2"},{"title":"Application State​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#application-state","content":" The application state defines the initial state of the state-machine.  ","version":"Latest","tagName":"h2"},{"title":"Genesis Accounts​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#genesis-accounts","content":" In this section, the initial allocation of tokens is defined. It is possible to add accounts manually by directly editing the genesis file, but it is also possible to use the following command:  // Example: gaiad add-genesis-account cosmos1qs8tnw2t8l6amtzvdemnnsq9dzk0ag0z37gh3h 10000000uatom gaiad genesis add-genesis-account &lt;account-address&gt; &lt;amount&gt;&lt;denom&gt;   This command creates an item in the accounts list, under the app_state section.  &quot;accounts&quot;: [ { &quot;address&quot;: &quot;cosmos1qs8tnw2t8l6amtzvdemnnsq9dzk0ag0z37gh3h&quot;, &quot;coins&quot;: [ { &quot;denom&quot;: &quot;uatom&quot;, &quot;amount&quot;: &quot;10000000&quot; } ], &quot;sequence_number&quot;: &quot;0&quot;, &quot;account_number&quot;: &quot;0&quot;, &quot;original_vesting&quot;: [ { &quot;denom&quot;: &quot;uatom&quot;, &quot;amount&quot;: &quot;26306000000&quot; } ], &quot;delegated_free&quot;: null, &quot;delegated_vesting&quot;: null, &quot;start_time&quot;: &quot;0&quot;, &quot;end_time&quot;: &quot;10000&quot; } ]   Let us break down the parameters:  sequence_number: This number is used to count the number of transactions sent by this account. It is incremented each time a transaction is included in a block, and used to prevent replay attacks. Initial value is 0.account_number: Unique identifier for the account. It is generated the first time a transaction including this account is included in a block.original_vesting: Vesting is natively supported by gaia. You can define an amount of token owned by the account that needs to be vested for a period of time before they can be transferred. Vested tokens can be delegated. Default value is null.delegated_free: Amount of delegated tokens that can be transferred after they've been vested. Most of the time, will be null in genesis.delegated_vesting: Amount of delegated tokens that are still vesting. Most of the time, will be null in genesis.start_time: Timestamp at which the vesting period starts. 0 most of the time in genesis.end_time: Timestamp at which the vesting period ends. 0 if no vesting for this account.  ","version":"Latest","tagName":"h3"},{"title":"Bank​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#bank","content":" The bank module handles tokens. The only parameter that needs to be defined in this section is whether transfers are enabled at genesis or not.  &quot;bank&quot;: { &quot;send_enabled&quot;: false }   ","version":"Latest","tagName":"h3"},{"title":"Staking​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#staking","content":" The staking module handles the bulk of the Proof-of-Stake logic of the state-machine. This section should look like the following:  &quot;staking&quot;: { &quot;pool&quot;: { &quot;not_bonded_tokens&quot;: &quot;10000000&quot;, &quot;bonded_tokens&quot;: &quot;0&quot; }, &quot;params&quot;: { &quot;unbonding_time&quot;: &quot;1814400000000000&quot;, &quot;max_validators&quot;: 100, &quot;max_entries&quot;: 7, &quot;bond_denom&quot;: &quot;uatom&quot; }, &quot;last_total_power&quot;: &quot;0&quot;, &quot;last_validator_powers&quot;: null, &quot;validators&quot;: null, &quot;bonds&quot;: null, &quot;unbonding_delegations&quot;: null, &quot;redelegations&quot;: null, &quot;exported&quot;: false }   Let us break down the parameters:  pool not_bonded_tokens: Defines the amount of tokens not bonded (i.e. delegated) in genesis. Generally, it equals the total supply of the staking token (uatom in this example).bonded_tokens: Amount of bonded tokens in genesis. Generally 0. params unbonding_time: Time in nanosecond it takes for tokens to complete unbonding.max_validators: Maximum number of active validators.max_entries: Maximum unbonding delegations and redelegations between a particular pair of delegator / validator.bond_denom: Denomination of the staking token. last_total_power: Total amount of voting power. Generally 0 in genesis (except if genesis was generated using a previous state).last_validator_powers: Power of each validator in last known state. Generally null in genesis (except if genesis was generated using a previous state).validators: List of last known validators. Generally null in genesis (except if genesis was generated using a previous state).bonds: List of last known delegation. Generally null in genesis (except if genesis was generated using a previous state).unbonding_delegations: List of last known unbonding delegations. Generally null in genesis (except if genesis was generated using a previous state).redelegations: List of last known redelegations. Generally null in genesis (except if genesis was generated using a previous state).exported: Whether this genesis was generated using the export of a previous state.  ","version":"Latest","tagName":"h3"},{"title":"Mint​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#mint","content":" The mint module governs the logic of inflating the supply of token. The mint section in the genesis file looks like the following:  &quot;mint&quot;: { &quot;minter&quot;: { &quot;inflation&quot;: &quot;0.070000000000000000&quot;, &quot;annual_provisions&quot;: &quot;0.000000000000000000&quot; }, &quot;params&quot;: { &quot;mint_denom&quot;: &quot;uatom&quot;, &quot;inflation_rate_change&quot;: &quot;0.130000000000000000&quot;, &quot;inflation_max&quot;: &quot;0.200000000000000000&quot;, &quot;inflation_min&quot;: &quot;0.070000000000000000&quot;, &quot;goal_bonded&quot;: &quot;0.670000000000000000&quot;, &quot;blocks_per_year&quot;: &quot;6311520&quot; } }   Let us break down the parameters:  minter inflation: Initial yearly percentage of increase in the total supply of staking token, compounded weekly. A 0.070000000000000000 value means the target is 7% yearly inflation, compounded weekly.annual_provisions: Calculated each block. Initialize at 0.000000000000000000. params mint_denom: Denom of the staking token that is inflated.inflation_rate_change: Max yearly change in inflation.inflation_max: Maximum level of inflation.inflation_min: Minimum level of inflation.goal_bonded: Percentage of the total supply that is targeted to be bonded. If the percentage of bonded staking tokens is below this target, the inflation increases (following inflation_rate_change) until it reaches inflation_max. If the percentage of bonded staking tokens is above this target, the inflation decreases (following inflation_rate_change) until it reaches inflation_min.blocks_per_year: Estimation of the amount of blocks per year. Used to compute the block reward coming from inflated staking token (called block provisions).  ","version":"Latest","tagName":"h3"},{"title":"Distribution​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#distribution","content":" The distribution module handles the logic of distribution block provisions and fees to validators and delegators. The distribution section in the genesis file looks like the following:   &quot;distribution&quot;: { &quot;fee_pool&quot;: { &quot;community_pool&quot;: null }, &quot;community_tax&quot;: &quot;0.020000000000000000&quot;, &quot;base_proposer_reward&quot;: &quot;0.010000000000000000&quot;, &quot;bonus_proposer_reward&quot;: &quot;0.040000000000000000&quot;, &quot;withdraw_addr_enabled&quot;: false, &quot;delegator_withdraw_infos&quot;: null, &quot;previous_proposer&quot;: &quot;&quot;, &quot;outstanding_rewards&quot;: null, &quot;validator_accumulated_commissions&quot;: null, &quot;validator_historical_rewards&quot;: null, &quot;validator_current_rewards&quot;: null, &quot;delegator_starting_infos&quot;: null, &quot;validator_slash_events&quot;: null }   Let us break down the parameters:  fee_pool community_pool: The community pool is a pool of tokens that can be used to pay for bounties. It is allocated via governance proposals. Generally null in genesis. community_tax: The tax percentage on fees and block rewards that goes to the community pool.base_proposer_reward: Base bonus on transaction fees collected in a valid block that goes to the proposer of block. If value is 0.010000000000000000, 1% of the fees go to the proposer.bonus_proposer_reward: Max bonus on transaction fees collected in a valid block that goes to the proposer of block. The bonus depends on the number of precommits the proposer includes. If the proposer includes 2/3rd precommits weighted by voting power (minimum for the block to be valid), they get a bonus of base_proposer_reward. This bonus increases linearly up to bonus_proposer_reward if the proposer includes 100% of precommits.withdraw_addr_enabled: If true, delegators can set a different address to withdraw their rewards. Set to false if you want to disable transfers at genesis, as it can be used as a way to get around the restriction.delegator_withdraw_infos: List of delegators withdraw address. Generally null if genesis was not exported from previous state.previous_proposer: Proposer of the previous block. Set to &quot;&quot; if genesis was not exported from previous state.outstanding_rewards: Outstanding (un-withdrawn) rewards. Set to null if genesis was not exported from previous state.validator_accumulated_commission: Outstanding (un-withdrawn) commission of validators. Set to null if genesis was not exported from previous state.validator_historical_rewards: Set of information related to the historical rewards of validators and used by the distribution module for various computation. Set to null if genesis was not exported from previous state.validators_current_rewards: Set of information related to the current rewards of validators and used by the distribution module for various computation. Set to null if genesis was not exported from previous state.delegator_starting_infos: Tracks the previous validator period, the delegation's amount of staking token, and the creation height (to check later on if any slashes have occurred). Set to null if genesis was not exported from previous state.validator_slash_events: Set of information related to the past slashing of validators. Set to null if genesis was not exported from previous state.  ","version":"Latest","tagName":"h3"},{"title":"Governance​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#governance","content":" The gov module handles all governance-related transactions. The initial state of the gov section looks like the following:  &quot;gov&quot;: { &quot;starting_proposal_id&quot;: &quot;1&quot;, &quot;deposits&quot;: null, &quot;votes&quot;: null, &quot;proposals&quot;: null, &quot;deposit_params&quot;: { &quot;min_deposit&quot;: [ { &quot;denom&quot;: &quot;uatom&quot;, &quot;amount&quot;: &quot;512000000&quot; } ], &quot;max_deposit_period&quot;: &quot;1209600000000000&quot; }, &quot;voting_params&quot;: { &quot;voting_period&quot;: &quot;1209600000000000&quot; }, &quot;tally_params&quot;: { &quot;quorum&quot;: &quot;0.4&quot;, &quot;threshold&quot;: &quot;0.5&quot;, &quot;veto&quot;: &quot;0.334&quot;, &quot;governance_penalty&quot;: &quot;0.0&quot; } }   Let us break down the parameters:  starting_proposal_id: This parameter defines the ID of the first proposal. Each proposal is identified by a unique ID.deposits: List of deposits for each proposal ID. Set to null if genesis was not exported from previous state.votes: List of votes for each proposal ID. Set to null if genesis was not exported from previous state.proposals: List of proposals for each proposal ID: Set to null if genesis was not exported from previous state.deposit_params min_deposit: The minimum deposit required for the proposal to enter Voting Period. If multiple denoms are provided, the OR operator applies.max_deposit_period: The maximum period (in nanoseconds) after which it is not possible to deposit on the proposal anymore. voting_params voting_period: Length of the voting period in nanoseconds. tally_params quorum: Minimum percentage of bonded staking tokens that needs to vote for the result to be valid.threshold: Minimum percentage of votes that need to be YES for the result to be valid.veto: Maximum percentage NO_WITH_VETO votes for the result to be valid.governance_penalty: Penalty for validators that do not vote on a given proposal.  ","version":"Latest","tagName":"h3"},{"title":"Slashing​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#slashing","content":" The slashing module handles the logic to slash delegators if their validator misbehaves. The slashing section in genesis looks as follows:  &quot;slashing&quot;: { &quot;params&quot;: { &quot;max_evidence_age&quot;: &quot;1814400000000000&quot;, &quot;signed_blocks_window&quot;: &quot;10000&quot;, &quot;min_signed_per_window&quot;: &quot;0.050000000000000000&quot;, &quot;downtime_jail_duration&quot;: &quot;600000000000&quot;, &quot;slash_fraction_double_sign&quot;: &quot;0.050000000000000000&quot;, &quot;slash_fraction_downtime&quot;: &quot;0.000100000000000000&quot; }, &quot;signing_infos&quot;: {}, &quot;missed_blocks&quot;: {} }   Let us break down the parameters:  params max_evidence_age: Maximum age of the evidence in nanoseconds.signed_blocks_window: Moving window of blocks to figure out offline validators.min_signed_per_window: Minimum percentage of precommitsthat must be present in the block window for the validator to be considered online.downtime_jail_duration: Duration in nanoseconds for which a validator is jailed after they get slashed for downtime.slash_fraction_double_sign: Percentage of delegators bonded stake slashed when their validator double signs.slash_fraction_downtime: Percentage of delegators bonded stake slashed when their validator is down. signing_infos: Various infos per validator needed by the slashing module. Set to {} if genesis was not exported from previous state.missed_blocks: Various infos related to missed blocks needed by the slashing module. Set to {} if genesis was not exported from previous state.  ","version":"Latest","tagName":"h3"},{"title":"Genesis Transactions​","type":1,"pageTitle":"The Genesis File","url":"/main/resources/genesis#genesis-transactions","content":" By default, the genesis file do not contain any gentxs. A gentx is a transaction that bonds staking token present in the genesis file under accounts to a validator, essentially creating a validator at genesis. The chain will start as soon as more than 2/3rds of the validators (weighted by voting power) that are the recipient of a valid gentx come online after genesis_time.  A gentx can be added manually to the genesis file, or via the following command:  gaiad collect-gentxs  ","version":"Latest","tagName":"h3"},{"title":"KMS - Key Management System","type":0,"sectionRef":"#","url":"/main/validators/kms","content":"","keywords":"","version":"Latest"},{"title":"Building​","type":1,"pageTitle":"KMS - Key Management System","url":"/main/validators/kms#building","content":" Detailed build instructions can be found here.  tip When compiling the KMS, ensure you have enabled the applicable features:  Backend\tRecommended Command lineYubiHSM\tcargo build --features yubihsm Ledger+Tendermint App\tcargo build --features ledgertm  ","version":"Latest","tagName":"h2"},{"title":"Configuration​","type":1,"pageTitle":"KMS - Key Management System","url":"/main/validators/kms#configuration","content":" A KMS can be configured in various ways:  ","version":"Latest","tagName":"h2"},{"title":"Using a YubiHSM​","type":1,"pageTitle":"KMS - Key Management System","url":"/main/validators/kms#using-a-yubihsm","content":" Detailed information on how to setup a KMS with YubiHSM2 can be found here  ","version":"Latest","tagName":"h3"},{"title":"Using a Ledger device running the Tendermint app​","type":1,"pageTitle":"KMS - Key Management System","url":"/main/validators/kms#using-a-ledger-device-running-the-tendermint-app","content":" Detailed information on how to setup a KMS with Ledger Tendermint App can be found here ","version":"Latest","tagName":"h3"},{"title":"Service Providers","type":0,"sectionRef":"#","url":"/main/resources/service-providers","content":"","keywords":"","version":"Latest"},{"title":"Connection Options​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#connection-options","content":" There are four main technologies to consider to connect to the Cosmos Hub:  Full Nodes: Interact with the blockchain.REST Server: Serves for HTTP calls.REST API: Use available endpoints for the REST Server.GRPC: Connect to the Cosmos Hub using gRPC.  ","version":"Latest","tagName":"h2"},{"title":"Running a Full Node​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#running-a-full-node","content":" ","version":"Latest","tagName":"h2"},{"title":"What is a Full Node?​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#what-is-a-full-node","content":" A Full Node is a network node that syncs up with the state of the blockchain. It provides blockchain data to others by using RESTful APIs, a replica of the database by exposing data with interfaces. A Full Node keeps in syncs with the rest of the blockchain nodes and stores the state on disk. If the full node does not have the queried block on disk the full node can go find the blockchain where the queried data lives.  ","version":"Latest","tagName":"h3"},{"title":"Installation and Configuration​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#installation-and-configuration","content":" This section describes the steps to run and interact with a full node for the Cosmos Hub.  First, you need to install the software.  Consider running your own Cosmos Hub Full Node.  ","version":"Latest","tagName":"h3"},{"title":"Command-Line Interface​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#command-line-interface","content":" The command-line interface (CLI) is the most powerful tool to access the Cosmos Hub and use gaia. To use the CLI, you must install the latest version of gaia on your machine.  Compare your version with the latest release version  gaiad version --long   ","version":"Latest","tagName":"h2"},{"title":"Available Commands​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#available-commands","content":" All available CLI commands are shown when you run the gaiad command:  gaiad   Stargate Cosmos Hub App Usage: gaiad [command] Available Commands: add-genesis-account Add a genesis account to genesis.json collect-gentxs Collect genesis txs and output a genesis.json file debug Tool for helping with debugging your application export Export state to JSON gentx Generate a genesis tx carrying a self delegation help Help about any command init Initialize private validator, p2p, genesis, and application configuration files keys Manage your application's keys migrate Migrate genesis to a specified target version query Querying subcommands start Run the full node status Query remote node for status tendermint Tendermint subcommands testnet Initialize files for a gaia testnet tx Transactions subcommands unsafe-reset-all Resets the blockchain database, removes address book files, and resets data/priv_validator_state.json to the genesis state validate-genesis validates the genesis file at the default location or at the location passed as an arg version Print the application binary version information Flags: -h, --help help for gaiad --home string directory for config and data (default &quot;/Users/tobias/.gaia&quot;) --log_format string The logging format (json|plain) (default &quot;plain&quot;) --log_level string The logging level (trace|debug|info|warn|error|fatal|panic) (default &quot;info&quot;) --trace print out full stack trace on errors Use &quot;gaiad [command] --help&quot; for more information about a command.   For each displayed command, you can use the --help flag to get further information.  gaiad query --help Usage: gaiad query [flags] gaiad query [command] Aliases: query, q Available Commands: account Query for account by address auth Querying commands for the auth module bank Querying commands for the bank module block Get verified data for a the block at given height distribution Querying commands for the distribution module evidence Query for evidence by hash or for all (paginated) submitted evidence gov Querying commands for the governance module ibc Querying commands for the IBC module ibc-transfer IBC fungible token transfer query subcommands mint Querying commands for the minting module params Querying commands for the params module slashing Querying commands for the slashing module staking Querying commands for the staking module tendermint-validator-set Get the full tendermint validator set at given height tx Query for a transaction by hash in a committed block txs Query for paginated transactions that match a set of events upgrade Querying commands for the upgrade module Flags: --chain-id string The network chain ID -h, --help help for query Global Flags: --home string directory for config and data (default &quot;/Users/tobias/.gaia&quot;) --log_format string The logging format (json|plain) (default &quot;plain&quot;) --log_level string The logging level (trace|debug|info|warn|error|fatal|panic) (default &quot;info&quot;) --trace print out full stack trace on errors Use &quot;gaiad query [command] --help&quot; for more information about a command.   ","version":"Latest","tagName":"h3"},{"title":"Remote Access to gaiad​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#remote-access-to-gaiad","content":" When choosing to remote access a Full Node and gaiad, you need a Full Node running and gaia installed on your local machine.  gaiad is the tool that enables you to interact with the node that runs on the Cosmos Hub network, whether you run it yourself or not.  To set up gaiad on a local machine and connect to an existing full node, use the following command:  gaiad config &lt;flag&gt; &lt;value&gt;   First, set up the address of the full node you want to connect to:  gaiad config node &lt;host&gt;:&lt;port // example: gaiad config node https://77.87.106.33:26657 (note: this is a placeholder)   If you run your own full node locally, use tcp://localhost:26657 as the address.  Finally, set the chain-id of the blockchain you want to interact with:  gaiad config chain-id cosmoshub-4   Next, learn to use CLI commands to interact with the full node. You can run these commands as remote control or when you are running it on your local machine.  ","version":"Latest","tagName":"h3"},{"title":"Create a Key Pair​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#create-a-key-pair","content":" The default key is secp256k1 elliptic curve. Use the gaiad keys command to list the keys and generate a new key.  gaiad keys add &lt;your_key_name&gt;   You will be asked to create a password (at least 8 characters) for this key-pair. This will return the information listed below:  NAME: Name of your keyTYPE: Type of your key, always local.ADDRESS: Your address. Used to receive funds.PUBKEY: Your public key. Useful for validators.MNEMONIC: 24-word phrase. Save this mnemonic somewhere safe. This phrase is required to recover your private key in case you forget the password. The mnemonic is displayed at the end of the output.  You can see all available keys by typing:  gaiad keys list   Use the --recover flag to add a key that imports a mnemonic to your keyring.  gaiad keys add &lt;your_key_name&gt; --recover   Check your Account​  You can view your account by using the query account command.  gaiad query account &lt;YOUR_ADDRESS&gt;   It will display your account type, account number, public key and current account sequence.  '@type': /cosmos.auth.v1beta1.BaseAccount account_number: &quot;xxxx&quot; address: cosmosxxxx pub_key: '@type': /cosmos.crypto.secp256k1.PubKey key: xxx sequence: &quot;x&quot;   ","version":"Latest","tagName":"h3"},{"title":"Check your Balance​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#check-your-balance","content":" Query the account balance with the command:  gaiad query bank balances &lt;YOUR_ADDRESS&gt;   The response contains keys balances and pagination. Each balances entry contains an amount held, connected to a denom identifier. The typical $ATOM token is identified by the denom uatom. Where 1 uatom is 0.000001 ATOM.  balances: - amount: &quot;12345678&quot; denom: uatom pagination: next_key: null total: &quot;0&quot;   When you query an account that has not received any token yet, the balances entry is shown as an empty array.  balances: [] pagination: next_key: null total: &quot;0&quot;   Send Coins Using the CLI​  To send coins using the CLI:  gaiad tx bank send [from_key_or_address] [to_address] [amount] [flags]   Parameters:  &lt;from_key_or_address&gt;: Key name or address of sending account.&lt;to_address&gt;: Address of the recipient.&lt;amount&gt;: This parameter accepts the format &lt;value|coinName&gt;, such as 1000000uatom.  Flags:  --chain-id: This flag allows you to specify the id of the chain. There are different ids for different testnet chains and mainnet chains.--gas-prices: This flag allows you to specify the gas prices you pay for the transaction. The format is used as 0.0025uatom  ","version":"Latest","tagName":"h3"},{"title":"REST API​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#rest-api","content":" The REST API documents list all the available endpoints that you can use to interact with your full node. Learn how to enable the REST API on your full node.  ","version":"Latest","tagName":"h2"},{"title":"Listen for Incoming Transactions​","type":1,"pageTitle":"Service Providers","url":"/main/resources/service-providers#listen-for-incoming-transactions","content":" The recommended way to listen for incoming transactions is to periodically query the blockchain by using the following HTTP endpoint:  /cosmos/bank/v1beta1/balances/{address} ","version":"Latest","tagName":"h3"},{"title":"Ledger Nano Support","type":0,"sectionRef":"#","url":"/main/resources/ledger","content":"","keywords":"","version":"Latest"},{"title":"Install the Cosmos Ledger application​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#install-the-cosmos-ledger-application","content":" Installing the Cosmos application on your ledger device is required before you can use either Keplr or gaiad. To do so, you need to:  Install Ledger Live on your machine.  Using Ledger Live, update your Ledger Nano S with the latest firmware.  On the Ledger Live application, navigate to the Manager menu .Connect your Ledger Nano device and allow Ledger Manager from it.On the Ledger Live application, Search for Cosmos.Install the Cosmos application by clicking on Install.  tip To see the Cosmos application when you search for it, you might need to activate the Developer Mode, located in the Experimental features tab of the Ledger Live application.    ","version":"Latest","tagName":"h2"},{"title":"Keplr + Ledger Nano​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#keplr--ledger-nano","content":" Note: You need to install the Cosmos app on your Ledger Nano before following this section  Connect your Ledger device to your computer, unlock it with the PIN and open the Cosmos app.Install the Keplr browser extension.Click on the Keplr extension icon and select Import Ledger and choose an account name and password.Make sure your Ledger device is unlocked and has the Cosmos app open and then follow the instructions on the Keplr pop-up.  That's it! You can now use Keplr with your Ledger Nano S. You can use the Keplr web app to get a more detailed overview of your Cosmos account.  Note: Each time you will send a transaction, you will need to confirm it on your Ledger device. Indication will be prompted from the Keplr interface  ","version":"Latest","tagName":"h2"},{"title":"(Optional) Confirm your address​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#optional-confirm-your-address","content":" You can double check that Keplr is displaying the correct address directly on your Ledger Nano device. To do so:  Connect your Ledger to your computer and open the Cosmos application on the device.Once the Cosmos app is open, click on the right button to access the Show Address option.Click on both button, then select Account 0 and Index 0.  You should now see the same address that is displayed on the Keplr extension.  To learn more about using Keplr, we suggest you have a look at their support documentation.  You can also have a look at the Ledger support page for more details.  ","version":"Latest","tagName":"h3"},{"title":"Gaia CLI + Ledger Nano​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#gaia-cli--ledger-nano","content":" Note: You need to install the Cosmos app on your Ledger Nano before following this section  The tool used to generate addresses and transactions on the Cosmos Hub network is gaiad. Here is how to get started. If using a CLI tool is unfamiliar to you, scroll down and follow instructions for using the Keplr wallet instead.  ","version":"Latest","tagName":"h2"},{"title":"Before you Begin​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#before-you-begin","content":" Install GolangInstall Gaia  Verify that gaiad is installed correctly with the following command  gaiad version --long ➜ cosmos-sdk: 0.34.3 git commit: 67ab0b1e1d1e5b898c8cbdede35ad5196dba01b2 vendor hash: 0341b356ad7168074391ca7507f40b050e667722 build tags: netgo ledger go version go1.11.5 darwin/amd64   ","version":"Latest","tagName":"h3"},{"title":"Add your Ledger key​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#add-your-ledger-key","content":" Connect and unlock your Ledger device.Open the Cosmos app on your Ledger.Create an account in gaiad from your ledger key.  tip Be sure to change the keyName parameter to be a meaningful name. The ledger flag tells gaiad to use your Ledger to seed the account.  gaiad keys add &lt;keyName&gt; --ledger ➜ NAME: TYPE: ADDRESS: PUBKEY: &lt;keyName&gt; ledger cosmos1... cosmospub1...   Cosmos uses HD Wallets. This means you can setup many accounts using the same Ledger seed. To create another account from your Ledger device, run (change the integer i to some value &gt;= 0 to choose the account for HD derivation):  gaiad keys add &lt;secondKeyName&gt; --ledger --account &lt;i&gt;   ","version":"Latest","tagName":"h3"},{"title":"Confirm your address​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#confirm-your-address","content":" Run this command to display your address on the device. Use the keyName you gave your ledger key. The -d flag is supported in version 1.5.0 and higher.  gaiad keys show &lt;keyName&gt; -d   Confirm that the address displayed on the device matches that displayed when you added the key.  ","version":"Latest","tagName":"h3"},{"title":"Connect to a full node​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#connect-to-a-full-node","content":" Next, you need to configure gaiad with the URL of a Cosmos full node and the appropriate chain_id. In this example we connect to the public load balanced full node operated by Chorus One on the cosmoshub-2 chain. But you can point your gaiad to any Cosmos full node. Be sure that the chain-id is set to the same chain as the full node.  gaiad config node https://cosmos.chorus.one:26657 gaiad config chain_id cosmoshub-2   Test your connection with a query such as:  gaiad query staking validators   tip To run your own full node locally read more here..  ","version":"Latest","tagName":"h3"},{"title":"Sign a transaction​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#sign-a-transaction","content":" You are now ready to start signing and sending transactions. Send a transaction with gaiad using the tx send command.  gaiad tx bank send --help # to see all available options.   tip Be sure to unlock your device with the PIN and open the Cosmos app before trying to run these commands  Use the keyName you set for your Ledger key and gaia will connect with the Cosmos Ledger app to then sign your transaction.  gaiad tx bank send &lt;keyName&gt; &lt;destinationAddress&gt; &lt;amount&gt;&lt;denomination&gt;   When prompted with confirm transaction before signing, Answer Y.  Next you will be prompted to review and approve the transaction on your Ledger device. Be sure to inspect the transaction JSON displayed on the screen. You can scroll through each field and each message. Scroll down to read more about the data fields of a standard transaction object.  Now, you are all set to start sending transactions on the network.  ","version":"Latest","tagName":"h3"},{"title":"Receive funds​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#receive-funds","content":" To receive funds to the Cosmos account on your Ledger device, retrieve the address for your Ledger account (the ones with TYPE ledger) with this command:  gaiad keys list ➜ NAME: TYPE: ADDRESS: PUBKEY: &lt;keyName&gt; ledger cosmos1... cosmospub1...   ","version":"Latest","tagName":"h3"},{"title":"Further documentation​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#further-documentation","content":" Not sure what gaiad can do? Simply run the command without arguments to output documentation for the commands in supports.  tip The gaiad help commands are nested. So $ gaiad will output docs for the top level commands (status, config, query, and tx). You can access documentation for sub commands with further help commands. For example, to print the query commands: gaiad query --help Or to print the tx (transaction) commands: gaiad tx --help   ","version":"Latest","tagName":"h3"},{"title":"The Cosmos Standard Transaction​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#the-cosmos-standard-transaction","content":" Transactions in Cosmos embed the Standard Transaction type from the Cosmos SDK. The Ledger device displays a serialized JSON representation of this object for you to review before signing the transaction. Here are the fields and what they mean:  chain-id: The chain to which you are broadcasting the tx, such as the gaia-13003 testnet or cosmoshub-2: mainnet.account_number: The global id of the sending account assigned when the account receives funds for the first time.sequence: The nonce for this account, incremented with each transaction.fee: JSON object describing the transaction fee, its gas amount and coin denominationmemo: optional text field used in various ways to tag transactions.msgs_&lt;index&gt;/&lt;field&gt;: The array of messages included in the transaction. Double click to drill down into nested fields of the JSON.  ","version":"Latest","tagName":"h2"},{"title":"Support​","type":1,"pageTitle":"Ledger Nano Support","url":"/main/resources/ledger#support","content":" For further support, start by looking over the posts in our forum  Feel welcome to reach out in our Telegram channel to ask for help.  Here are a few relevant and helpful tutorials from the wonderful Cosmos community:  Catdotfish - How to use the Keplr WalletCryptium Labs - How to store your ATOMS on your Ledger and delegate with the command line ","version":"Latest","tagName":"h2"},{"title":"Setting up Tendermint KMS + Ledger","type":0,"sectionRef":"#","url":"/main/validators/kms/kms_ledger","content":"","keywords":"","version":"Latest"},{"title":"Tendermint Validator app (for Ledger devices)​","type":1,"pageTitle":"Setting up Tendermint KMS + Ledger","url":"/main/validators/kms/kms_ledger#tendermint-validator-app-for-ledger-devices","content":" You should be able to find the Tendermint app in Ledger Live.  Note: at the moment, you might need to enable developer mode in Ledger Live settings  ","version":"Latest","tagName":"h2"},{"title":"KMS configuration​","type":1,"pageTitle":"Setting up Tendermint KMS + Ledger","url":"/main/validators/kms/kms_ledger#kms-configuration","content":" In this section, we will configure a KMS to use a Ledger device running the Tendermint Validator App.  ","version":"Latest","tagName":"h2"},{"title":"Config file​","type":1,"pageTitle":"Setting up Tendermint KMS + Ledger","url":"/main/validators/kms/kms_ledger#config-file","content":" You can find other configuration examples here  Create a ~/.tmkms/tmkms.toml file with the following content (use an adequate chain_id)  # Example KMS configuration file [[validator]] addr = &quot;tcp://localhost:26658&quot; # or &quot;unix:///path/to/socket&quot; chain_id = &quot;gaia-11001&quot; reconnect = true # true is the default secret_key = &quot;~/.tmkms/secret_connection.key&quot; [[providers.ledgertm]] chain_ids = [&quot;gaia-11001&quot;]   Edit addr to point to your gaiad instance.Adjust chain-id to match your .gaia/config/config.toml settings.provider.ledgertm has no additional parameters at the moment, however, it is important that you keep that header to enable the feature.  Plug your Ledger device and open the Tendermint validator app.  ","version":"Latest","tagName":"h3"},{"title":"Generate secret key​","type":1,"pageTitle":"Setting up Tendermint KMS + Ledger","url":"/main/validators/kms/kms_ledger#generate-secret-key","content":" Now you need to generate secret_key:  tmkms keygen ~/.tmkms/secret_connection.key   ","version":"Latest","tagName":"h3"},{"title":"Retrieve validator key​","type":1,"pageTitle":"Setting up Tendermint KMS + Ledger","url":"/main/validators/kms/kms_ledger#retrieve-validator-key","content":" The last step is to retrieve the validator key that you will use in gaiad.  Start the KMS:  tmkms start -c ~/.tmkms/tmkms.toml   The output should look similar to:  07:28:24 [INFO] tmkms 0.3.0 starting up... 07:28:24 [INFO] [keyring:ledgertm:ledgertm] added validator key cosmosvalconspub1zcjduepqy53m39prgp9dz3nz96kaav3el5e0th8ltwcf8cpavqdvpxgr5slsd6wz6f 07:28:24 [INFO] KMS node ID: 1BC12314E2E1C29015B66017A397F170C6ECDE4A   The KMS may complain that it cannot connect to gaiad. That is fine, we will fix it in the next section.  This output indicates the validator key linked to this particular device is: cosmosvalconspub1zcjduepqy53m39prgp9dz3nz96kaav3el5e0th8ltwcf8cpavqdvpxgr5slsd6wz6f  Take note of the validator pubkey that appears in your screen. We will use it in the next section.  ","version":"Latest","tagName":"h3"},{"title":"Gaia configuration​","type":1,"pageTitle":"Setting up Tendermint KMS + Ledger","url":"/main/validators/kms/kms_ledger#gaia-configuration","content":" You need to enable KMS access by editing .gaia/config/config.toml. In this file, modify priv_validator_laddr to create a listening address/port or a unix socket in gaiad.  For example:  ... # TCP or UNIX socket address for Tendermint to listen on for # connections from an external PrivValidator process priv_validator_laddr = &quot;tcp://127.0.0.1:26658&quot; ...   Let's assume that you have set up your validator account and called it kmsval. You can tell gaiad the key that we've got in the previous section.  gaiad gentx --name kmsval --pubkey {.ValidatorKey}   Now start gaiad. You should see that the KMS connects and receives a signature request.  Once the ledger receives the first message, it will ask for confirmation that the values are adequate.    Click the right button, if the height and round are correct.  After that, you will see that the KMS will start forwarding all signature requests to the ledger:    warning The word TEST in the second picture, second line appears because they were taken on a pre-release version. Once the app as been released in Ledger's app store, this word should NOT appear. ","version":"Latest","tagName":"h2"},{"title":"Validator Overview","type":0,"sectionRef":"#","url":"/main/validators/overview","content":"","keywords":"","version":"Latest"},{"title":"Introduction​","type":1,"pageTitle":"Validator Overview","url":"/main/validators/overview#introduction","content":" The Cosmos Hub is based on CometBFT that relies on a set of validators that are responsible for committing new blocks in the blockchain. These validators participate in the consensus protocol by broadcasting votes that contain cryptographic signatures signed by each validator's private key.  Validator candidates can bond their own ATOM and have ATOM &quot;delegated&quot;, or staked, to them by token holders. The Cosmos Hub has 180 active validators, but over time the number of validators can be changed through governance (MaxValidators parameter). Validator voting power is determined by the total number of ATOM tokens delegated to them. Validators that do not have enough voting power to be in the top 180 are considered inactive. Inactive validators can become active if their staked amount increases so that they fall into the top 180 validators.  Validators and their delegators earn ATOM as block provisions and tokens as transaction fees through execution of the Tendermint consensus protocol. Note that validators can set a commission percentage on the fees their delegators receive as additional incentive. You can find an overview of all current validators and their voting power on Mintscan.  If validators double sign or are offline for an extended period, their staked ATOM (including ATOM of users that delegated to them) can be slashed. The penalty depends on the severity of the violation.  ","version":"Latest","tagName":"h2"},{"title":"Hardware​","type":1,"pageTitle":"Validator Overview","url":"/main/validators/overview#hardware","content":" For validator key management, validators must set up a physical operation that is secured with restricted access. A good starting place, for example, would be co-locating in secure data centers.  Validators are expected to equip their datacenter location with redundant power, connectivity, and storage backups. Expect to have several redundant networking boxes for fiber, firewall, and switching and then small servers with redundant hard drive and failover.  You can find the minimum hardware requirements on the instructions for joining the Cosmos Hub mainnet. As the network grows, bandwidth, CPU, and memory requirements rise. Large hard drives are recommended for storing years of blockchain history, as well as significant RAM to process the increasing amount of transactions.  ","version":"Latest","tagName":"h2"},{"title":"Create a Validator Website​","type":1,"pageTitle":"Validator Overview","url":"/main/validators/overview#create-a-validator-website","content":" To get started as a validator, create your dedicated validator website and signal your intention to become a validator in the Interchain Discord. Posting your validator website is essential because delegators want to have information about the entity they are delegating their ATOM to.  ","version":"Latest","tagName":"h2"},{"title":"Seek Legal Advice​","type":1,"pageTitle":"Validator Overview","url":"/main/validators/overview#seek-legal-advice","content":" As always, do your own research and seek legal advice if you intend to run a validator node.  ","version":"Latest","tagName":"h2"},{"title":"Community​","type":1,"pageTitle":"Validator Overview","url":"/main/validators/overview#community","content":" Discuss the finer details of being a validator on our community Discord and sign up for the Cosmos newsletter to get regular updates:  DiscordNewsletter ","version":"Latest","tagName":"h2"},{"title":"Validator Security","type":0,"sectionRef":"#","url":"/main/validators/security","content":"","keywords":"","version":"Latest"},{"title":"Key Management - HSM​","type":1,"pageTitle":"Validator Security","url":"/main/validators/security#key-management---hsm","content":" It is mission critical that an attacker cannot steal a validator's key. If this is possible, it puts the entire stake delegated to the compromised validator at risk. Hardware security modules are an important strategy for mitigating this risk.  HSM modules must support ed25519 signatures for the hub. The YubiHSM2 supports ed25519 and this yubikey library is available. The YubiHSM can protect a private key but cannot ensure in a secure setting that it won't sign the same block twice.  The CometBFT team is also working on extending our Ledger Nano S application to support validator signing. This app can store recent blocks and mitigate double signing attacks.  We will update this page when more key storage solutions become available.  ","version":"Latest","tagName":"h2"},{"title":"Sentry Nodes (DDOS Protection)​","type":1,"pageTitle":"Validator Security","url":"/main/validators/security#sentry-nodes-ddos-protection","content":" Validators are responsible for ensuring that the network can sustain denial of service attacks.  One recommended way to mitigate these risks is for validators to carefully structure their network topology in a so-called sentry node architecture.  Validator nodes should only connect to full-nodes they trust because they operate them themselves or are run by other validators they know socially. A validator node will typically run in a data center. Most data centers provide direct links to the networks of major cloud providers. The validator can use those links to connect to sentry nodes in the cloud. This shifts the burden of denial-of-service from the validator's node directly to its sentry nodes, and may require new sentry nodes be spun up or activated to mitigate attacks on existing ones.  Sentry nodes can be quickly spun up or change their IP addresses. Because the links to the sentry nodes are in private IP space, an internet based attack cannot disturb them directly. This will ensure validator block proposals and votes always make it to the rest of the network.  To setup your sentry node architecture you can follow the instructions below:  Validators nodes should edit their config.toml:  # Comma separated list of nodes to keep persistent connections to # Do not add private peers to this list if you don't want them advertised persistent_peers =[list of sentry nodes] # Set true to enable the peer-exchange reactor pex = false   Sentry Nodes should edit their config.toml:  # Comma separated list of peer IDs to keep private (will not be gossiped to other peers) # Example ID: 3e16af0cead27979e1fc3dac57d03df3c7a77acc@3.87.179.235:26656 private_peer_ids = &quot;node_ids_of_private_peers&quot;   ","version":"Latest","tagName":"h2"},{"title":"Environment Variables​","type":1,"pageTitle":"Validator Security","url":"/main/validators/security#environment-variables","content":" By default, uppercase environment variables with the following prefixes will replace lowercase command-line flags:  GA (for Gaia flags)TM (for Tendermint/CometBFT flags)BC (for democli or basecli flags)  For example, the environment variable GA_CHAIN_ID will map to the command line flag --chain-id. Note that while explicit command-line flags will take precedence over environment variables, environment variables will take precedence over any of your configuration files. For this reason, it's imperative that you lock down your environment such that any critical parameters are defined as flags on the CLI or prevent modification of any environment variables. ","version":"Latest","tagName":"h2"},{"title":"Running a Validator","type":0,"sectionRef":"#","url":"/main/validators/validator-setup","content":"","keywords":"","version":"Latest"},{"title":"What is a Validator?​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#what-is-a-validator","content":" Validators are responsible for committing new blocks to the blockchain through an automated voting process. A validator's stake is slashed if they become unavailable or sign blocks at the same height. Because there is a chance of slashing, we suggest you read about Sentry Node Architecture to protect your node from DDOS attacks and to ensure high-availability.  warning If you want to become a validator for the Hub's mainnet, you should learn more about security.  The following instructions assume you have already set up a full-node and are synchronised to the latest blockheight.  ","version":"Latest","tagName":"h2"},{"title":"Create Your Validator​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#create-your-validator","content":" Your cosmosvalconspub can be used to create a new validator by staking tokens. You can find your validator pubkey by running:  gaiad tendermint show-validator   To create your validator, just use the following command:  warning Don't use more uatom than you have!  gaiad tx staking create-validator \\ --amount=1000000uatom \\ --pubkey=$(gaiad tendermint show-validator) \\ --moniker=&quot;choose a moniker&quot; \\ --chain-id=&lt;chain_id&gt; \\ --commission-rate=&quot;0.10&quot; \\ --commission-max-rate=&quot;0.20&quot; \\ --commission-max-change-rate=&quot;0.01&quot; \\ --gas=&quot;auto&quot; \\ --gas-prices=&quot;0.0025uatom&quot; \\ --from=&lt;key_name&gt;   tip When specifying commission parameters, the commission-max-change-rate is used to measure % point change over the commission-rate. E.g. 1% to 2% is a 100% rate increase, but only 1 percentage point.  It's possible that you won't have enough ATOM to be part of the active set of validators in the beginning. Users are able to delegate to inactive validators (those outside of the active set) using the Keplr web app. You can confirm that you are in the validator set by using a third party explorer like Mintscan.  ","version":"Latest","tagName":"h2"},{"title":"Edit Validator Description​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#edit-validator-description","content":" You can edit your validator's public description. This info is to identify your validator, and will be relied on by delegators to decide which validators to stake to. Make sure to provide input for every flag below. If a flag is not included in the command the field will default to empty (--moniker defaults to the machine name) if the field has never been set or remain the same if it has been set in the past.  The &lt;key_name&gt; specifies which validator you are editing. If you choose to not include some of the flags below, remember that the --from flag must be included to identify the validator to update.  The --identity can be used as to verify identity with systems like Keybase or UPort. When using Keybase, --identity should be populated with a 16-digit string that is generated with a keybase.io account. It's a cryptographically secure method of verifying your identity across multiple online networks. The Keybase API allows us to retrieve your Keybase avatar. This is how you can add a logo to your validator profile.  gaiad tx staking edit-validator --moniker=&quot;choose a moniker&quot; \\ --website=&quot;https://cosmos.network&quot; \\ --identity=6A0D65E29A4CBC8E \\ --details=&quot;To infinity and beyond!&quot; \\ --chain-id=&lt;chain_id&gt; \\ --gas=&quot;auto&quot; \\ --gas-prices=&quot;0.0025uatom&quot; \\ --from=&lt;key_name&gt; \\ --commission-rate=&quot;0.10&quot;   warning Please note that some parameters such as commission-max-rate and commission-max-change-rate cannot be changed once your validator is up and running.  Note: The commission-rate value must adhere to the following rules:  Must be between 0 and the validator's commission-max-rateMust not exceed the validator's commission-max-change-rate which is maximum % point change rate per day. In other words, a validator can only change its commission once per day and within commission-max-change-rate bounds.  ","version":"Latest","tagName":"h2"},{"title":"View Validator Description​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#view-validator-description","content":" View the validator's information with this command:  gaiad query staking validator &lt;account_cosmos&gt;   ","version":"Latest","tagName":"h2"},{"title":"Track Validator Signing Information​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#track-validator-signing-information","content":" In order to keep track of a validator's signatures in the past you can do so by using the signing-info command:  gaiad query slashing signing-info &lt;validator-pubkey&gt;\\ --chain-id=&lt;chain_id&gt;   ","version":"Latest","tagName":"h2"},{"title":"Unjail Validator​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#unjail-validator","content":" When a validator is &quot;jailed&quot; for downtime, you must submit an Unjail transaction from the operator account in order to be able to get block proposer rewards again (depends on the zone fee distribution).  gaiad tx slashing unjail \\ --from=&lt;key_name&gt; \\ --chain-id=&lt;chain_id&gt;   ","version":"Latest","tagName":"h2"},{"title":"Confirm Your Validator is Running​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#confirm-your-validator-is-running","content":" Your validator is active if the following command returns anything:  gaiad query tendermint-validator-set | grep &quot;$(gaiad tendermint show-address)&quot;   You should now see your validator in one of the Cosmos Hub explorers. You are looking for the bech32 encoded address in the ~/.gaia/config/priv_validator.json file.  ","version":"Latest","tagName":"h2"},{"title":"Halting Your Validator​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#halting-your-validator","content":" When attempting to perform routine maintenance or planning for an upcoming coordinated upgrade, it can be useful to have your validator systematically and gracefully halt. You can achieve this by either setting the halt-height to the height at which you want your node to shutdown or by passing the --halt-height flag to gaiad. The node will shutdown with a zero exit code at that given height after committing the block.  ","version":"Latest","tagName":"h2"},{"title":"Advanced configuration​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#advanced-configuration","content":" You can find more advanced information about running a node or a validator on the CometBFT Core documentation.  ","version":"Latest","tagName":"h2"},{"title":"Common Problems​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#common-problems","content":" ","version":"Latest","tagName":"h2"},{"title":"Problem #1: My validator has voting_power: 0​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#problem-1-my-validator-has-voting_power-0","content":" Your validator has become jailed. Validators get jailed, i.e. get removed from the active validator set, if they do not vote on at least 500 of the last 10,000 blocks, or if they double sign.  If you got jailed for downtime, you can get your voting power back to your validator. First, if you're not using Cosmovisor and gaiad is not running, start it up again:  gaiad start   Wait for your full node to catch up to the latest block. Then, you can unjail your validator  After you have submitted the unjail transaction, check your validator again to see if your voting power is back.  gaiad status   You may notice that your voting power is less than it used to be. That's because you got slashed for downtime!  ","version":"Latest","tagName":"h3"},{"title":"Problem #2: My gaiad crashes because of too many open files​","type":1,"pageTitle":"Running a Validator","url":"/main/validators/validator-setup#problem-2-my-gaiad-crashes-because-of-too-many-open-files","content":" The default number of files Linux can open (per-process) is 1024. gaiad is known to open more than 1024 files. This causes the process to crash. A quick fix is to run ulimit -n 4096 (increase the number of open files allowed) and then restarting the process with gaiad start. If you are using systemd or another process manager to launch gaiad (such as Cosmovisor) this may require some configuration at that level. A sample systemd file to fix this issue is below:  # /etc/systemd/system/gaiad.service [Unit] Description=Cosmos Gaia Node After=network.target [Service] Type=simple User=ubuntu WorkingDirectory=/home/ubuntu ExecStart=/home/ubuntu/go/bin/gaiad start Restart=on-failure RestartSec=3 LimitNOFILE=4096 [Install] WantedBy=multi-user.target  ","version":"Latest","tagName":"h3"},{"title":"Validator FAQ","type":0,"sectionRef":"#","url":"/main/validators/validator-faq","content":"","keywords":"","version":"Latest"},{"title":"General Concepts​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#general-concepts","content":" ","version":"Latest","tagName":"h2"},{"title":"What is a Cosmos validator?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-a-cosmos-validator","content":" The Cosmos Hub is based on CometBFT that relies on a set of validators to secure the network. The role of validators is to run a full node and participate in consensus by broadcasting votes that contain cryptographic signatures signed by the validator's private key. Validators commit new blocks in the blockchain and receive revenue in exchange for their work. Validators must also participate in governance by voting on proposals. Validators are weighted according to their total stake.  ","version":"Latest","tagName":"h3"},{"title":"What is staking?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-staking","content":" The Cosmos Hub is a public Proof-Of-Stake (PoS) blockchain, meaning that the weight of validators is determined by the amount of staking tokens (ATOM) bonded as collateral. These ATOM tokens can be self-delegated directly by the validator or delegated to the validator by other ATOM holders.  Any user in the system can declare their intention to become a validator by sending a create-validator transaction to become validator candidates.  The weight (i.e. voting power) of a validator determines whether they are an active validator. The active validator set is limited to an amount that changes over time.  ","version":"Latest","tagName":"h3"},{"title":"What is a full node?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-a-full-node","content":" A full node is a server running a chain's binary (its software) that fully validates transactions and blocks of a blockchain and keeps a full record of all historic activity. A full node is distinct from a pruned node that processes only block headers and a small subset of transactions. Running a full node requires more resources than a pruned node. Validators can decide to run either a full node or a pruned node, but they need to make sure they retain enough blocks to be able to validate new blocks.  Of course, it is possible and encouraged for users to run full nodes even if they do not plan to be validators.  You can find more details about the requirements in the Joining Mainnet Tutorial.  ","version":"Latest","tagName":"h3"},{"title":"What is a delegator?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-a-delegator","content":" Delegators are ATOM holders who cannot, or do not want to, run a validator themselves. ATOM holders can delegate ATOM to a validator and obtain a part of their revenue in exchange. For details on how revenue is distributed, see What is the incentive to stake? and What are validators commission? in this document.  Because delegators share revenue with their validators, they also share risks. If a validator misbehaves, each of their delegators are partially slashed in proportion to their delegated stake. This penalty is one of the reasons why delegators must perform due diligence on validators before delegating. Spreading their stake over multiple validators is another layer of protection.  Delegators play a critical role in the system, as they are responsible for choosing validators. Being a delegator is not a passive role. Delegators must actively monitor the actions of their validators and participate in governance. For details on being a delegator, read the Delegator FAQ.  ","version":"Latest","tagName":"h3"},{"title":"Becoming a Validator​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#becoming-a-validator","content":" ","version":"Latest","tagName":"h2"},{"title":"How to become a validator?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-to-become-a-validator","content":" Any participant in the network can signal that they want to become a validator by sending a create-validator transaction, where they must fill out the following parameters:  Validator's PubKey: The private key associated with this Tendermint/CometBFT PubKey is used to sign prevotes and precommits.Validator's Address: Application level address that is used to publicly identify your validator. The private key associated with this address is used to delegate, unbond, claim rewards, and participate in governance.Validator's name (moniker)Validator's website (Optional)Validator's description (Optional)Initial commission rate: The commission rate on block rewards and fees charged to delegators.Maximum commission: The maximum commission rate that this validator can charge. This parameter is fixed and cannot be changed after the create-validator transaction is processed.Commission max change rate: The maximum daily increase of the validator commission. This parameter is fixed cannot be changed after the create-validator transaction is processed.  After a validator is created, ATOM holders can delegate ATOM to them, effectively adding stake to the validator's pool. The total stake of an address is the combination of ATOM bonded by delegators and ATOM self-bonded by the validator.  From all validator candidates that signaled themselves, the 180 validators with the most total stake are the designated validators. If a validator's total stake falls below the top 180, then that validator loses its validator privileges. The validator cannot participate in consensus or generate rewards until the stake is high enough to be in the top 180. Over time, the maximum number of validators may be increased via on-chain governance proposal.  ","version":"Latest","tagName":"h3"},{"title":"Testnet​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#testnet","content":" ","version":"Latest","tagName":"h2"},{"title":"How can I join the testnet?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-can-i-join-the-testnet","content":" The testnet is a great environment to test your validator setup before launch.  Testnet participation is a great way to signal to the community that you are ready and able to operate a validator. For details, see Join the Public Testnet documentation.  ","version":"Latest","tagName":"h3"},{"title":"Additional Concepts​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#additional-concepts","content":" ","version":"Latest","tagName":"h2"},{"title":"What are the different types of keys?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-the-different-types-of-keys","content":" There are two types of keys:  Tendermint/CometBFT key: A unique key that is used to sign consensus votes. It is associated with a public key cosmosvalconspub (To get this value, run gaiad tendermint show-validator)It is generated when the node is created with gaiad init. Application key: This key is created from the gaiad binary and is used to sign transactions. Application keys are associated with a public key that is prefixed by cosmospub and an address that is prefixed by cosmos.  The Tendermint/CometBFT key and the application key are derived from account keys that are generated by the gaiad keys add command.  Note: A validator's operator key is directly tied to an application key and uses the cosmosvaloper and cosmosvaloperpub prefixes that are reserved solely for this purpose.  ","version":"Latest","tagName":"h3"},{"title":"What are the different states a validator can be in?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-the-different-states-a-validator-can-be-in","content":" After a validator is created with a create-validator transaction, the validator is in one of three states:  in validator set: Validator is in the active set and participates in consensus. The validator is earning rewards and can be slashed for misbehavior. jailed: Validator misbehaved and is in jail, i.e. outside of the validator set. If the jailing is due to being offline for too long (i.e. having missed more than 95% out of the last 10,000 blocks), the validator can send an unjail transaction in order to re-enter the validator set.If the jailing is due to double signing, the validator cannot unjail. unbonded: Validator is not in the active set, and therefore not signing blocks. The validator cannot be slashed and does not earn any reward. It is still possible to delegate ATOM to an unbonded validator. Undelegating from an unbonded validator is immediate, meaning that the tokens are not subject to the unbonding period.  ","version":"Latest","tagName":"h3"},{"title":"What is self-delegation? How can I increase my self-delegation?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-self-delegation-how-can-i-increase-my-self-delegation","content":" Self-delegation is a delegation of ATOM from a validator to themselves. The delegated amount can be increased by sending a delegate transaction from your validator's application application key.  ","version":"Latest","tagName":"h3"},{"title":"What is validator bond? How can I increase my validator bond?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-validator-bond-how-can-i-increase-my-validator-bond","content":" Validator bond is a delegation of ATOM from a delegator to a validator. Validator operators can validator bond to themselves. The validator bond amount can be increased by sending a ValidatorBond transaction from any account delegated to your validator. Validator bond is required before a validator can accept delegations from liquid staking providers. As such it forces validators to put “skin in the game” in order to be entrusted with delegations from liquid staking providers. This disincentivizes malicious behavior and enables the validator to negotiate its relationship with liquid staking providers.  ","version":"Latest","tagName":"h3"},{"title":"Is there a minimum amount of ATOM that must be delegated to be an active (bonded) validator?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#is-there-a-minimum-amount-of-atom-that-must-be-delegated-to-be-an-active-bonded-validator","content":" The minimum is 1 ATOM. But the network is currently secured by much higher values. You can check the minimum required ATOM to become part of the active validator set on the Mintscan validator page.  ","version":"Latest","tagName":"h3"},{"title":"How do delegators choose their validators?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-do-delegators-choose-their-validators","content":" Delegators are free to choose validators according to their own subjective criteria. Selection criteria includes:  Amount of validator-bonded ATOM: Number of ATOM a validator validator-bonded to themselves. A validator with a higher amount of self-delegated ATOM indicates that the validator is sharing the risk and consequences for their actions, or has enough goodwill from the community so that others post validator bond on the validator's behalf.Amount of delegated ATOM: Total number of ATOM delegated to a validator. A high voting power shows that the community trusts this validator. Larger validators also decrease the decentralization of the network, so delegators are suggested to consider delegating to smaller validators.Commission rate: Commission applied on revenue by validators before the revenue is distributed to their delegators.Track record: Delegators review the track record of the validators they plan to delegate to. This track record includes past votes on proposals and historical average uptime.Community contributions: Another (more subjective) criteria is the work that validators have contributed to the community, such as educational content, participation in the community channels, contributions to open source software, etc.  Apart from these criteria, validators send a create-validator transaction to signal a website address to complete their resume. Validators must build reputation one way or another to attract delegators. For example, a good practice for validators is to have a third party audit their setup. Note though, that the CometBFT team does not approve or conduct any audits themselves. For more information on due diligence, see the A Delegator’s Guide to Staking blog post.  ","version":"Latest","tagName":"h3"},{"title":"Responsibilities​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#responsibilities","content":" ","version":"Latest","tagName":"h2"},{"title":"Do validators need to be publicly identified?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#do-validators-need-to-be-publicly-identified","content":" No, they do not. Each delegator can value validators based on their own criteria. Validators are able to register a website address when they nominate themselves so that they can advertise their operation as they see fit. Some delegators prefer a website that clearly displays the team operating the validator and their resume, while other validators might prefer to be anonymous validators with positive track records.  ","version":"Latest","tagName":"h3"},{"title":"What are the responsibilities of a validator?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-the-responsibilities-of-a-validator","content":" Validators have two main responsibilities:  Be able to constantly run a correct version of the software: Validators must ensure that their servers are always online and their private keys are not compromised. Actively participate in governance: Validators are required to vote on every proposal.  Additionally, validators are expected to be active members of the community. Validators must always be up-to-date with the current state of the ecosystem so that they can easily adapt to any change.  ","version":"Latest","tagName":"h3"},{"title":"What does 'participate in governance' entail?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-does-participate-in-governance-entail","content":" Validators and delegators on the Cosmos Hub can vote on proposals to change operational parameters (such as the block gas limit), coordinate upgrades, or make a decision on any given matter.  Validators play a special role in the governance system. As pillars of the system, validators are required to vote on every proposal. It is especially important since delegators who do not vote inherit the vote of their validator.  ","version":"Latest","tagName":"h3"},{"title":"What does staking imply?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-does-staking-imply","content":" Staking ATOM can be thought of as a safety deposit on validation activities. When a validator or a delegator wants to retrieve part or all of their deposit, they send an unbonding transaction. Then, ATOM undergoes a 3-week unbonding period during which they are liable to being slashed for potential misbehaviors committed by the validator before the unbonding process started.  Validators, and by association delegators, receive block rewards, fees, and have the right to participate in governance. If a validator misbehaves, a certain portion of their total stake is slashed. This means that every delegator that bonded ATOM to this validator gets penalized in proportion to their bonded stake. Delegators are therefore incentivized to delegate to validators that they anticipate will function safely.  ","version":"Latest","tagName":"h3"},{"title":"Can a validator run away with their delegators' ATOM?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#can-a-validator-run-away-with-their-delegators-atom","content":" By delegating to a validator, a user delegates voting power. The more voting power a validator have, the more weight they have in the consensus and governance processes. This does not mean that the validator has custody of their delegators' ATOM. A validator cannot run away with its delegator's funds.  Even though delegated funds cannot be stolen by their validators, delegators' tokens can still be slashed by a small percentage if their validator suffers a slashing event, which is why we encourage due diligence when selecting a validator.  ","version":"Latest","tagName":"h3"},{"title":"How often is a validator chosen to propose the next block? Does frequency increase with the quantity of bonded ATOM?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-often-is-a-validator-chosen-to-propose-the-next-block-does-frequency-increase-with-the-quantity-of-bonded-atom","content":" The validator that is selected to propose the next block is called the proposer. Each proposer is selected deterministically. The frequency of being chosen is proportional to the voting power (i.e. amount of bonded ATOM) of the validator. For example, if the total bonded stake across all validators is 100 ATOM and a validator's total stake is 10 ATOM, then this validator is the proposer ~10% of the blocks.  ","version":"Latest","tagName":"h3"},{"title":"Are validators of the Cosmos Hub required to validate other zones in the Cosmos ecosystem?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#are-validators-of-the-cosmos-hub-required-to-validate-other-zones-in-the-cosmos-ecosystem","content":" This depends, currently no validators are required to validate other blockchains. But when the first version of Interchain Security is launched on the Cosmos Hub, delegators can vote to have certain blockchains secured via Interchain Security. In those cases, validators are required to validate on these chains as well.  ","version":"Latest","tagName":"h3"},{"title":"How can a validator safely quit validating on the Cosmos Hub?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-can-a-validator-safely-quit-validating-on-the-cosmos-hub","content":" If a validator simply shuts down their node, this would result in the validator and their delegators getting slashed for being offline. The only way to safely exit a validator node running on the Cosmos Hub is by unbonding the validator with the UnbondValidator message. As a result, the validator gets jailed and kicked out of the active set of validators, without getting slashed. They can then proceed to shut down their node without risking their tokens.  It's highly advised to inform your delegators when doing this, as they will still be bonded to your validator after it got jailed. They will need to manually unbond and they might not have been made aware of this via their preferred wallet application.  ","version":"Latest","tagName":"h3"},{"title":"Incentives​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#incentives","content":" ","version":"Latest","tagName":"h2"},{"title":"What is the incentive to stake?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-the-incentive-to-stake","content":" Each member of a validator's staking pool earns different types of revenue:  Block rewards: Native tokens of applications (e.g. ATOM on the Cosmos Hub) run by validators are inflated to produce block provisions. These provisions exist to incentivize ATOM holders to bond their stake. Non-bonded ATOM are diluted over time.Transaction fees: The Cosmos Hub maintains an allow list of tokens that are accepted as fee payment. The initial fee token is the atom.  This total revenue is divided among validators' staking pools according to each validator's weight. Then, within each validator's staking pool the revenue is divided among delegators in proportion to each delegator's stake. A commission on delegators' revenue is applied by the validator before it is distributed.  ","version":"Latest","tagName":"h3"},{"title":"What is a validator commission?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-a-validator-commission","content":" Revenue received by a validator's pool is split between the validator and their delegators. The validator can apply a commission on the part of the revenue that goes to their delegators. This commission is set as a percentage. Each validator is free to set their initial commission, maximum daily commission change rate, and maximum commission. The Cosmos Hub enforces the parameter that each validator sets. The maximum commission rate is fixed and cannot be changed. However, the commission rate itself can be changed after the validator is created as long as it does not exceed the maximum commission.  ","version":"Latest","tagName":"h3"},{"title":"What is the incentive to run a validator?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-the-incentive-to-run-a-validator","content":" Validators earn proportionally more revenue than their delegators because of the commission they take on the staking rewards from their delegators.  Validators also play a major role in governance. If a delegator does not vote, they inherit the vote from their validator. This voting inheritance gives validators a major responsibility in the ecosystem.  ","version":"Latest","tagName":"h3"},{"title":"How are block rewards distributed?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-are-block-rewards-distributed","content":" Block rewards are distributed proportionally to all validators relative to their voting power. This means that even though each validator gains ATOM with each reward, all validators maintain equal weight over time.  For example, 10 validators have equal voting power and a commission rate of 1%. For this example, the reward for a block is 1000 ATOM and each validator has 20% of self-bonded ATOM. These tokens do not go directly to the proposer. Instead, the tokens are evenly spread among validators. So now each validator's pool has 100 ATOM. These 100 ATOM are distributed according to each participant's stake:  Commission: 100*80%*1% = 0.8 ATOMValidator gets: 100\\*20% + Commission = 20.8 ATOMAll delegators get: 100\\*80% - Commission = 79.2 ATOM  Then, each delegator can claim their part of the 79.2 ATOM in proportion to their stake in the validator's staking pool.  ","version":"Latest","tagName":"h3"},{"title":"How are fees distributed?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-are-fees-distributed","content":" Fees are similarly distributed with the exception that the block proposer can get a bonus on the fees of the block they propose if the proposer includes more than the strict minimum of required precommits.  When a validator is selected to propose the next block, the validator must include at least 2/3 precommits of the previous block. However, an incentive to include more than 2/3 precommits is a bonus. The bonus is linear: it ranges from 1% if the proposer includes 2/3rd precommits (minimum for the block to be valid) to 5% if the proposer includes 100% precommits. Of course the proposer must not wait too long or other validators may timeout and move on to the next proposer. As such, validators have to find a balance between wait-time to get the most signatures and risk of losing out on proposing the next block. This mechanism aims to incentivize non-empty block proposals, better networking between validators, and mitigates censorship.  For a concrete example to illustrate the aforementioned concept, there are 10 validators with equal stake. Each validator applies a 1% commission rate and has 20% of self-delegated ATOM. Now comes a successful block that collects a total of 1025.51020408 ATOM in fees.  First, a 2% tax is applied. The corresponding ATOM go to the reserve pool. The reserve pool's funds can be allocated through governance to fund bounties and upgrades.  2% * 1025.51020408 = 20.51020408 ATOM go to the reserve pool.  1005 ATOM now remain. For this example, the proposer included 100% of the signatures in its block so the proposer obtains the full bonus of 5%.  To solve this simple equation to find the reward R for each validator:  9*R + R + R*5% = 1005 ⇔ R = 1005/10.05 = 100  For the proposer validator: The pool obtains R + R * 5%: 105 ATOMCommission: 105 * 80% * 1% = 0.84 ATOMValidator's reward: 105 * 20% + Commission = 21.84 ATOMDelegators' rewards: 105 * 80% - Commission = 83.16 ATOM (each delegator is able to claim its portion of these rewards in proportion to their stake) For each non-proposer validator: The pool obtains R: 100 ATOMCommission: 100 * 80% * 1% = 0.8 ATOMValidator's reward: 100 * 20% + Commission = 20.8 ATOMDelegators' rewards: 100 * 80% - Commission = 79.2 ATOM (each delegator is able to claim their portion of these rewards in proportion to their stake)  ","version":"Latest","tagName":"h3"},{"title":"What are the slashing conditions?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-the-slashing-conditions","content":" If a validator misbehaves, their delegated stake is partially slashed. Two faults can result in slashing of funds for a validator and their delegators:  Double signing: If someone reports on chain A that a validator signed two blocks at the same height on chain A and chain B, and if chain A and chain B share a common ancestor, then this validator gets slashed by 5% on chain A.Downtime: If a validator misses more than 95% of the last 10,000 blocks (roughly ~19 hours), they are slashed by 0.01%.  ","version":"Latest","tagName":"h3"},{"title":"Are validators required to self-delegate ATOM?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#are-validators-required-to-self-delegate-atom","content":" No, they do not need to self-delegate. Even though there is no obligation for validators to self-delegate, delegators may want their validator to have self-delegated ATOM in their staking pool. In other words, validators share the risk.  Note however that it's possible that some validators decide to self-delegate via a different address for security reasons.  ","version":"Latest","tagName":"h3"},{"title":"How to prevent concentration of stake in the hands of a few top validators?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-to-prevent-concentration-of-stake-in-the-hands-of-a-few-top-validators","content":" The community is expected to behave in a smart and self-preserving way. When a mining pool in Bitcoin gets too much mining power the community usually stops contributing to that pool. The Cosmos Hub relies on the same effect. Additionally, when delegators switch to another validator, they are not subject to the unbonding period, which removes any barrier to quickly redelegating tokens in service of improving decentralization.  ","version":"Latest","tagName":"h3"},{"title":"Liquid Staking Module​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#liquid-staking-module","content":" ","version":"Latest","tagName":"h2"},{"title":"What is the liquid staking module?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-is-the-liquid-staking-module","content":" The Liquid Staking Module is a set of safety features that mitigate liquid staking risks by:  limiting the total amount of tokens that can be liquid staked to X% of all staked tokens.introducing a requirement that validators validator-bond tokens to be eligible for delegations from liquid staking providers.limiting the portion of validators's shares that can be liquid staked to X% of their total shares.  The Liquid Staking Module also improves liquid staking UX by making delegations transferable under limited scenarios, to allow delegators to convert their delegations into liquid staking positions without having to wait the unbonding period.  For a detailed and technical description, please see ADR-061 in the Cosmos SDK or the Liquid Staking Module Cosmos Hub forum post.  ","version":"Latest","tagName":"h3"},{"title":"Who can validator bond?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#who-can-validator-bond","content":" The validator themselves, but also any other address delegated to the validator.  ","version":"Latest","tagName":"h3"},{"title":"How can I validator bond?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-can-i-validator-bond","content":" Once delegated to a validator, a delegator (or validator operator) can convert their delegation to a validator into Validator Bond by signing a ValidatorBond message.  The ValidatorBond message is exposed by the staking module and can be executed as follows:  gaiad tx staking validator-bond cosmosvaloper13h5xdxhsdaugwdrkusf8lkgu406h8t62jkqv3h &lt;delegator&gt; --from mykey   There are no partial Validator Bonds: when a delegator or validator converts their shares to a particular validator into Validator Bond, their entire delegation to that validator is converted to Validator Bond. If a validator or delegator wishes to convert only some of their delegation to Validator Bond, they should transfer those funds to a separate address and Validator Bond from that address, or redelegate the funds that they do not wish to validator bond to another validator before converting their delegation to validator bond.  To convert Validator Bond back into a standard delegation, simply unbond the shares.  ","version":"Latest","tagName":"h3"},{"title":"How does a delegator or validator mark their delegation as a validator bond?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-does-a-delegator-or-validator-mark-their-delegation-as-a-validator-bond","content":" Once delegated to a validator, sign a ValidatorBond message.  ","version":"Latest","tagName":"h3"},{"title":"Are validator bonds subject to additional slashing conditions?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#are-validator-bonds-subject-to-additional-slashing-conditions","content":" No, in the event of a slash, a validator bond is slashed at the same rate as a regular bond.  ","version":"Latest","tagName":"h3"},{"title":"Can I unbond my validator bond?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#can-i-unbond-my-validator-bond","content":" If all the liquid staking capacity made available by a validator’s validator bond is utilized, validator bond delegated to that validator cannot be unbonded. If new capacity becomes available (either by redemption of liquid staking tokens or addition or new validator bond), then existing validator bond can be undelegated.  Example: Suppose the validator bond factor is 250 and Validator V bonds 2 ATOM, then liquid staking providers delegate 500 ATOM to Validator V. Now Validator V cannot remove any of their validator bond because the full liquid staking capacity made available by Validator V’s validator bond is consumed.  If liquid staking providers undelegate 250 ATOM from Validator V, Validator V can now remove 1 ATOM of validator bond.  If, instead, the ICF or a community member validator bonds 1 additional ATOM to Validator V, Validator V can now remove 1 ATOM of validator bond.  ","version":"Latest","tagName":"h3"},{"title":"Can I validator bond some of my tokens and delegate the remaining portion normally?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#can-i-validator-bond-some-of-my-tokens-and-delegate-the-remaining-portion-normally","content":" The ValidatorBond message converts the full balance delegated to a validator into validator bond. To validator bond some tokens and delegate the remaining portion normally, use two addresses: the first will delegate + ValidatorBond, and the second will just delegate.  ","version":"Latest","tagName":"h3"},{"title":"Technical Requirements​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#technical-requirements","content":" ","version":"Latest","tagName":"h2"},{"title":"What are hardware requirements?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-hardware-requirements","content":" A modest level of hardware specifications is initially required and rises as network use increases. Participating in the testnet is the best way to learn more. You can find the current hardware recommendations in the Joining Mainnet documentation.  Validators are recommended to set up sentry nodes to protect your validator node from DDoS attacks.  ","version":"Latest","tagName":"h3"},{"title":"What are software requirements?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-software-requirements","content":" In addition to running a Cosmos Hub node, validators are expected to implement monitoring, alerting, and management solutions. There are several tools that you can use.  ","version":"Latest","tagName":"h3"},{"title":"What are bandwidth requirements?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-bandwidth-requirements","content":" The Cosmos network has the capacity for very high throughput relative to chains like Ethereum or Bitcoin.  We recommend that the data center nodes connect only to trusted full nodes in the cloud or other validators that know each other socially. This connection strategy relieves the data center node from the burden of mitigating denial-of-service attacks.  Ultimately, as the network becomes more heavily used, multigigabyte per day bandwidth is very realistic.  ","version":"Latest","tagName":"h3"},{"title":"How to handle key management?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-to-handle-key-management","content":" Validators are expected to run an HSM that supports ed25519 keys. Here are potential options:  YubiHSM 2Ledger Nano SLedger BOLOS SGX enclaveThales nShield support  The Interchain Foundation does not recommend one solution above the other. The community is encouraged to bolster the effort to improve HSMs and the security of key management.  ","version":"Latest","tagName":"h3"},{"title":"What can validators expect in terms of operations?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-can-validators-expect-in-terms-of-operations","content":" Running an effective operation is key to avoiding unexpected unbonding or slashing. Operations must be able to respond to attacks and outages, as well as maintain security and isolation in the data center.  ","version":"Latest","tagName":"h3"},{"title":"What are the maintenance requirements?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#what-are-the-maintenance-requirements","content":" Validators are expected to perform regular software updates to accommodate chain upgrades and bug fixes. It is suggested to consider using Cosmovisor to partially automate this process.  During an chain upgrade, progress is discussed in a private channel in the Interchain Discord. If your validator is in the active set we encourage you to request access to that channel by contacting a moderator.  ","version":"Latest","tagName":"h3"},{"title":"How can validators protect themselves from denial-of-service attacks?​","type":1,"pageTitle":"Validator FAQ","url":"/main/validators/validator-faq#how-can-validators-protect-themselves-from-denial-of-service-attacks","content":" Denial-of-service attacks occur when an attacker sends a flood of internet traffic to an IP address to prevent the server at the IP address from connecting to the internet.  An attacker scans the network, tries to learn the IP address of various validator nodes, and disconnects them from communication by flooding them with traffic.  One recommended way to mitigate these risks is for validators to carefully structure their network topology using a sentry node architecture.  Validator nodes are expected to connect only to full nodes they trust because they operate the full nodes themselves or the trust full nodes are run by other validators they know socially. A validator node is typically run in a data center. Most data centers provide direct links to the networks of major cloud providers. The validator can use those links to connect to sentry nodes in the cloud. This mitigation shifts the burden of denial-of-service from the validator's node directly to its sentry nodes, and can require that new sentry nodes are spun up or activated to mitigate attacks on existing ones.  Sentry nodes can be quickly spun up or change their IP addresses. Because the links to the sentry nodes are in private IP space, an internet-based attack cannot disturb them directly. This strategy ensures that validator block proposals and votes have a much higher chance to make it to the rest of the network.  For more sentry node details, see the CometBFT Documentation or the Sentry Node Architecture Overview on the forum. ","version":"Latest","tagName":"h3"}],"options":{"id":"default"}}