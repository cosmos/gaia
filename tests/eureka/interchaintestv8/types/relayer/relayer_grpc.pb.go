// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: relayer/relayer.proto

package relayer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RelayerService_RelayByTx_FullMethodName = "/relayer.RelayerService/RelayByTx"
	RelayerService_Info_FullMethodName      = "/relayer.RelayerService/Info"
)

// RelayerServiceClient is the client API for RelayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The relayer service definition
// Each relayer service is defined between two chains.
// One chain is the source chain, and the other chain is the target chain.
type RelayerServiceClient interface {
	// Relay the ibc packets produced by the results of transactions
	RelayByTx(ctx context.Context, in *RelayByTxRequest, opts ...grpc.CallOption) (*RelayByTxResponse, error)
	// Request relayer information
	Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error)
}

type relayerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRelayerServiceClient(cc grpc.ClientConnInterface) RelayerServiceClient {
	return &relayerServiceClient{cc}
}

func (c *relayerServiceClient) RelayByTx(ctx context.Context, in *RelayByTxRequest, opts ...grpc.CallOption) (*RelayByTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RelayByTxResponse)
	err := c.cc.Invoke(ctx, RelayerService_RelayByTx_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *relayerServiceClient) Info(ctx context.Context, in *InfoRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, RelayerService_Info_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelayerServiceServer is the server API for RelayerService service.
// All implementations must embed UnimplementedRelayerServiceServer
// for forward compatibility.
//
// The relayer service definition
// Each relayer service is defined between two chains.
// One chain is the source chain, and the other chain is the target chain.
type RelayerServiceServer interface {
	// Relay the ibc packets produced by the results of transactions
	RelayByTx(context.Context, *RelayByTxRequest) (*RelayByTxResponse, error)
	// Request relayer information
	Info(context.Context, *InfoRequest) (*InfoResponse, error)
	mustEmbedUnimplementedRelayerServiceServer()
}

// UnimplementedRelayerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRelayerServiceServer struct{}

func (UnimplementedRelayerServiceServer) RelayByTx(context.Context, *RelayByTxRequest) (*RelayByTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayByTx not implemented")
}
func (UnimplementedRelayerServiceServer) Info(context.Context, *InfoRequest) (*InfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedRelayerServiceServer) mustEmbedUnimplementedRelayerServiceServer() {}
func (UnimplementedRelayerServiceServer) testEmbeddedByValue()                        {}

// UnsafeRelayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelayerServiceServer will
// result in compilation errors.
type UnsafeRelayerServiceServer interface {
	mustEmbedUnimplementedRelayerServiceServer()
}

func RegisterRelayerServiceServer(s grpc.ServiceRegistrar, srv RelayerServiceServer) {
	// If the following call pancis, it indicates UnimplementedRelayerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RelayerService_ServiceDesc, srv)
}

func _RelayerService_RelayByTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayByTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerServiceServer).RelayByTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerService_RelayByTx_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerServiceServer).RelayByTx(ctx, req.(*RelayByTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RelayerService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelayerServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RelayerService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelayerServiceServer).Info(ctx, req.(*InfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelayerService_ServiceDesc is the grpc.ServiceDesc for RelayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relayer.RelayerService",
	HandlerType: (*RelayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RelayByTx",
			Handler:    _RelayerService_RelayByTx_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _RelayerService_Info_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relayer/relayer.proto",
}
