// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	address "cosmossdk.io/core/address"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"
)

// AccountKeeper is an autogenerated mock type for the AccountKeeper type
type AccountKeeper struct {
	mock.Mock
}

type AccountKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *AccountKeeper) EXPECT() *AccountKeeper_Expecter {
	return &AccountKeeper_Expecter{mock: &_m.Mock}
}

// AddressCodec provides a mock function with given fields:
func (_m *AccountKeeper) AddressCodec() address.Codec {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AddressCodec")
	}

	var r0 address.Codec
	if rf, ok := ret.Get(0).(func() address.Codec); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(address.Codec)
		}
	}

	return r0
}

// AccountKeeper_AddressCodec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddressCodec'
type AccountKeeper_AddressCodec_Call struct {
	*mock.Call
}

// AddressCodec is a helper method to define mock.On call
func (_e *AccountKeeper_Expecter) AddressCodec() *AccountKeeper_AddressCodec_Call {
	return &AccountKeeper_AddressCodec_Call{Call: _e.mock.On("AddressCodec")}
}

func (_c *AccountKeeper_AddressCodec_Call) Run(run func()) *AccountKeeper_AddressCodec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *AccountKeeper_AddressCodec_Call) Return(_a0 address.Codec) *AccountKeeper_AddressCodec_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountKeeper_AddressCodec_Call) RunAndReturn(run func() address.Codec) *AccountKeeper_AddressCodec_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function with given fields: ctx, addr
func (_m *AccountKeeper) GetAccount(ctx context.Context, addr cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI {
	ret := _m.Called(ctx, addr)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 cosmos_sdktypes.AccountI
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI); ok {
		r0 = rf(ctx, addr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.AccountI)
		}
	}

	return r0
}

// AccountKeeper_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type AccountKeeper_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - addr cosmos_sdktypes.AccAddress
func (_e *AccountKeeper_Expecter) GetAccount(ctx interface{}, addr interface{}) *AccountKeeper_GetAccount_Call {
	return &AccountKeeper_GetAccount_Call{Call: _e.mock.On("GetAccount", ctx, addr)}
}

func (_c *AccountKeeper_GetAccount_Call) Run(run func(ctx context.Context, addr cosmos_sdktypes.AccAddress)) *AccountKeeper_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress))
	})
	return _c
}

func (_c *AccountKeeper_GetAccount_Call) Return(_a0 cosmos_sdktypes.AccountI) *AccountKeeper_GetAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountKeeper_GetAccount_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress) cosmos_sdktypes.AccountI) *AccountKeeper_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleAccount provides a mock function with given fields: ctx, moduleName
func (_m *AccountKeeper) GetModuleAccount(ctx context.Context, moduleName string) cosmos_sdktypes.ModuleAccountI {
	ret := _m.Called(ctx, moduleName)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAccount")
	}

	var r0 cosmos_sdktypes.ModuleAccountI
	if rf, ok := ret.Get(0).(func(context.Context, string) cosmos_sdktypes.ModuleAccountI); ok {
		r0 = rf(ctx, moduleName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.ModuleAccountI)
		}
	}

	return r0
}

// AccountKeeper_GetModuleAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleAccount'
type AccountKeeper_GetModuleAccount_Call struct {
	*mock.Call
}

// GetModuleAccount is a helper method to define mock.On call
//   - ctx context.Context
//   - moduleName string
func (_e *AccountKeeper_Expecter) GetModuleAccount(ctx interface{}, moduleName interface{}) *AccountKeeper_GetModuleAccount_Call {
	return &AccountKeeper_GetModuleAccount_Call{Call: _e.mock.On("GetModuleAccount", ctx, moduleName)}
}

func (_c *AccountKeeper_GetModuleAccount_Call) Run(run func(ctx context.Context, moduleName string)) *AccountKeeper_GetModuleAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *AccountKeeper_GetModuleAccount_Call) Return(_a0 cosmos_sdktypes.ModuleAccountI) *AccountKeeper_GetModuleAccount_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountKeeper_GetModuleAccount_Call) RunAndReturn(run func(context.Context, string) cosmos_sdktypes.ModuleAccountI) *AccountKeeper_GetModuleAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetModuleAddress provides a mock function with given fields: name
func (_m *AccountKeeper) GetModuleAddress(name string) cosmos_sdktypes.AccAddress {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetModuleAddress")
	}

	var r0 cosmos_sdktypes.AccAddress
	if rf, ok := ret.Get(0).(func(string) cosmos_sdktypes.AccAddress); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.AccAddress)
		}
	}

	return r0
}

// AccountKeeper_GetModuleAddress_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetModuleAddress'
type AccountKeeper_GetModuleAddress_Call struct {
	*mock.Call
}

// GetModuleAddress is a helper method to define mock.On call
//   - name string
func (_e *AccountKeeper_Expecter) GetModuleAddress(name interface{}) *AccountKeeper_GetModuleAddress_Call {
	return &AccountKeeper_GetModuleAddress_Call{Call: _e.mock.On("GetModuleAddress", name)}
}

func (_c *AccountKeeper_GetModuleAddress_Call) Run(run func(name string)) *AccountKeeper_GetModuleAddress_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AccountKeeper_GetModuleAddress_Call) Return(_a0 cosmos_sdktypes.AccAddress) *AccountKeeper_GetModuleAddress_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AccountKeeper_GetModuleAddress_Call) RunAndReturn(run func(string) cosmos_sdktypes.AccAddress) *AccountKeeper_GetModuleAddress_Call {
	_c.Call.Return(run)
	return _c
}

// NewAccountKeeper creates a new instance of AccountKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccountKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *AccountKeeper {
	mock := &AccountKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
