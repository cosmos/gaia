// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	cosmos_sdktypes "github.com/cosmos/cosmos-sdk/types"

	mock "github.com/stretchr/testify/mock"

	types "github.com/cosmos/cosmos-sdk/x/staking/types"
)

// DistributionKeeper is an autogenerated mock type for the DistributionKeeper type
type DistributionKeeper struct {
	mock.Mock
}

type DistributionKeeper_Expecter struct {
	mock *mock.Mock
}

func (_m *DistributionKeeper) EXPECT() *DistributionKeeper_Expecter {
	return &DistributionKeeper_Expecter{mock: &_m.Mock}
}

// CalculateDelegationRewards provides a mock function with given fields: ctx, val, del, endingPeriod
func (_m *DistributionKeeper) CalculateDelegationRewards(ctx context.Context, val types.ValidatorI, del types.DelegationI, endingPeriod uint64) (cosmos_sdktypes.DecCoins, error) {
	ret := _m.Called(ctx, val, del, endingPeriod)

	if len(ret) == 0 {
		panic("no return value specified for CalculateDelegationRewards")
	}

	var r0 cosmos_sdktypes.DecCoins
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ValidatorI, types.DelegationI, uint64) (cosmos_sdktypes.DecCoins, error)); ok {
		return rf(ctx, val, del, endingPeriod)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ValidatorI, types.DelegationI, uint64) cosmos_sdktypes.DecCoins); ok {
		r0 = rf(ctx, val, del, endingPeriod)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.DecCoins)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ValidatorI, types.DelegationI, uint64) error); ok {
		r1 = rf(ctx, val, del, endingPeriod)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistributionKeeper_CalculateDelegationRewards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CalculateDelegationRewards'
type DistributionKeeper_CalculateDelegationRewards_Call struct {
	*mock.Call
}

// CalculateDelegationRewards is a helper method to define mock.On call
//   - ctx context.Context
//   - val types.ValidatorI
//   - del types.DelegationI
//   - endingPeriod uint64
func (_e *DistributionKeeper_Expecter) CalculateDelegationRewards(ctx interface{}, val interface{}, del interface{}, endingPeriod interface{}) *DistributionKeeper_CalculateDelegationRewards_Call {
	return &DistributionKeeper_CalculateDelegationRewards_Call{Call: _e.mock.On("CalculateDelegationRewards", ctx, val, del, endingPeriod)}
}

func (_c *DistributionKeeper_CalculateDelegationRewards_Call) Run(run func(ctx context.Context, val types.ValidatorI, del types.DelegationI, endingPeriod uint64)) *DistributionKeeper_CalculateDelegationRewards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ValidatorI), args[2].(types.DelegationI), args[3].(uint64))
	})
	return _c
}

func (_c *DistributionKeeper_CalculateDelegationRewards_Call) Return(rewards cosmos_sdktypes.DecCoins, err error) *DistributionKeeper_CalculateDelegationRewards_Call {
	_c.Call.Return(rewards, err)
	return _c
}

func (_c *DistributionKeeper_CalculateDelegationRewards_Call) RunAndReturn(run func(context.Context, types.ValidatorI, types.DelegationI, uint64) (cosmos_sdktypes.DecCoins, error)) *DistributionKeeper_CalculateDelegationRewards_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementValidatorPeriod provides a mock function with given fields: ctx, val
func (_m *DistributionKeeper) IncrementValidatorPeriod(ctx context.Context, val types.ValidatorI) (uint64, error) {
	ret := _m.Called(ctx, val)

	if len(ret) == 0 {
		panic("no return value specified for IncrementValidatorPeriod")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ValidatorI) (uint64, error)); ok {
		return rf(ctx, val)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ValidatorI) uint64); ok {
		r0 = rf(ctx, val)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ValidatorI) error); ok {
		r1 = rf(ctx, val)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistributionKeeper_IncrementValidatorPeriod_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementValidatorPeriod'
type DistributionKeeper_IncrementValidatorPeriod_Call struct {
	*mock.Call
}

// IncrementValidatorPeriod is a helper method to define mock.On call
//   - ctx context.Context
//   - val types.ValidatorI
func (_e *DistributionKeeper_Expecter) IncrementValidatorPeriod(ctx interface{}, val interface{}) *DistributionKeeper_IncrementValidatorPeriod_Call {
	return &DistributionKeeper_IncrementValidatorPeriod_Call{Call: _e.mock.On("IncrementValidatorPeriod", ctx, val)}
}

func (_c *DistributionKeeper_IncrementValidatorPeriod_Call) Run(run func(ctx context.Context, val types.ValidatorI)) *DistributionKeeper_IncrementValidatorPeriod_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ValidatorI))
	})
	return _c
}

func (_c *DistributionKeeper_IncrementValidatorPeriod_Call) Return(_a0 uint64, _a1 error) *DistributionKeeper_IncrementValidatorPeriod_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DistributionKeeper_IncrementValidatorPeriod_Call) RunAndReturn(run func(context.Context, types.ValidatorI) (uint64, error)) *DistributionKeeper_IncrementValidatorPeriod_Call {
	_c.Call.Return(run)
	return _c
}

// WithdrawDelegationRewards provides a mock function with given fields: ctx, delAddr, valAddr
func (_m *DistributionKeeper) WithdrawDelegationRewards(ctx context.Context, delAddr cosmos_sdktypes.AccAddress, valAddr cosmos_sdktypes.ValAddress) (cosmos_sdktypes.Coins, error) {
	ret := _m.Called(ctx, delAddr, valAddr)

	if len(ret) == 0 {
		panic("no return value specified for WithdrawDelegationRewards")
	}

	var r0 cosmos_sdktypes.Coins
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) (cosmos_sdktypes.Coins, error)); ok {
		return rf(ctx, delAddr, valAddr)
	}
	if rf, ok := ret.Get(0).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) cosmos_sdktypes.Coins); ok {
		r0 = rf(ctx, delAddr, valAddr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(cosmos_sdktypes.Coins)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) error); ok {
		r1 = rf(ctx, delAddr, valAddr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DistributionKeeper_WithdrawDelegationRewards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithdrawDelegationRewards'
type DistributionKeeper_WithdrawDelegationRewards_Call struct {
	*mock.Call
}

// WithdrawDelegationRewards is a helper method to define mock.On call
//   - ctx context.Context
//   - delAddr cosmos_sdktypes.AccAddress
//   - valAddr cosmos_sdktypes.ValAddress
func (_e *DistributionKeeper_Expecter) WithdrawDelegationRewards(ctx interface{}, delAddr interface{}, valAddr interface{}) *DistributionKeeper_WithdrawDelegationRewards_Call {
	return &DistributionKeeper_WithdrawDelegationRewards_Call{Call: _e.mock.On("WithdrawDelegationRewards", ctx, delAddr, valAddr)}
}

func (_c *DistributionKeeper_WithdrawDelegationRewards_Call) Run(run func(ctx context.Context, delAddr cosmos_sdktypes.AccAddress, valAddr cosmos_sdktypes.ValAddress)) *DistributionKeeper_WithdrawDelegationRewards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(cosmos_sdktypes.AccAddress), args[2].(cosmos_sdktypes.ValAddress))
	})
	return _c
}

func (_c *DistributionKeeper_WithdrawDelegationRewards_Call) Return(_a0 cosmos_sdktypes.Coins, _a1 error) *DistributionKeeper_WithdrawDelegationRewards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *DistributionKeeper_WithdrawDelegationRewards_Call) RunAndReturn(run func(context.Context, cosmos_sdktypes.AccAddress, cosmos_sdktypes.ValAddress) (cosmos_sdktypes.Coins, error)) *DistributionKeeper_WithdrawDelegationRewards_Call {
	_c.Call.Return(run)
	return _c
}

// NewDistributionKeeper creates a new instance of DistributionKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDistributionKeeper(t interface {
	mock.TestingT
	Cleanup(func())
},
) *DistributionKeeper {
	mock := &DistributionKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
