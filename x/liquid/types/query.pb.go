// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gaia/liquid/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryLiquidValidatorRequest is the request type for the Query/LiquidValidator
// RPC method.
type QueryLiquidValidatorRequest struct {
	ValidatorAddr string `protobuf:"bytes,1,opt,name=validator_addr,json=validatorAddr,proto3" json:"validator_addr,omitempty"`
}

func (m *QueryLiquidValidatorRequest) Reset()         { *m = QueryLiquidValidatorRequest{} }
func (m *QueryLiquidValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorRequest) ProtoMessage()    {}
func (*QueryLiquidValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{0}
}
func (m *QueryLiquidValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorRequest.Merge(m, src)
}
func (m *QueryLiquidValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorRequest proto.InternalMessageInfo

func (m *QueryLiquidValidatorRequest) GetValidatorAddr() string {
	if m != nil {
		return m.ValidatorAddr
	}
	return ""
}

// QueryLiquidValidatorResponse is the response type for the
// Query/LiquidValidator RPC method.
type QueryLiquidValidatorResponse struct {
	LiquidValidator LiquidValidator `protobuf:"bytes,1,opt,name=liquid_validator,json=liquidValidator,proto3" json:"liquid_validator"`
}

func (m *QueryLiquidValidatorResponse) Reset()         { *m = QueryLiquidValidatorResponse{} }
func (m *QueryLiquidValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorResponse) ProtoMessage()    {}
func (*QueryLiquidValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{1}
}
func (m *QueryLiquidValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorResponse.Merge(m, src)
}
func (m *QueryLiquidValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorResponse proto.InternalMessageInfo

func (m *QueryLiquidValidatorResponse) GetLiquidValidator() LiquidValidator {
	if m != nil {
		return m.LiquidValidator
	}
	return LiquidValidator{}
}

// QueryLiquidValidatorsRequest is request type for the
// Query/QueryLiquidValidators RPC method.
type QueryLiquidValidatorsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidValidatorsRequest) Reset()         { *m = QueryLiquidValidatorsRequest{} }
func (m *QueryLiquidValidatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorsRequest) ProtoMessage()    {}
func (*QueryLiquidValidatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{2}
}
func (m *QueryLiquidValidatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorsRequest.Merge(m, src)
}
func (m *QueryLiquidValidatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorsRequest proto.InternalMessageInfo

func (m *QueryLiquidValidatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLiquidValidatorsResponse is response type for the
// Query/QueryLiquidValidators RPC method.
type QueryLiquidValidatorsResponse struct {
	LiquidValidators []LiquidValidator `protobuf:"bytes,1,rep,name=liquid_validators,json=liquidValidators,proto3" json:"liquid_validators"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLiquidValidatorsResponse) Reset()         { *m = QueryLiquidValidatorsResponse{} }
func (m *QueryLiquidValidatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLiquidValidatorsResponse) ProtoMessage()    {}
func (*QueryLiquidValidatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{3}
}
func (m *QueryLiquidValidatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLiquidValidatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLiquidValidatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLiquidValidatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLiquidValidatorsResponse.Merge(m, src)
}
func (m *QueryLiquidValidatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLiquidValidatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLiquidValidatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLiquidValidatorsResponse proto.InternalMessageInfo

func (m *QueryLiquidValidatorsResponse) GetLiquidValidators() []LiquidValidator {
	if m != nil {
		return m.LiquidValidators
	}
	return nil
}

func (m *QueryLiquidValidatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{4}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{5}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryTokenizeShareRecordByIdRequest is request type for the
// Query/QueryTokenizeShareRecordById RPC method.
type QueryTokenizeShareRecordByIdRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryTokenizeShareRecordByIdRequest) Reset()         { *m = QueryTokenizeShareRecordByIdRequest{} }
func (m *QueryTokenizeShareRecordByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordByIdRequest) ProtoMessage()    {}
func (*QueryTokenizeShareRecordByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{6}
}
func (m *QueryTokenizeShareRecordByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordByIdRequest.Merge(m, src)
}
func (m *QueryTokenizeShareRecordByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordByIdRequest proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordByIdRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryTokenizeShareRecordByIdRequest is response type for the
// Query/QueryTokenizeShareRecordById RPC method.
type QueryTokenizeShareRecordByIdResponse struct {
	Record TokenizeShareRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *QueryTokenizeShareRecordByIdResponse) Reset()         { *m = QueryTokenizeShareRecordByIdResponse{} }
func (m *QueryTokenizeShareRecordByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordByIdResponse) ProtoMessage()    {}
func (*QueryTokenizeShareRecordByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{7}
}
func (m *QueryTokenizeShareRecordByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordByIdResponse.Merge(m, src)
}
func (m *QueryTokenizeShareRecordByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordByIdResponse proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordByIdResponse) GetRecord() TokenizeShareRecord {
	if m != nil {
		return m.Record
	}
	return TokenizeShareRecord{}
}

// QueryTokenizeShareRecordByDenomRequest is request type for the
// Query/QueryTokenizeShareRecordByDenom RPC method.
type QueryTokenizeShareRecordByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTokenizeShareRecordByDenomRequest) Reset() {
	*m = QueryTokenizeShareRecordByDenomRequest{}
}
func (m *QueryTokenizeShareRecordByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordByDenomRequest) ProtoMessage()    {}
func (*QueryTokenizeShareRecordByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{8}
}
func (m *QueryTokenizeShareRecordByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordByDenomRequest.Merge(m, src)
}
func (m *QueryTokenizeShareRecordByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordByDenomRequest proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryTokenizeShareRecordByDenomResponse is response type for the
// Query/QueryTokenizeShareRecordByDenom RPC method.
type QueryTokenizeShareRecordByDenomResponse struct {
	Record TokenizeShareRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *QueryTokenizeShareRecordByDenomResponse) Reset() {
	*m = QueryTokenizeShareRecordByDenomResponse{}
}
func (m *QueryTokenizeShareRecordByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordByDenomResponse) ProtoMessage()    {}
func (*QueryTokenizeShareRecordByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{9}
}
func (m *QueryTokenizeShareRecordByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordByDenomResponse.Merge(m, src)
}
func (m *QueryTokenizeShareRecordByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordByDenomResponse proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordByDenomResponse) GetRecord() TokenizeShareRecord {
	if m != nil {
		return m.Record
	}
	return TokenizeShareRecord{}
}

// QueryTokenizeShareRecordsOwnedRequest is request type for the
// Query/QueryTokenizeShareRecordsOwned RPC method.
type QueryTokenizeShareRecordsOwnedRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryTokenizeShareRecordsOwnedRequest) Reset()         { *m = QueryTokenizeShareRecordsOwnedRequest{} }
func (m *QueryTokenizeShareRecordsOwnedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordsOwnedRequest) ProtoMessage()    {}
func (*QueryTokenizeShareRecordsOwnedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{10}
}
func (m *QueryTokenizeShareRecordsOwnedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordsOwnedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordsOwnedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordsOwnedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordsOwnedRequest.Merge(m, src)
}
func (m *QueryTokenizeShareRecordsOwnedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordsOwnedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordsOwnedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordsOwnedRequest proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordsOwnedRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

// QueryTokenizeShareRecordsOwnedResponse is response type for the
// Query/QueryTokenizeShareRecordsOwned RPC method.
type QueryTokenizeShareRecordsOwnedResponse struct {
	Records []TokenizeShareRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
}

func (m *QueryTokenizeShareRecordsOwnedResponse) Reset() {
	*m = QueryTokenizeShareRecordsOwnedResponse{}
}
func (m *QueryTokenizeShareRecordsOwnedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordsOwnedResponse) ProtoMessage()    {}
func (*QueryTokenizeShareRecordsOwnedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{11}
}
func (m *QueryTokenizeShareRecordsOwnedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordsOwnedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordsOwnedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordsOwnedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordsOwnedResponse.Merge(m, src)
}
func (m *QueryTokenizeShareRecordsOwnedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordsOwnedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordsOwnedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordsOwnedResponse proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordsOwnedResponse) GetRecords() []TokenizeShareRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

// QueryAllTokenizeShareRecordsRequest is request type for the
// Query/QueryAllTokenizeShareRecords RPC method.
type QueryAllTokenizeShareRecordsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenizeShareRecordsRequest) Reset()         { *m = QueryAllTokenizeShareRecordsRequest{} }
func (m *QueryAllTokenizeShareRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenizeShareRecordsRequest) ProtoMessage()    {}
func (*QueryAllTokenizeShareRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{12}
}
func (m *QueryAllTokenizeShareRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenizeShareRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenizeShareRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenizeShareRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenizeShareRecordsRequest.Merge(m, src)
}
func (m *QueryAllTokenizeShareRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenizeShareRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenizeShareRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenizeShareRecordsRequest proto.InternalMessageInfo

func (m *QueryAllTokenizeShareRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllTokenizeShareRecordsResponse is response type for the
// Query/QueryAllTokenizeShareRecords RPC method.
type QueryAllTokenizeShareRecordsResponse struct {
	Records []TokenizeShareRecord `protobuf:"bytes,1,rep,name=records,proto3" json:"records"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenizeShareRecordsResponse) Reset()         { *m = QueryAllTokenizeShareRecordsResponse{} }
func (m *QueryAllTokenizeShareRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenizeShareRecordsResponse) ProtoMessage()    {}
func (*QueryAllTokenizeShareRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{13}
}
func (m *QueryAllTokenizeShareRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenizeShareRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenizeShareRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenizeShareRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenizeShareRecordsResponse.Merge(m, src)
}
func (m *QueryAllTokenizeShareRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenizeShareRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenizeShareRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenizeShareRecordsResponse proto.InternalMessageInfo

func (m *QueryAllTokenizeShareRecordsResponse) GetRecords() []TokenizeShareRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *QueryAllTokenizeShareRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryLastTokenizeShareRecordIdRequest is request type for the
// Query/QueryLastTokenizeShareRecordId RPC method.
type QueryLastTokenizeShareRecordIdRequest struct {
}

func (m *QueryLastTokenizeShareRecordIdRequest) Reset()         { *m = QueryLastTokenizeShareRecordIdRequest{} }
func (m *QueryLastTokenizeShareRecordIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastTokenizeShareRecordIdRequest) ProtoMessage()    {}
func (*QueryLastTokenizeShareRecordIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{14}
}
func (m *QueryLastTokenizeShareRecordIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastTokenizeShareRecordIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastTokenizeShareRecordIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastTokenizeShareRecordIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastTokenizeShareRecordIdRequest.Merge(m, src)
}
func (m *QueryLastTokenizeShareRecordIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastTokenizeShareRecordIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastTokenizeShareRecordIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastTokenizeShareRecordIdRequest proto.InternalMessageInfo

// QueryLastTokenizeShareRecordIdResponse is response type for the
// Query/QueryLastTokenizeShareRecordId RPC method.
type QueryLastTokenizeShareRecordIdResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryLastTokenizeShareRecordIdResponse) Reset() {
	*m = QueryLastTokenizeShareRecordIdResponse{}
}
func (m *QueryLastTokenizeShareRecordIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastTokenizeShareRecordIdResponse) ProtoMessage()    {}
func (*QueryLastTokenizeShareRecordIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{15}
}
func (m *QueryLastTokenizeShareRecordIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastTokenizeShareRecordIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastTokenizeShareRecordIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastTokenizeShareRecordIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastTokenizeShareRecordIdResponse.Merge(m, src)
}
func (m *QueryLastTokenizeShareRecordIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastTokenizeShareRecordIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastTokenizeShareRecordIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastTokenizeShareRecordIdResponse proto.InternalMessageInfo

func (m *QueryLastTokenizeShareRecordIdResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

// QueryTotalTokenizeSharedAssetsRequest is request type for the
// Query/QueryTotalTokenizeSharedAssets RPC method.
type QueryTotalTokenizeSharedAssetsRequest struct {
}

func (m *QueryTotalTokenizeSharedAssetsRequest) Reset()         { *m = QueryTotalTokenizeSharedAssetsRequest{} }
func (m *QueryTotalTokenizeSharedAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalTokenizeSharedAssetsRequest) ProtoMessage()    {}
func (*QueryTotalTokenizeSharedAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{16}
}
func (m *QueryTotalTokenizeSharedAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalTokenizeSharedAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalTokenizeSharedAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalTokenizeSharedAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalTokenizeSharedAssetsRequest.Merge(m, src)
}
func (m *QueryTotalTokenizeSharedAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalTokenizeSharedAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalTokenizeSharedAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalTokenizeSharedAssetsRequest proto.InternalMessageInfo

// QueryTotalTokenizeSharedAssetsResponse is response type for the
// Query/QueryTotalTokenizeSharedAssets RPC method.
type QueryTotalTokenizeSharedAssetsResponse struct {
	Value types.Coin `protobuf:"bytes,1,opt,name=value,proto3" json:"value"`
}

func (m *QueryTotalTokenizeSharedAssetsResponse) Reset() {
	*m = QueryTotalTokenizeSharedAssetsResponse{}
}
func (m *QueryTotalTokenizeSharedAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalTokenizeSharedAssetsResponse) ProtoMessage()    {}
func (*QueryTotalTokenizeSharedAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{17}
}
func (m *QueryTotalTokenizeSharedAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalTokenizeSharedAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalTokenizeSharedAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalTokenizeSharedAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalTokenizeSharedAssetsResponse.Merge(m, src)
}
func (m *QueryTotalTokenizeSharedAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalTokenizeSharedAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalTokenizeSharedAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalTokenizeSharedAssetsResponse proto.InternalMessageInfo

func (m *QueryTotalTokenizeSharedAssetsResponse) GetValue() types.Coin {
	if m != nil {
		return m.Value
	}
	return types.Coin{}
}

// QueryTotalLiquidStakedRequest is request type for the
// Query/QueryQueryTotalLiquidStaked RPC method.
type QueryTotalLiquidStaked struct {
}

func (m *QueryTotalLiquidStaked) Reset()         { *m = QueryTotalLiquidStaked{} }
func (m *QueryTotalLiquidStaked) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidStaked) ProtoMessage()    {}
func (*QueryTotalLiquidStaked) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{18}
}
func (m *QueryTotalLiquidStaked) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidStaked) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidStaked.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidStaked) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidStaked.Merge(m, src)
}
func (m *QueryTotalLiquidStaked) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidStaked) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidStaked.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidStaked proto.InternalMessageInfo

// QueryTotalLiquidStakedResponse is response type for the
// Query/QueryQueryTotalLiquidStaked RPC method.
type QueryTotalLiquidStakedResponse struct {
	Tokens string `protobuf:"bytes,1,opt,name=tokens,proto3" json:"tokens,omitempty"`
}

func (m *QueryTotalLiquidStakedResponse) Reset()         { *m = QueryTotalLiquidStakedResponse{} }
func (m *QueryTotalLiquidStakedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalLiquidStakedResponse) ProtoMessage()    {}
func (*QueryTotalLiquidStakedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{19}
}
func (m *QueryTotalLiquidStakedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalLiquidStakedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalLiquidStakedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalLiquidStakedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalLiquidStakedResponse.Merge(m, src)
}
func (m *QueryTotalLiquidStakedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalLiquidStakedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalLiquidStakedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalLiquidStakedResponse proto.InternalMessageInfo

func (m *QueryTotalLiquidStakedResponse) GetTokens() string {
	if m != nil {
		return m.Tokens
	}
	return ""
}

// QueryTokenizeShareLockInfo queries the tokenize share lock information
// associated with given account
type QueryTokenizeShareLockInfo struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryTokenizeShareLockInfo) Reset()         { *m = QueryTokenizeShareLockInfo{} }
func (m *QueryTokenizeShareLockInfo) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareLockInfo) ProtoMessage()    {}
func (*QueryTokenizeShareLockInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{20}
}
func (m *QueryTokenizeShareLockInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareLockInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareLockInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareLockInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareLockInfo.Merge(m, src)
}
func (m *QueryTokenizeShareLockInfo) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareLockInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareLockInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareLockInfo proto.InternalMessageInfo

func (m *QueryTokenizeShareLockInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryTokenizeShareLockInfoResponse is the response from the
// QueryTokenizeShareLockInfo query
type QueryTokenizeShareLockInfoResponse struct {
	Status         string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	ExpirationTime string `protobuf:"bytes,2,opt,name=expiration_time,json=expirationTime,proto3" json:"expiration_time,omitempty"`
}

func (m *QueryTokenizeShareLockInfoResponse) Reset()         { *m = QueryTokenizeShareLockInfoResponse{} }
func (m *QueryTokenizeShareLockInfoResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareLockInfoResponse) ProtoMessage()    {}
func (*QueryTokenizeShareLockInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{21}
}
func (m *QueryTokenizeShareLockInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareLockInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareLockInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareLockInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareLockInfoResponse.Merge(m, src)
}
func (m *QueryTokenizeShareLockInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareLockInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareLockInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareLockInfoResponse proto.InternalMessageInfo

func (m *QueryTokenizeShareLockInfoResponse) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *QueryTokenizeShareLockInfoResponse) GetExpirationTime() string {
	if m != nil {
		return m.ExpirationTime
	}
	return ""
}

// QueryTokenizeShareRecordRewardRequest is the request type for the
// Query/TokenizeShareRecordReward RPC method.
type QueryTokenizeShareRecordRewardRequest struct {
	OwnerAddress string `protobuf:"bytes,1,opt,name=owner_address,json=ownerAddress,proto3" json:"owner_address,omitempty" yaml:"owner_address"`
}

func (m *QueryTokenizeShareRecordRewardRequest) Reset()         { *m = QueryTokenizeShareRecordRewardRequest{} }
func (m *QueryTokenizeShareRecordRewardRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordRewardRequest) ProtoMessage()    {}
func (*QueryTokenizeShareRecordRewardRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{22}
}
func (m *QueryTokenizeShareRecordRewardRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordRewardRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordRewardRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordRewardRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordRewardRequest.Merge(m, src)
}
func (m *QueryTokenizeShareRecordRewardRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordRewardRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordRewardRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordRewardRequest proto.InternalMessageInfo

// QueryTokenizeShareRecordRewardResponse is the response type for the
// Query/TokenizeShareRecordReward RPC method.
type QueryTokenizeShareRecordRewardResponse struct {
	// rewards defines all the rewards accrued by a delegator.
	Rewards []TokenizeShareRecordReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards"`
	// total defines the sum of all the rewards.
	Total github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=total,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"total"`
}

func (m *QueryTokenizeShareRecordRewardResponse) Reset() {
	*m = QueryTokenizeShareRecordRewardResponse{}
}
func (m *QueryTokenizeShareRecordRewardResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTokenizeShareRecordRewardResponse) ProtoMessage()    {}
func (*QueryTokenizeShareRecordRewardResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7f79c476d0ac005, []int{23}
}
func (m *QueryTokenizeShareRecordRewardResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTokenizeShareRecordRewardResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTokenizeShareRecordRewardResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTokenizeShareRecordRewardResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTokenizeShareRecordRewardResponse.Merge(m, src)
}
func (m *QueryTokenizeShareRecordRewardResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTokenizeShareRecordRewardResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTokenizeShareRecordRewardResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTokenizeShareRecordRewardResponse proto.InternalMessageInfo

func (m *QueryTokenizeShareRecordRewardResponse) GetRewards() []TokenizeShareRecordReward {
	if m != nil {
		return m.Rewards
	}
	return nil
}

func (m *QueryTokenizeShareRecordRewardResponse) GetTotal() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Total
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryLiquidValidatorRequest)(nil), "gaia.liquid.v1beta1.QueryLiquidValidatorRequest")
	proto.RegisterType((*QueryLiquidValidatorResponse)(nil), "gaia.liquid.v1beta1.QueryLiquidValidatorResponse")
	proto.RegisterType((*QueryLiquidValidatorsRequest)(nil), "gaia.liquid.v1beta1.QueryLiquidValidatorsRequest")
	proto.RegisterType((*QueryLiquidValidatorsResponse)(nil), "gaia.liquid.v1beta1.QueryLiquidValidatorsResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "gaia.liquid.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "gaia.liquid.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryTokenizeShareRecordByIdRequest)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordByIdRequest")
	proto.RegisterType((*QueryTokenizeShareRecordByIdResponse)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordByIdResponse")
	proto.RegisterType((*QueryTokenizeShareRecordByDenomRequest)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordByDenomRequest")
	proto.RegisterType((*QueryTokenizeShareRecordByDenomResponse)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordByDenomResponse")
	proto.RegisterType((*QueryTokenizeShareRecordsOwnedRequest)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordsOwnedRequest")
	proto.RegisterType((*QueryTokenizeShareRecordsOwnedResponse)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordsOwnedResponse")
	proto.RegisterType((*QueryAllTokenizeShareRecordsRequest)(nil), "gaia.liquid.v1beta1.QueryAllTokenizeShareRecordsRequest")
	proto.RegisterType((*QueryAllTokenizeShareRecordsResponse)(nil), "gaia.liquid.v1beta1.QueryAllTokenizeShareRecordsResponse")
	proto.RegisterType((*QueryLastTokenizeShareRecordIdRequest)(nil), "gaia.liquid.v1beta1.QueryLastTokenizeShareRecordIdRequest")
	proto.RegisterType((*QueryLastTokenizeShareRecordIdResponse)(nil), "gaia.liquid.v1beta1.QueryLastTokenizeShareRecordIdResponse")
	proto.RegisterType((*QueryTotalTokenizeSharedAssetsRequest)(nil), "gaia.liquid.v1beta1.QueryTotalTokenizeSharedAssetsRequest")
	proto.RegisterType((*QueryTotalTokenizeSharedAssetsResponse)(nil), "gaia.liquid.v1beta1.QueryTotalTokenizeSharedAssetsResponse")
	proto.RegisterType((*QueryTotalLiquidStaked)(nil), "gaia.liquid.v1beta1.QueryTotalLiquidStaked")
	proto.RegisterType((*QueryTotalLiquidStakedResponse)(nil), "gaia.liquid.v1beta1.QueryTotalLiquidStakedResponse")
	proto.RegisterType((*QueryTokenizeShareLockInfo)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareLockInfo")
	proto.RegisterType((*QueryTokenizeShareLockInfoResponse)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareLockInfoResponse")
	proto.RegisterType((*QueryTokenizeShareRecordRewardRequest)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordRewardRequest")
	proto.RegisterType((*QueryTokenizeShareRecordRewardResponse)(nil), "gaia.liquid.v1beta1.QueryTokenizeShareRecordRewardResponse")
}

func init() { proto.RegisterFile("gaia/liquid/v1beta1/query.proto", fileDescriptor_a7f79c476d0ac005) }

var fileDescriptor_a7f79c476d0ac005 = []byte{
	// 1323 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0x86, 0x26, 0xa5, 0x03, 0xfd, 0x91, 0x69, 0x68, 0x9d, 0x4d, 0x6a, 0x47, 0x43, 0x13,
	0x5b, 0x89, 0xea, 0x6d, 0x62, 0xd2, 0xfc, 0x22, 0x29, 0x49, 0xa3, 0x42, 0x51, 0x04, 0xc5, 0x2d,
	0x1c, 0x2a, 0xa4, 0xd5, 0xc4, 0x3b, 0x71, 0x57, 0xb1, 0x77, 0x9c, 0x9d, 0x75, 0xd2, 0xd4, 0xf2,
	0x05, 0x09, 0xa9, 0x47, 0x24, 0xfe, 0x81, 0xde, 0x40, 0x1c, 0x10, 0x27, 0x24, 0x2e, 0x1c, 0x40,
	0x42, 0xbd, 0x20, 0x22, 0x21, 0x21, 0x0e, 0xa8, 0x94, 0x04, 0x09, 0xce, 0xfc, 0x05, 0x68, 0x67,
	0x66, 0x37, 0x5e, 0x67, 0x77, 0x6d, 0x47, 0xb9, 0xc4, 0xde, 0xd9, 0xf7, 0xcd, 0xfb, 0xbe, 0x99,
	0xf7, 0x66, 0x3e, 0x07, 0xa4, 0x4b, 0xd8, 0xc4, 0x5a, 0xd9, 0xdc, 0xaa, 0x99, 0x86, 0xb6, 0x3d,
	0xb9, 0x4e, 0x1c, 0x3c, 0xa9, 0x6d, 0xd5, 0x88, 0xbd, 0x9b, 0xab, 0xda, 0xd4, 0xa1, 0xf0, 0xa2,
	0x1b, 0x90, 0x13, 0x01, 0x39, 0x19, 0xa0, 0x8e, 0x17, 0x29, 0xab, 0x50, 0xa6, 0xad, 0x63, 0x46,
	0x44, 0xb4, 0x8f, 0xad, 0xe2, 0x92, 0x69, 0x61, 0xc7, 0xa4, 0x96, 0x98, 0x40, 0x1d, 0x28, 0xd1,
	0x12, 0xe5, 0x5f, 0x35, 0xf7, 0x9b, 0x1c, 0x1d, 0x2e, 0x51, 0x5a, 0x2a, 0x13, 0x0d, 0x57, 0x4d,
	0x0d, 0x5b, 0x16, 0x75, 0x38, 0x84, 0xc9, 0xb7, 0x23, 0x61, 0xac, 0x24, 0x07, 0x11, 0x91, 0x6a,
	0x66, 0xe0, 0x45, 0x14, 0xa9, 0xe9, 0x65, 0x1d, 0x92, 0xef, 0x3d, 0x72, 0xcd, 0x9a, 0xd4, 0x7e,
	0x5c, 0x31, 0x2d, 0xaa, 0xf1, 0xbf, 0x62, 0x08, 0xad, 0x82, 0xa1, 0x0f, 0xdc, 0x88, 0x35, 0x9e,
	0xe4, 0x23, 0x5c, 0x36, 0x0d, 0xec, 0x50, 0xbb, 0x40, 0xb6, 0x6a, 0x84, 0x39, 0x70, 0x14, 0x9c,
	0xdb, 0xf6, 0xc6, 0x74, 0x6c, 0x18, 0x76, 0x52, 0x19, 0x51, 0xb2, 0x67, 0x0a, 0x67, 0xfd, 0xd1,
	0x65, 0xc3, 0xb0, 0xd1, 0x63, 0x30, 0x1c, 0x3e, 0x0b, 0xab, 0x52, 0x8b, 0x11, 0xf8, 0x00, 0x5c,
	0x10, 0x2a, 0x74, 0x1f, 0xc7, 0x27, 0x7a, 0x65, 0xea, 0x6a, 0x2e, 0x64, 0x9d, 0x73, 0x2d, 0xf3,
	0xac, 0x9c, 0x79, 0xf6, 0x3c, 0x9d, 0xf8, 0xf2, 0x9f, 0x6f, 0xc6, 0x95, 0xc2, 0xf9, 0x72, 0xf0,
	0x1d, 0xda, 0x08, 0xcf, 0xcd, 0x3c, 0x09, 0xb7, 0x01, 0x38, 0xdc, 0x1b, 0x99, 0x75, 0x2c, 0x27,
	0x96, 0x29, 0xe7, 0x2e, 0x63, 0x4e, 0x2c, 0x91, 0x97, 0xfb, 0x2e, 0x2e, 0x11, 0x89, 0x2d, 0x34,
	0x21, 0xd1, 0x4f, 0x0a, 0xb8, 0x12, 0x91, 0x48, 0xaa, 0xfc, 0x18, 0xf4, 0xb7, 0xaa, 0x64, 0x49,
	0x65, 0xe4, 0xa5, 0xe3, 0xc8, 0xbc, 0xd0, 0x22, 0x93, 0xc1, 0xb7, 0x03, 0x3a, 0x7a, 0xb8, 0x8e,
	0x4c, 0x5b, 0x1d, 0x82, 0x5a, 0x40, 0xc8, 0x00, 0x80, 0x5c, 0xc7, 0x5d, 0x6c, 0xe3, 0x8a, 0xb7,
	0x4c, 0xe8, 0x43, 0x70, 0x31, 0x30, 0x2a, 0x35, 0x2d, 0x81, 0xbe, 0x2a, 0x1f, 0x91, 0x2b, 0x37,
	0x14, 0x2a, 0x44, 0x80, 0x9a, 0xf9, 0x4b, 0x14, 0x9a, 0x06, 0xaf, 0xf3, 0x69, 0xef, 0xd3, 0x4d,
	0x62, 0x99, 0x8f, 0xc9, 0xbd, 0x87, 0xd8, 0x26, 0x05, 0x52, 0xa4, 0xb6, 0xb1, 0xb2, 0x7b, 0xc7,
	0xf0, 0x36, 0xe9, 0x1c, 0xe8, 0x31, 0x0d, 0x9e, 0xe2, 0x54, 0xa1, 0xc7, 0x34, 0x90, 0x05, 0xae,
	0xc6, 0xc3, 0x24, 0xbd, 0xdb, 0xa0, 0xcf, 0xe6, 0xa3, 0x92, 0x5e, 0x36, 0x94, 0x5e, 0xd8, 0x2c,
	0xa7, 0x5c, 0xae, 0x05, 0x89, 0x46, 0x4b, 0x60, 0x2c, 0x3a, 0xdf, 0x2a, 0xb1, 0x68, 0xc5, 0x63,
	0x3a, 0x00, 0x7a, 0x0d, 0xf7, 0x59, 0x36, 0x82, 0x78, 0x40, 0x5b, 0x20, 0xd3, 0x16, 0x7f, 0xc2,
	0x94, 0x17, 0xc1, 0x68, 0x54, 0x4a, 0xf6, 0xfe, 0x8e, 0x45, 0x8c, 0x26, 0xc6, 0x74, 0xc7, 0x22,
	0x5e, 0xeb, 0x8a, 0x07, 0x64, 0x47, 0x2b, 0xf6, 0xe0, 0x92, 0xf0, 0x3b, 0xe0, 0xb4, 0x48, 0xe9,
	0x15, 0x73, 0xb7, 0x8c, 0x3d, 0x38, 0xaa, 0xc8, 0x62, 0x58, 0x2e, 0x97, 0xc3, 0xd2, 0x9e, 0x74,
	0xc7, 0x7e, 0xa7, 0xc8, 0x2a, 0x8a, 0xcc, 0x77, 0xd2, 0x0a, 0x4f, 0xae, 0x49, 0x33, 0x72, 0x77,
	0xd7, 0x30, 0x73, 0x42, 0xf2, 0xfa, 0x9d, 0x83, 0x66, 0xe5, 0x3e, 0xc6, 0x04, 0x4a, 0x95, 0xad,
	0x3d, 0x96, 0xf1, 0x0b, 0xc8, 0xc1, 0xc1, 0xf5, 0x31, 0x96, 0x19, 0x23, 0x8e, 0x7f, 0x34, 0xe8,
	0x7e, 0xa9, 0x44, 0x06, 0xca, 0x14, 0xd3, 0xa0, 0x77, 0x1b, 0x97, 0x6b, 0x44, 0x6e, 0xda, 0x60,
	0x40, 0xb9, 0xa7, 0xf9, 0x16, 0x35, 0x2d, 0xb9, 0x6e, 0x22, 0x1a, 0x25, 0xc1, 0xa5, 0xc3, 0x04,
	0xe2, 0x50, 0xbc, 0xe7, 0xe0, 0x4d, 0x62, 0xa0, 0x59, 0x90, 0x0a, 0x7f, 0xe3, 0xa7, 0xbc, 0x04,
	0xfa, 0x1c, 0x97, 0x12, 0x93, 0xe5, 0x2d, 0x9f, 0xd0, 0x0d, 0xa0, 0x1e, 0xad, 0xef, 0x35, 0x5a,
	0xdc, 0xbc, 0x63, 0x6d, 0x50, 0x98, 0x04, 0xa7, 0xdd, 0xdb, 0x8c, 0x30, 0x0f, 0xe6, 0x3d, 0x22,
	0x02, 0x50, 0x34, 0xae, 0x39, 0x2b, 0x73, 0xb0, 0x53, 0xf3, 0xb3, 0x8a, 0x27, 0x98, 0x01, 0xe7,
	0xc9, 0xa3, 0xaa, 0x69, 0xf3, 0x4d, 0xd4, 0x1d, 0xb3, 0x42, 0x78, 0x11, 0x9c, 0x29, 0x9c, 0x3b,
	0x1c, 0xbe, 0x6f, 0x56, 0x08, 0xaa, 0x46, 0x77, 0x6f, 0x81, 0xec, 0x60, 0xdb, 0xef, 0xde, 0x45,
	0x70, 0x96, 0x37, 0xac, 0x1e, 0xe0, 0xbb, 0x92, 0xfc, 0xef, 0x79, 0x7a, 0x60, 0x17, 0x57, 0xca,
	0xf3, 0x28, 0xf0, 0x1a, 0x15, 0x5e, 0xe5, 0xcf, 0xcb, 0xe2, 0x71, 0xfe, 0xe5, 0x27, 0x4f, 0xd3,
	0x89, 0x7f, 0x9f, 0xa6, 0x13, 0xe8, 0x2f, 0x25, 0xba, 0xe3, 0xbd, 0x94, 0x52, 0xdd, 0x7b, 0x6e,
	0x3f, 0xb8, 0x23, 0x5e, 0x3f, 0xe4, 0x3a, 0xed, 0x07, 0x31, 0xd1, 0x61, 0x57, 0xf0, 0x49, 0x60,
	0x09, 0xf4, 0x3a, 0xee, 0x06, 0x26, 0x7b, 0xf8, 0x6c, 0xc3, 0xa1, 0x65, 0xb1, 0x4a, 0x8a, 0xbc,
	0x32, 0xf2, 0x2e, 0xf6, 0xab, 0x3f, 0xd3, 0x13, 0x25, 0xd3, 0x79, 0x58, 0x5b, 0xcf, 0x15, 0x69,
	0x45, 0x93, 0xa6, 0x46, 0x7c, 0x5c, 0x63, 0xc6, 0xa6, 0xe6, 0xec, 0x56, 0x09, 0xf3, 0x30, 0xac,
	0x20, 0xe6, 0x9f, 0xfa, 0x1e, 0x82, 0x5e, 0xae, 0x11, 0x7e, 0xad, 0x80, 0x0b, 0xad, 0x17, 0x35,
	0x9c, 0x0c, 0x95, 0x11, 0xe7, 0x1e, 0xd4, 0xa9, 0x6e, 0x20, 0x62, 0xf9, 0x50, 0xfe, 0x89, 0x7b,
	0x05, 0x7e, 0xf2, 0xeb, 0xdf, 0x9f, 0xf7, 0x64, 0xe1, 0x98, 0x16, 0xed, 0xe9, 0x9a, 0x7c, 0x02,
	0xfc, 0x56, 0x01, 0xe7, 0x5b, 0x66, 0x84, 0xd7, 0x3b, 0x4e, 0xee, 0xd1, 0x9d, 0xec, 0x02, 0x21,
	0xd9, 0x2e, 0x71, 0xa2, 0xb3, 0xf0, 0x46, 0x47, 0x44, 0xb5, 0x7a, 0xd0, 0x0f, 0x36, 0xe0, 0xcf,
	0x0a, 0xb8, 0x1c, 0x71, 0x4d, 0xc3, 0xd9, 0x68, 0x3a, 0xf1, 0x86, 0x40, 0x9d, 0x3b, 0x06, 0x52,
	0x0a, 0x5a, 0xe4, 0x82, 0x66, 0xe0, 0x74, 0xa8, 0x20, 0x47, 0xa2, 0x75, 0xe6, 0xc2, 0x75, 0x71,
	0x70, 0xeb, 0xeb, 0xbb, 0xba, 0x69, 0x68, 0x75, 0xd3, 0x68, 0xc0, 0x3f, 0x14, 0xa0, 0x46, 0x5f,
	0xe3, 0x70, 0xa1, 0x4b, 0x62, 0xcd, 0xe6, 0x41, 0x7d, 0xf3, 0x78, 0x60, 0x29, 0xec, 0x16, 0x17,
	0xb6, 0x08, 0x17, 0xba, 0x13, 0xc6, 0x1d, 0x8a, 0x56, 0xe7, 0x1f, 0x0d, 0xf8, 0x9b, 0x02, 0x06,
	0x23, 0xef, 0x7c, 0x38, 0xdf, 0x15, 0xc1, 0x80, 0xcf, 0x50, 0x17, 0x8e, 0x85, 0x95, 0xda, 0xde,
	0xe2, 0xda, 0xe6, 0xe1, 0x6c, 0x17, 0xda, 0xdc, 0x83, 0xce, 0xd0, 0xea, 0xfc, 0xbc, 0x6b, 0xc0,
	0x1f, 0x15, 0x70, 0x39, 0xe2, 0xa2, 0x8f, 0xab, 0xc3, 0x78, 0x2f, 0x12, 0x57, 0x87, 0x6d, 0x5c,
	0x05, 0xca, 0x73, 0x49, 0xd7, 0xe0, 0x44, 0xe7, 0x92, 0x18, 0xdc, 0x53, 0xc0, 0x60, 0xe4, 0x55,
	0x1e, 0xb7, 0x3d, 0xed, 0x8c, 0x42, 0xdc, 0xf6, 0xb4, 0xf5, 0x0e, 0x68, 0x9e, 0x6b, 0x79, 0x03,
	0x4e, 0x85, 0x1f, 0x12, 0x98, 0x39, 0x7a, 0xf8, 0x1e, 0x99, 0x06, 0xfc, 0x85, 0x57, 0x5c, 0x84,
	0x75, 0x88, 0xaf, 0xb8, 0x78, 0x63, 0x12, 0x5f, 0x71, 0x6d, 0xbc, 0x0a, 0x9a, 0xe3, 0x92, 0xf2,
	0x70, 0x32, 0x62, 0x7b, 0x1c, 0x5c, 0x6e, 0xd1, 0x64, 0xe8, 0x58, 0x70, 0xfe, 0x42, 0x01, 0xfd,
	0x47, 0x1c, 0x09, 0x9c, 0x68, 0xc3, 0xa6, 0x39, 0x58, 0xcd, 0x77, 0x11, 0xec, 0x53, 0xbe, 0xce,
	0x29, 0x8f, 0xc3, 0x6c, 0x0c, 0x65, 0x79, 0x60, 0x33, 0xc1, 0xe9, 0x07, 0x05, 0xbc, 0x16, 0xee,
	0x80, 0xb4, 0x0e, 0xbb, 0xd5, 0x03, 0xa8, 0x33, 0x5d, 0x02, 0x7c, 0xd6, 0x37, 0x39, 0xeb, 0x39,
	0x38, 0xd3, 0x49, 0x1f, 0x94, 0x69, 0x71, 0x53, 0x37, 0xad, 0x0d, 0xaa, 0xd5, 0xa5, 0xa3, 0x69,
	0xc0, 0x4f, 0x15, 0xd0, 0x27, 0x7e, 0x61, 0xc2, 0x4c, 0x34, 0x89, 0xc0, 0xcf, 0x59, 0x35, 0xdb,
	0x3e, 0x50, 0xd2, 0xcb, 0x1e, 0xde, 0xd6, 0x57, 0xe0, 0x50, 0x28, 0x47, 0xf1, 0x5b, 0x16, 0xbe,
	0x08, 0x3f, 0x3a, 0x85, 0xe7, 0xe9, 0xf2, 0xe8, 0x0c, 0x98, 0xbc, 0x2e, 0x8f, 0xce, 0xa0, 0x5b,
	0x43, 0xef, 0x72, 0xee, 0xab, 0x70, 0x25, 0x94, 0x7b, 0x3d, 0x60, 0x0f, 0x1b, 0x11, 0x47, 0xa9,
	0x74, 0x6a, 0x2b, 0x37, 0x9f, 0xed, 0xa7, 0x94, 0xbd, 0xfd, 0x94, 0xf2, 0x62, 0x3f, 0xa5, 0x7c,
	0x76, 0x90, 0x4a, 0xec, 0x1d, 0xa4, 0x12, 0xbf, 0x1f, 0xa4, 0x12, 0x0f, 0x46, 0x8f, 0xda, 0x31,
	0x9e, 0xee, 0x91, 0x97, 0x90, 0x3b, 0xb2, 0xf5, 0x3e, 0xfe, 0x6f, 0xa5, 0xfc, 0xff, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x18, 0xf5, 0xc3, 0x1b, 0x60, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// LiquidValidators queries all liquid validators.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	LiquidValidators(ctx context.Context, in *QueryLiquidValidatorsRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorsResponse, error)
	// Query for an individual liquid validator by validator address
	LiquidValidator(ctx context.Context, in *QueryLiquidValidatorRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorResponse, error)
	// Query for individual tokenize share record information by share by id
	TokenizeShareRecordById(ctx context.Context, in *QueryTokenizeShareRecordByIdRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordByIdResponse, error)
	// Query for individual tokenize share record information by share denom
	TokenizeShareRecordByDenom(ctx context.Context, in *QueryTokenizeShareRecordByDenomRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordByDenomResponse, error)
	// Query tokenize share records by address
	TokenizeShareRecordsOwned(ctx context.Context, in *QueryTokenizeShareRecordsOwnedRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordsOwnedResponse, error)
	// Query for all tokenize share records
	AllTokenizeShareRecords(ctx context.Context, in *QueryAllTokenizeShareRecordsRequest, opts ...grpc.CallOption) (*QueryAllTokenizeShareRecordsResponse, error)
	// Query for last tokenize share record id
	LastTokenizeShareRecordId(ctx context.Context, in *QueryLastTokenizeShareRecordIdRequest, opts ...grpc.CallOption) (*QueryLastTokenizeShareRecordIdResponse, error)
	// Query for total tokenized staked assets
	TotalTokenizeSharedAssets(ctx context.Context, in *QueryTotalTokenizeSharedAssetsRequest, opts ...grpc.CallOption) (*QueryTotalTokenizeSharedAssetsResponse, error)
	// Query for total liquid staked (including tokenized shares or owned by an
	// liquid staking provider)
	TotalLiquidStaked(ctx context.Context, in *QueryTotalLiquidStaked, opts ...grpc.CallOption) (*QueryTotalLiquidStakedResponse, error)
	// Query tokenize share locks
	TokenizeShareLockInfo(ctx context.Context, in *QueryTokenizeShareLockInfo, opts ...grpc.CallOption) (*QueryTokenizeShareLockInfoResponse, error)
	// Parameters queries the liquid parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// TokenizeShareRecordReward queries the tokenize share record rewards
	TokenizeShareRecordReward(ctx context.Context, in *QueryTokenizeShareRecordRewardRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordRewardResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) LiquidValidators(ctx context.Context, in *QueryLiquidValidatorsRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorsResponse, error) {
	out := new(QueryLiquidValidatorsResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/LiquidValidators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidValidator(ctx context.Context, in *QueryLiquidValidatorRequest, opts ...grpc.CallOption) (*QueryLiquidValidatorResponse, error) {
	out := new(QueryLiquidValidatorResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/LiquidValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizeShareRecordById(ctx context.Context, in *QueryTokenizeShareRecordByIdRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordByIdResponse, error) {
	out := new(QueryTokenizeShareRecordByIdResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TokenizeShareRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizeShareRecordByDenom(ctx context.Context, in *QueryTokenizeShareRecordByDenomRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordByDenomResponse, error) {
	out := new(QueryTokenizeShareRecordByDenomResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TokenizeShareRecordByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizeShareRecordsOwned(ctx context.Context, in *QueryTokenizeShareRecordsOwnedRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordsOwnedResponse, error) {
	out := new(QueryTokenizeShareRecordsOwnedResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TokenizeShareRecordsOwned", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllTokenizeShareRecords(ctx context.Context, in *QueryAllTokenizeShareRecordsRequest, opts ...grpc.CallOption) (*QueryAllTokenizeShareRecordsResponse, error) {
	out := new(QueryAllTokenizeShareRecordsResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/AllTokenizeShareRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastTokenizeShareRecordId(ctx context.Context, in *QueryLastTokenizeShareRecordIdRequest, opts ...grpc.CallOption) (*QueryLastTokenizeShareRecordIdResponse, error) {
	out := new(QueryLastTokenizeShareRecordIdResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/LastTokenizeShareRecordId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalTokenizeSharedAssets(ctx context.Context, in *QueryTotalTokenizeSharedAssetsRequest, opts ...grpc.CallOption) (*QueryTotalTokenizeSharedAssetsResponse, error) {
	out := new(QueryTotalTokenizeSharedAssetsResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TotalTokenizeSharedAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLiquidStaked(ctx context.Context, in *QueryTotalLiquidStaked, opts ...grpc.CallOption) (*QueryTotalLiquidStakedResponse, error) {
	out := new(QueryTotalLiquidStakedResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TotalLiquidStaked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizeShareLockInfo(ctx context.Context, in *QueryTokenizeShareLockInfo, opts ...grpc.CallOption) (*QueryTokenizeShareLockInfoResponse, error) {
	out := new(QueryTokenizeShareLockInfoResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TokenizeShareLockInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenizeShareRecordReward(ctx context.Context, in *QueryTokenizeShareRecordRewardRequest, opts ...grpc.CallOption) (*QueryTokenizeShareRecordRewardResponse, error) {
	out := new(QueryTokenizeShareRecordRewardResponse)
	err := c.cc.Invoke(ctx, "/gaia.liquid.v1beta1.Query/TokenizeShareRecordReward", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// LiquidValidators queries all liquid validators.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	LiquidValidators(context.Context, *QueryLiquidValidatorsRequest) (*QueryLiquidValidatorsResponse, error)
	// Query for an individual liquid validator by validator address
	LiquidValidator(context.Context, *QueryLiquidValidatorRequest) (*QueryLiquidValidatorResponse, error)
	// Query for individual tokenize share record information by share by id
	TokenizeShareRecordById(context.Context, *QueryTokenizeShareRecordByIdRequest) (*QueryTokenizeShareRecordByIdResponse, error)
	// Query for individual tokenize share record information by share denom
	TokenizeShareRecordByDenom(context.Context, *QueryTokenizeShareRecordByDenomRequest) (*QueryTokenizeShareRecordByDenomResponse, error)
	// Query tokenize share records by address
	TokenizeShareRecordsOwned(context.Context, *QueryTokenizeShareRecordsOwnedRequest) (*QueryTokenizeShareRecordsOwnedResponse, error)
	// Query for all tokenize share records
	AllTokenizeShareRecords(context.Context, *QueryAllTokenizeShareRecordsRequest) (*QueryAllTokenizeShareRecordsResponse, error)
	// Query for last tokenize share record id
	LastTokenizeShareRecordId(context.Context, *QueryLastTokenizeShareRecordIdRequest) (*QueryLastTokenizeShareRecordIdResponse, error)
	// Query for total tokenized staked assets
	TotalTokenizeSharedAssets(context.Context, *QueryTotalTokenizeSharedAssetsRequest) (*QueryTotalTokenizeSharedAssetsResponse, error)
	// Query for total liquid staked (including tokenized shares or owned by an
	// liquid staking provider)
	TotalLiquidStaked(context.Context, *QueryTotalLiquidStaked) (*QueryTotalLiquidStakedResponse, error)
	// Query tokenize share locks
	TokenizeShareLockInfo(context.Context, *QueryTokenizeShareLockInfo) (*QueryTokenizeShareLockInfoResponse, error)
	// Parameters queries the liquid parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// TokenizeShareRecordReward queries the tokenize share record rewards
	TokenizeShareRecordReward(context.Context, *QueryTokenizeShareRecordRewardRequest) (*QueryTokenizeShareRecordRewardResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) LiquidValidators(ctx context.Context, req *QueryLiquidValidatorsRequest) (*QueryLiquidValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidValidators not implemented")
}
func (*UnimplementedQueryServer) LiquidValidator(ctx context.Context, req *QueryLiquidValidatorRequest) (*QueryLiquidValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidValidator not implemented")
}
func (*UnimplementedQueryServer) TokenizeShareRecordById(ctx context.Context, req *QueryTokenizeShareRecordByIdRequest) (*QueryTokenizeShareRecordByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizeShareRecordById not implemented")
}
func (*UnimplementedQueryServer) TokenizeShareRecordByDenom(ctx context.Context, req *QueryTokenizeShareRecordByDenomRequest) (*QueryTokenizeShareRecordByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizeShareRecordByDenom not implemented")
}
func (*UnimplementedQueryServer) TokenizeShareRecordsOwned(ctx context.Context, req *QueryTokenizeShareRecordsOwnedRequest) (*QueryTokenizeShareRecordsOwnedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizeShareRecordsOwned not implemented")
}
func (*UnimplementedQueryServer) AllTokenizeShareRecords(ctx context.Context, req *QueryAllTokenizeShareRecordsRequest) (*QueryAllTokenizeShareRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllTokenizeShareRecords not implemented")
}
func (*UnimplementedQueryServer) LastTokenizeShareRecordId(ctx context.Context, req *QueryLastTokenizeShareRecordIdRequest) (*QueryLastTokenizeShareRecordIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastTokenizeShareRecordId not implemented")
}
func (*UnimplementedQueryServer) TotalTokenizeSharedAssets(ctx context.Context, req *QueryTotalTokenizeSharedAssetsRequest) (*QueryTotalTokenizeSharedAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalTokenizeSharedAssets not implemented")
}
func (*UnimplementedQueryServer) TotalLiquidStaked(ctx context.Context, req *QueryTotalLiquidStaked) (*QueryTotalLiquidStakedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLiquidStaked not implemented")
}
func (*UnimplementedQueryServer) TokenizeShareLockInfo(ctx context.Context, req *QueryTokenizeShareLockInfo) (*QueryTokenizeShareLockInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizeShareLockInfo not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) TokenizeShareRecordReward(ctx context.Context, req *QueryTokenizeShareRecordRewardRequest) (*QueryTokenizeShareRecordRewardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenizeShareRecordReward not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_LiquidValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidValidatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/LiquidValidators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidValidators(ctx, req.(*QueryLiquidValidatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLiquidValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/LiquidValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidValidator(ctx, req.(*QueryLiquidValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizeShareRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizeShareRecordByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizeShareRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TokenizeShareRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizeShareRecordById(ctx, req.(*QueryTokenizeShareRecordByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizeShareRecordByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizeShareRecordByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizeShareRecordByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TokenizeShareRecordByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizeShareRecordByDenom(ctx, req.(*QueryTokenizeShareRecordByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizeShareRecordsOwned_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizeShareRecordsOwnedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizeShareRecordsOwned(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TokenizeShareRecordsOwned",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizeShareRecordsOwned(ctx, req.(*QueryTokenizeShareRecordsOwnedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllTokenizeShareRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenizeShareRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllTokenizeShareRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/AllTokenizeShareRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllTokenizeShareRecords(ctx, req.(*QueryAllTokenizeShareRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastTokenizeShareRecordId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastTokenizeShareRecordIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastTokenizeShareRecordId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/LastTokenizeShareRecordId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastTokenizeShareRecordId(ctx, req.(*QueryLastTokenizeShareRecordIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalTokenizeSharedAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalTokenizeSharedAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalTokenizeSharedAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TotalTokenizeSharedAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalTokenizeSharedAssets(ctx, req.(*QueryTotalTokenizeSharedAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLiquidStaked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalLiquidStaked)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLiquidStaked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TotalLiquidStaked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLiquidStaked(ctx, req.(*QueryTotalLiquidStaked))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizeShareLockInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizeShareLockInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizeShareLockInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TokenizeShareLockInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizeShareLockInfo(ctx, req.(*QueryTokenizeShareLockInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenizeShareRecordReward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTokenizeShareRecordRewardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenizeShareRecordReward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gaia.liquid.v1beta1.Query/TokenizeShareRecordReward",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenizeShareRecordReward(ctx, req.(*QueryTokenizeShareRecordRewardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gaia.liquid.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiquidValidators",
			Handler:    _Query_LiquidValidators_Handler,
		},
		{
			MethodName: "LiquidValidator",
			Handler:    _Query_LiquidValidator_Handler,
		},
		{
			MethodName: "TokenizeShareRecordById",
			Handler:    _Query_TokenizeShareRecordById_Handler,
		},
		{
			MethodName: "TokenizeShareRecordByDenom",
			Handler:    _Query_TokenizeShareRecordByDenom_Handler,
		},
		{
			MethodName: "TokenizeShareRecordsOwned",
			Handler:    _Query_TokenizeShareRecordsOwned_Handler,
		},
		{
			MethodName: "AllTokenizeShareRecords",
			Handler:    _Query_AllTokenizeShareRecords_Handler,
		},
		{
			MethodName: "LastTokenizeShareRecordId",
			Handler:    _Query_LastTokenizeShareRecordId_Handler,
		},
		{
			MethodName: "TotalTokenizeSharedAssets",
			Handler:    _Query_TotalTokenizeSharedAssets_Handler,
		},
		{
			MethodName: "TotalLiquidStaked",
			Handler:    _Query_TotalLiquidStaked_Handler,
		},
		{
			MethodName: "TokenizeShareLockInfo",
			Handler:    _Query_TokenizeShareLockInfo_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "TokenizeShareRecordReward",
			Handler:    _Query_TokenizeShareRecordReward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gaia/liquid/v1beta1/query.proto",
}

func (m *QueryLiquidValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorAddr) > 0 {
		i -= len(m.ValidatorAddr)
		copy(dAtA[i:], m.ValidatorAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LiquidValidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryLiquidValidatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLiquidValidatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLiquidValidatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidValidators) > 0 {
		for iNdEx := len(m.LiquidValidators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidValidators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordsOwnedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordsOwnedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordsOwnedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordsOwnedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordsOwnedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordsOwnedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenizeShareRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenizeShareRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenizeShareRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenizeShareRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenizeShareRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenizeShareRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Records) > 0 {
		for iNdEx := len(m.Records) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Records[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastTokenizeShareRecordIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastTokenizeShareRecordIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastTokenizeShareRecordIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastTokenizeShareRecordIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastTokenizeShareRecordIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastTokenizeShareRecordIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalTokenizeSharedAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalTokenizeSharedAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalTokenizeSharedAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalTokenizeSharedAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalTokenizeSharedAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalTokenizeSharedAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Value.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidStaked) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidStaked) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidStaked) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryTotalLiquidStakedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalLiquidStakedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalLiquidStakedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tokens) > 0 {
		i -= len(m.Tokens)
		copy(dAtA[i:], m.Tokens)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tokens)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareLockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareLockInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareLockInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareLockInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareLockInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareLockInfoResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ExpirationTime) > 0 {
		i -= len(m.ExpirationTime)
		copy(dAtA[i:], m.ExpirationTime)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ExpirationTime)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordRewardRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordRewardRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordRewardRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerAddress) > 0 {
		i -= len(m.OwnerAddress)
		copy(dAtA[i:], m.OwnerAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OwnerAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTokenizeShareRecordRewardResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTokenizeShareRecordRewardResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTokenizeShareRecordRewardResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLiquidValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidValidator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLiquidValidatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLiquidValidatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidValidators) > 0 {
		for _, e := range m.LiquidValidators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenizeShareRecordByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTokenizeShareRecordByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenizeShareRecordByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizeShareRecordByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTokenizeShareRecordsOwnedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizeShareRecordsOwnedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllTokenizeShareRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenizeShareRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Records) > 0 {
		for _, e := range m.Records {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastTokenizeShareRecordIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastTokenizeShareRecordIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryTotalTokenizeSharedAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalTokenizeSharedAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Value.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryTotalLiquidStaked) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryTotalLiquidStakedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tokens)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizeShareLockInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizeShareLockInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ExpirationTime)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizeShareRecordRewardRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OwnerAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTokenizeShareRecordRewardResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLiquidValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLiquidValidatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLiquidValidatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLiquidValidatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidValidators = append(m.LiquidValidators, LiquidValidator{})
			if err := m.LiquidValidators[len(m.LiquidValidators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordsOwnedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordsOwnedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordsOwnedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordsOwnedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordsOwnedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordsOwnedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, TokenizeShareRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenizeShareRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenizeShareRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenizeShareRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenizeShareRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenizeShareRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenizeShareRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Records", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Records = append(m.Records, TokenizeShareRecord{})
			if err := m.Records[len(m.Records)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastTokenizeShareRecordIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastTokenizeShareRecordIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastTokenizeShareRecordIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastTokenizeShareRecordIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastTokenizeShareRecordIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastTokenizeShareRecordIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalTokenizeSharedAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalTokenizeSharedAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalTokenizeSharedAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalTokenizeSharedAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalTokenizeSharedAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalTokenizeSharedAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Value.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidStaked) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidStaked: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidStaked: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalLiquidStakedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalLiquidStakedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalLiquidStakedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareLockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareLockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareLockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareLockInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareLockInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareLockInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpirationTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExpirationTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordRewardRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordRewardRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordRewardRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTokenizeShareRecordRewardResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordRewardResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTokenizeShareRecordRewardResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, TokenizeShareRecordReward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, types.DecCoin{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
