package types

import (
	sdkerrors "github.com/cosmos/cosmos-sdk/types/errors"
)

// liquidity module sentinel errors
var (
	ErrPoolNotExists                = sdkerrors.Register(ModuleName, 1, "pool not exists")
	ErrPoolTypeNotExists            = sdkerrors.Register(ModuleName, 2, "pool type not exists")
	ErrEqualDenom                   = sdkerrors.Register(ModuleName, 3, "reserve coin denomination are equal")
	ErrInvalidDenom                 = sdkerrors.Register(ModuleName, 4, "invalid denom")
	ErrNumOfReserveCoin             = sdkerrors.Register(ModuleName, 5, "invalid number of reserve coin")
	ErrNumOfPoolCoin                = sdkerrors.Register(ModuleName, 6, "invalid number of pool coin")
	ErrInsufficientPool             = sdkerrors.Register(ModuleName, 7, "insufficient pool")
	ErrInsufficientBalance          = sdkerrors.Register(ModuleName, 8, "insufficient coin balance")
	ErrLessThanMinInitDeposit       = sdkerrors.Register(ModuleName, 9, "deposit coin less than MinInitDepositAmount")
	ErrNotImplementedYet            = sdkerrors.Register(ModuleName, 10, "not implemented yet")
	ErrPoolAlreadyExists            = sdkerrors.Register(ModuleName, 11, "the pool already exists")
	ErrPoolBatchNotExists           = sdkerrors.Register(ModuleName, 12, "pool batch not exists")
	ErrOrderBookInvalidity          = sdkerrors.Register(ModuleName, 13, "orderbook is not validity")
	ErrBatchNotExecuted             = sdkerrors.Register(ModuleName, 14, "the liquidity pool batch is not executed")
	ErrInvalidPoolCreatorAddr       = sdkerrors.Register(ModuleName, 15, "invalid pool creator address")
	ErrInvalidDepositorAddr         = sdkerrors.Register(ModuleName, 16, "invalid pool depositor address")
	ErrInvalidWithdrawerAddr        = sdkerrors.Register(ModuleName, 17, "invalid pool withdrawer address")
	ErrInvalidSwapRequesterAddr     = sdkerrors.Register(ModuleName, 18, "invalid pool swap requester address")
	ErrBadPoolCoinAmount            = sdkerrors.Register(ModuleName, 19, "invalid pool coin amount")
	ErrBadDepositCoinsAmount        = sdkerrors.Register(ModuleName, 20, "invalid deposit coins amount")
	ErrBadOfferCoinAmount           = sdkerrors.Register(ModuleName, 21, "invalid offer coin amount")
	ErrBadOrderingReserveCoin       = sdkerrors.Register(ModuleName, 22, "reserve coin denoms not ordered alphabetical")
	ErrBadOrderPrice                = sdkerrors.Register(ModuleName, 23, "invalid order price")
	ErrNumOfReserveCoinDenoms       = sdkerrors.Register(ModuleName, 24, "invalid reserve coin denoms")
	ErrEmptyReserveAccountAddress   = sdkerrors.Register(ModuleName, 25, "empty reserve account address")
	ErrEmptyPoolCoinDenom           = sdkerrors.Register(ModuleName, 26, "empty pool coin denom")
	ErrBadOrderingReserveCoinDenoms = sdkerrors.Register(ModuleName, 27, "bad ordering reserve coin denoms")
	ErrBadReserveAccountAddress     = sdkerrors.Register(ModuleName, 28, "bad reserve account address")
	ErrBadPoolCoinDenom             = sdkerrors.Register(ModuleName, 29, "bad pool coin denom")
	ErrInsufficientPoolCreationFee  = sdkerrors.Register(ModuleName, 30, "insufficient balances for pool creation fee")
	ErrExceededMaxOrderable         = sdkerrors.Register(ModuleName, 31, "can not exceed max order ratio of reserve coins that can be ordered at a order")
	ErrBadBatchMsgIndex             = sdkerrors.Register(ModuleName, 32, "bad msg index of the batch")
	ErrSwapTypeNotExists            = sdkerrors.Register(ModuleName, 33, "swap type not exists")
	ErrLessThanMinOfferAmount       = sdkerrors.Register(ModuleName, 34, "offer amount should be over 100 micro")
	ErrBadOfferCoinFee              = sdkerrors.Register(ModuleName, 35, "bad offer coin fee")
	ErrNotMatchedReserveCoin        = sdkerrors.Register(ModuleName, 36, "does not match the reserve coin of the pool")
	ErrBadPoolTypeID                = sdkerrors.Register(ModuleName, 37, "invalid index of the pool type")
	ErrExceededReserveCoinLimit     = sdkerrors.Register(ModuleName, 38, "can not exceed reserve coin limit amount")
	ErrDepletedPool                 = sdkerrors.Register(ModuleName, 39, "the pool is depleted of reserve coin, reinitializing is required by deposit")
	ErrCircuitBreakerEnabled        = sdkerrors.Register(ModuleName, 40, "circuit breaker is triggered")
	ErrOverflowAmount               = sdkerrors.Register(ModuleName, 41, "invalid amount that can cause overflow")
)
