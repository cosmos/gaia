// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gaia/lsm/v1beta1/lsm.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TokenizeShareLockStatus indicates whether the address is able to tokenize
// shares
type TokenizeShareLockStatus int32

const (
	// UNSPECIFIED defines an empty tokenize share lock status
	TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED TokenizeShareLockStatus = 0
	// LOCKED indicates the account is locked and cannot tokenize shares
	TOKENIZE_SHARE_LOCK_STATUS_LOCKED TokenizeShareLockStatus = 1
	// UNLOCKED indicates the account is unlocked and can tokenize shares
	TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED TokenizeShareLockStatus = 2
	// LOCK_EXPIRING indicates the account is unable to tokenize shares, but
	// will be able to tokenize shortly (after 1 unbonding period)
	TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING TokenizeShareLockStatus = 3
)

var TokenizeShareLockStatus_name = map[int32]string{
	0: "TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED",
	1: "TOKENIZE_SHARE_LOCK_STATUS_LOCKED",
	2: "TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED",
	3: "TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING",
}

var TokenizeShareLockStatus_value = map[string]int32{
	"TOKENIZE_SHARE_LOCK_STATUS_UNSPECIFIED":   0,
	"TOKENIZE_SHARE_LOCK_STATUS_LOCKED":        1,
	"TOKENIZE_SHARE_LOCK_STATUS_UNLOCKED":      2,
	"TOKENIZE_SHARE_LOCK_STATUS_LOCK_EXPIRING": 3,
}

func (x TokenizeShareLockStatus) String() string {
	return proto.EnumName(TokenizeShareLockStatus_name, int32(x))
}

func (TokenizeShareLockStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d1bf8cc0b3b18958, []int{0}
}

// Params defines the parameters for the x/lsm module.
type Params struct {
	// validator_bond_factor is required as a safety check for tokenizing shares
	// and delegations from liquid staking providers
	ValidatorBondFactor cosmossdk_io_math.LegacyDec `protobuf:"bytes,7,opt,name=validator_bond_factor,json=validatorBondFactor,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validator_bond_factor" yaml:"validator_bond_factor"`
	// global_liquid_staking_cap represents a cap on the portion of stake that
	// comes from liquid staking providers
	GlobalLiquidStakingCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,8,opt,name=global_liquid_staking_cap,json=globalLiquidStakingCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"global_liquid_staking_cap" yaml:"global_liquid_staking_cap"`
	// validator_liquid_staking_cap represents a cap on the portion of stake that
	// comes from liquid staking providers for a specific validator
	ValidatorLiquidStakingCap cosmossdk_io_math.LegacyDec `protobuf:"bytes,9,opt,name=validator_liquid_staking_cap,json=validatorLiquidStakingCap,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"validator_liquid_staking_cap" yaml:"validator_liquid_staking_cap"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1bf8cc0b3b18958, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// TokenizeShareRecord represents a tokenized delegation
type TokenizeShareRecord struct {
	Id            uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Owner         string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	ModuleAccount string `protobuf:"bytes,3,opt,name=module_account,json=moduleAccount,proto3" json:"module_account,omitempty"`
	Validator     string `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
}

func (m *TokenizeShareRecord) Reset()         { *m = TokenizeShareRecord{} }
func (m *TokenizeShareRecord) String() string { return proto.CompactTextString(m) }
func (*TokenizeShareRecord) ProtoMessage()    {}
func (*TokenizeShareRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1bf8cc0b3b18958, []int{1}
}
func (m *TokenizeShareRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenizeShareRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenizeShareRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenizeShareRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizeShareRecord.Merge(m, src)
}
func (m *TokenizeShareRecord) XXX_Size() int {
	return m.Size()
}
func (m *TokenizeShareRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizeShareRecord.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizeShareRecord proto.InternalMessageInfo

func (m *TokenizeShareRecord) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *TokenizeShareRecord) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *TokenizeShareRecord) GetModuleAccount() string {
	if m != nil {
		return m.ModuleAccount
	}
	return ""
}

func (m *TokenizeShareRecord) GetValidator() string {
	if m != nil {
		return m.Validator
	}
	return ""
}

// PendingTokenizeShareAuthorizations stores a list of addresses that have their
// tokenize share enablement in progress
type PendingTokenizeShareAuthorizations struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty"`
}

func (m *PendingTokenizeShareAuthorizations) Reset()         { *m = PendingTokenizeShareAuthorizations{} }
func (m *PendingTokenizeShareAuthorizations) String() string { return proto.CompactTextString(m) }
func (*PendingTokenizeShareAuthorizations) ProtoMessage()    {}
func (*PendingTokenizeShareAuthorizations) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1bf8cc0b3b18958, []int{2}
}
func (m *PendingTokenizeShareAuthorizations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingTokenizeShareAuthorizations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingTokenizeShareAuthorizations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingTokenizeShareAuthorizations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTokenizeShareAuthorizations.Merge(m, src)
}
func (m *PendingTokenizeShareAuthorizations) XXX_Size() int {
	return m.Size()
}
func (m *PendingTokenizeShareAuthorizations) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTokenizeShareAuthorizations.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTokenizeShareAuthorizations proto.InternalMessageInfo

func (m *PendingTokenizeShareAuthorizations) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

// TokenizeShareRecordReward represents the properties of tokenize share
type TokenizeShareRecordReward struct {
	RecordId uint64                                      `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
	Reward   github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=reward,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"reward"`
}

func (m *TokenizeShareRecordReward) Reset()         { *m = TokenizeShareRecordReward{} }
func (m *TokenizeShareRecordReward) String() string { return proto.CompactTextString(m) }
func (*TokenizeShareRecordReward) ProtoMessage()    {}
func (*TokenizeShareRecordReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_d1bf8cc0b3b18958, []int{3}
}
func (m *TokenizeShareRecordReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenizeShareRecordReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenizeShareRecordReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenizeShareRecordReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenizeShareRecordReward.Merge(m, src)
}
func (m *TokenizeShareRecordReward) XXX_Size() int {
	return m.Size()
}
func (m *TokenizeShareRecordReward) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenizeShareRecordReward.DiscardUnknown(m)
}

var xxx_messageInfo_TokenizeShareRecordReward proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("gaia.lsm.v1beta1.TokenizeShareLockStatus", TokenizeShareLockStatus_name, TokenizeShareLockStatus_value)
	proto.RegisterType((*Params)(nil), "gaia.lsm.v1beta1.Params")
	proto.RegisterType((*TokenizeShareRecord)(nil), "gaia.lsm.v1beta1.TokenizeShareRecord")
	proto.RegisterType((*PendingTokenizeShareAuthorizations)(nil), "gaia.lsm.v1beta1.PendingTokenizeShareAuthorizations")
	proto.RegisterType((*TokenizeShareRecordReward)(nil), "gaia.lsm.v1beta1.TokenizeShareRecordReward")
}

func init() { proto.RegisterFile("gaia/lsm/v1beta1/lsm.proto", fileDescriptor_d1bf8cc0b3b18958) }

var fileDescriptor_d1bf8cc0b3b18958 = []byte{
	// 711 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcf, 0x4f, 0x13, 0x4d,
	0x18, 0xee, 0xb4, 0xfd, 0xf8, 0xe8, 0x7c, 0xf9, 0x48, 0x59, 0x50, 0xb7, 0xa5, 0xd9, 0xd6, 0x25,
	0x68, 0x53, 0xa5, 0x0d, 0x72, 0x6b, 0xbc, 0xf4, 0x17, 0xda, 0xd0, 0x40, 0xb3, 0x2d, 0xc6, 0x90,
	0x98, 0xcd, 0x74, 0x67, 0xdc, 0x4e, 0xda, 0xdd, 0xa9, 0x3b, 0x5b, 0x10, 0xfe, 0x00, 0x43, 0x38,
	0x79, 0x31, 0xf1, 0x64, 0x48, 0xbc, 0x18, 0x13, 0x13, 0x0e, 0xfe, 0x11, 0x78, 0x23, 0x9e, 0x8c,
	0x07, 0x34, 0x70, 0xc0, 0x78, 0xf4, 0x2f, 0x30, 0xfb, 0x83, 0x22, 0x58, 0x91, 0x4b, 0x3b, 0xef,
	0xfb, 0x3c, 0xf3, 0xcc, 0xf3, 0xbe, 0x33, 0xef, 0xc2, 0xb8, 0x8e, 0x28, 0xca, 0x75, 0xb9, 0x91,
	0x5b, 0x9b, 0x6b, 0x11, 0x1b, 0xcd, 0x39, 0xeb, 0x6c, 0xcf, 0x62, 0x36, 0x13, 0xa2, 0x0e, 0x96,
	0x75, 0x62, 0x1f, 0x8b, 0x4f, 0xea, 0x4c, 0x67, 0x2e, 0x98, 0x73, 0x56, 0x1e, 0x2f, 0x3e, 0x8e,
	0x0c, 0x6a, 0xb2, 0x9c, 0xfb, 0xeb, 0xa7, 0x24, 0x8d, 0x71, 0x83, 0xf1, 0x5c, 0x0b, 0x71, 0x32,
	0x50, 0xd6, 0x18, 0x35, 0x7d, 0x3c, 0xe6, 0xe1, 0xaa, 0xa7, 0xe5, 0x05, 0x1e, 0x24, 0x7f, 0x0f,
	0xc1, 0x91, 0x3a, 0xb2, 0x90, 0xc1, 0x85, 0x6d, 0x00, 0xaf, 0xac, 0xa1, 0x2e, 0xc5, 0xc8, 0x66,
	0x96, 0xda, 0x62, 0x26, 0x56, 0x1f, 0x23, 0xcd, 0x66, 0x96, 0xf8, 0x6f, 0x0a, 0xa4, 0x23, 0xc5,
	0x07, 0x7b, 0x07, 0xc9, 0xc0, 0xe7, 0x83, 0xe4, 0x94, 0x27, 0xc0, 0x71, 0x27, 0x4b, 0x59, 0xce,
	0x40, 0x76, 0x3b, 0x5b, 0x23, 0x3a, 0xd2, 0x36, 0xca, 0x44, 0xfb, 0x71, 0x90, 0x4c, 0x6c, 0x20,
	0xa3, 0x9b, 0x97, 0x87, 0x2a, 0xc9, 0x1f, 0xdf, 0xcf, 0x42, 0xff, 0xfc, 0x32, 0xd1, 0xde, 0x1c,
	0xef, 0x66, 0x80, 0x32, 0x31, 0xa0, 0x16, 0x99, 0x89, 0x17, 0x5c, 0xa2, 0xf0, 0x02, 0xc0, 0x98,
	0xde, 0x65, 0x2d, 0xd4, 0x55, 0xbb, 0xf4, 0x49, 0x9f, 0x62, 0x95, 0xdb, 0xa8, 0x43, 0x4d, 0x5d,
	0xd5, 0x50, 0x4f, 0x1c, 0x75, 0x0d, 0xad, 0x5e, 0xce, 0x50, 0xca, 0x33, 0xf4, 0x47, 0xb5, 0xa1,
	0xa6, 0xae, 0x7a, 0xf4, 0x9a, 0xcb, 0x6e, 0x78, 0xe4, 0x12, 0xea, 0x09, 0xaf, 0x00, 0x4c, 0x9c,
	0x96, 0x36, 0xc4, 0x5a, 0xc4, 0xb5, 0xf6, 0xe8, 0x72, 0xd6, 0xa6, 0xcf, 0xf7, 0xea, 0x92, 0xee,
	0x62, 0x83, 0x1d, 0xe7, 0x0d, 0xe6, 0xe3, 0xdf, 0x76, 0x92, 0x60, 0xfb, 0x78, 0x37, 0x33, 0xee,
	0xbe, 0xb5, 0xa7, 0xee, 0x6b, 0xf3, 0x6e, 0x58, 0x7e, 0x06, 0xe0, 0x44, 0x93, 0x75, 0x88, 0x49,
	0x37, 0x49, 0xa3, 0x8d, 0x2c, 0xa2, 0x10, 0x8d, 0x59, 0x58, 0x18, 0x83, 0x41, 0x8a, 0x45, 0x90,
	0x02, 0xe9, 0xb0, 0x12, 0xa4, 0x58, 0x98, 0x84, 0xff, 0xb0, 0x75, 0x93, 0x58, 0x62, 0xd0, 0x29,
	0x46, 0xf1, 0x02, 0x61, 0x06, 0x8e, 0x19, 0x0c, 0xf7, 0xbb, 0x44, 0x45, 0x9a, 0xc6, 0xfa, 0xa6,
	0x2d, 0x86, 0x5c, 0xf8, 0x7f, 0x2f, 0x5b, 0xf0, 0x92, 0x42, 0x02, 0x46, 0x06, 0xee, 0xc4, 0xb0,
	0xcb, 0x38, 0x4d, 0xe4, 0xc3, 0x8e, 0x3d, 0xb9, 0x08, 0xe5, 0x3a, 0x31, 0x31, 0x35, 0xf5, 0x33,
	0x76, 0x0a, 0x7d, 0xbb, 0xcd, 0x2c, 0xba, 0x89, 0x6c, 0xca, 0x4c, 0xee, 0x28, 0x21, 0x8c, 0x2d,
	0xc2, 0x39, 0xe1, 0x22, 0x48, 0x85, 0x1c, 0xa5, 0x41, 0x42, 0x7e, 0x07, 0x60, 0x6c, 0x48, 0x31,
	0x0a, 0x59, 0x47, 0x16, 0x16, 0xa6, 0x60, 0xc4, 0x72, 0x63, 0x75, 0x50, 0xd9, 0xa8, 0x97, 0xa8,
	0x62, 0x81, 0xc2, 0x11, 0xcb, 0xa5, 0x89, 0xc1, 0x54, 0x28, 0xfd, 0xdf, 0x9d, 0x44, 0xd6, 0x6f,
	0xb0, 0x33, 0x40, 0x27, 0xe3, 0xe7, 0x74, 0xbb, 0xc4, 0xa8, 0x59, 0x9c, 0x77, 0xee, 0xf2, 0xed,
	0x97, 0xe4, 0x2d, 0x9d, 0xda, 0xed, 0x7e, 0x2b, 0xab, 0x31, 0xc3, 0x9f, 0x21, 0xff, 0x6f, 0x96,
	0xe3, 0x4e, 0xce, 0xde, 0xe8, 0x11, 0x7e, 0xb2, 0x87, 0x2b, 0xfe, 0x01, 0xf9, 0xd1, 0xad, 0x9d,
	0x64, 0xe0, 0xe5, 0x4e, 0x12, 0x64, 0x3e, 0x00, 0x78, 0xed, 0x8c, 0xdf, 0x1a, 0xd3, 0x3a, 0x0d,
	0x1b, 0xd9, 0x7d, 0x2e, 0x64, 0xe0, 0x8d, 0xe6, 0xf2, 0x62, 0x65, 0xa9, 0xba, 0x5a, 0x51, 0x1b,
	0xf7, 0x0b, 0x4a, 0x45, 0xad, 0x2d, 0x97, 0x16, 0xd5, 0x46, 0xb3, 0xd0, 0x5c, 0x69, 0xa8, 0x2b,
	0x4b, 0x8d, 0x7a, 0xa5, 0x54, 0x5d, 0xa8, 0x56, 0xca, 0xd1, 0x80, 0x30, 0x03, 0xaf, 0x5f, 0xc0,
	0x75, 0xd6, 0x95, 0x72, 0x14, 0x08, 0x37, 0xe1, 0xf4, 0x85, 0x92, 0x3e, 0x31, 0x28, 0xdc, 0x86,
	0xe9, 0xbf, 0xe8, 0xa9, 0x95, 0x87, 0xf5, 0xaa, 0x52, 0x5d, 0xba, 0x17, 0x0d, 0xc5, 0xc3, 0x5b,
	0xaf, 0xa5, 0x40, 0xf1, 0xee, 0xde, 0xa1, 0x04, 0xf6, 0x0f, 0x25, 0xf0, 0xf5, 0x50, 0x02, 0xcf,
	0x8f, 0xa4, 0xc0, 0xfe, 0x91, 0x14, 0xf8, 0x74, 0x24, 0x05, 0x56, 0xe5, 0xdf, 0x9b, 0xf4, 0xcb,
	0x3b, 0x74, 0x9b, 0xd4, 0x1a, 0x71, 0x3f, 0x3d, 0xf3, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x39,
	0xcb, 0xaf, 0x8d, 0x0e, 0x05, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ValidatorBondFactor.Equal(that1.ValidatorBondFactor) {
		return false
	}
	if !this.GlobalLiquidStakingCap.Equal(that1.GlobalLiquidStakingCap) {
		return false
	}
	if !this.ValidatorLiquidStakingCap.Equal(that1.ValidatorLiquidStakingCap) {
		return false
	}
	return true
}
func (this *TokenizeShareRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TokenizeShareRecord)
	if !ok {
		that2, ok := that.(TokenizeShareRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Owner != that1.Owner {
		return false
	}
	if this.ModuleAccount != that1.ModuleAccount {
		return false
	}
	if this.Validator != that1.Validator {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ValidatorLiquidStakingCap.Size()
		i -= size
		if _, err := m.ValidatorLiquidStakingCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size := m.GlobalLiquidStakingCap.Size()
		i -= size
		if _, err := m.GlobalLiquidStakingCap.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size := m.ValidatorBondFactor.Size()
		i -= size
		if _, err := m.ValidatorBondFactor.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintLsm(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	return len(dAtA) - i, nil
}

func (m *TokenizeShareRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenizeShareRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenizeShareRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Validator) > 0 {
		i -= len(m.Validator)
		copy(dAtA[i:], m.Validator)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.Validator)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ModuleAccount) > 0 {
		i -= len(m.ModuleAccount)
		copy(dAtA[i:], m.ModuleAccount)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.ModuleAccount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintLsm(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintLsm(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingTokenizeShareAuthorizations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingTokenizeShareAuthorizations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingTokenizeShareAuthorizations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for iNdEx := len(m.Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Addresses[iNdEx])
			copy(dAtA[i:], m.Addresses[iNdEx])
			i = encodeVarintLsm(dAtA, i, uint64(len(m.Addresses[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TokenizeShareRecordReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenizeShareRecordReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TokenizeShareRecordReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintLsm(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RecordId != 0 {
		i = encodeVarintLsm(dAtA, i, uint64(m.RecordId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintLsm(dAtA []byte, offset int, v uint64) int {
	offset -= sovLsm(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ValidatorBondFactor.Size()
	n += 1 + l + sovLsm(uint64(l))
	l = m.GlobalLiquidStakingCap.Size()
	n += 1 + l + sovLsm(uint64(l))
	l = m.ValidatorLiquidStakingCap.Size()
	n += 1 + l + sovLsm(uint64(l))
	return n
}

func (m *TokenizeShareRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovLsm(uint64(m.Id))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	l = len(m.ModuleAccount)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	l = len(m.Validator)
	if l > 0 {
		n += 1 + l + sovLsm(uint64(l))
	}
	return n
}

func (m *PendingTokenizeShareAuthorizations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Addresses) > 0 {
		for _, s := range m.Addresses {
			l = len(s)
			n += 1 + l + sovLsm(uint64(l))
		}
	}
	return n
}

func (m *TokenizeShareRecordReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordId != 0 {
		n += 1 + sovLsm(uint64(m.RecordId))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovLsm(uint64(l))
		}
	}
	return n
}

func sovLsm(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLsm(x uint64) (n int) {
	return sovLsm(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorBondFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorBondFactor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalLiquidStakingCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GlobalLiquidStakingCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorLiquidStakingCap", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorLiquidStakingCap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenizeShareRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenizeShareRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenizeShareRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ModuleAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingTokenizeShareAuthorizations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingTokenizeShareAuthorizations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingTokenizeShareAuthorizations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Addresses = append(m.Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenizeShareRecordReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenizeShareRecordReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenizeShareRecordReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLsm
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLsm
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, types.DecCoin{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsm(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsm
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLsm(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLsm
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsm
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLsm
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLsm
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLsm
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLsm        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLsm          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLsm = fmt.Errorf("proto: unexpected end of group")
)
